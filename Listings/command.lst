     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17                              <1> 
    18                              <1> 
    19                              <1> cmdLineStatePtr:
    20 0000009D 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    21 0000009E FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    22 000000A0 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    23                              <1> ;These variables are valid for a SINGLE command in a command line
    24                              <1> ;Next two bytes, if set to -1, flags error
    25 000000A2 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    26 000000A3 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    27                              <1> ;                    If 2, we are redirecting output to a file, by appending
    28 000000A4 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    29 000000A6 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    30                              <1> 
    31                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    32 000000A8 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    33 000000A9 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    34 000000AA 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    35                              <1> 
    36 000000AB 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    37 000000AC 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000AD 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    39                              <1> 
    40                              <1> cmdStateL equ $ - cmdStatePtr
    41                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    42                              <1> 
    43                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    44 000000AE 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    45 000000AF 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    46 000000B7 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    46 000000C0 000000000000000000- <1>
    46 000000C9 000000000000000000- <1>
    46 000000D2 000000000000000000- <1>
    46 000000DB 000000000000000000- <1>
    46 000000E4 000000000000000000- <1>
    46 000000ED 000000000000000000- <1>
    46 000000F6 000000000000000000- <1>
    46 000000FF 00000000000000      <1>
    47 00000106 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    47 0000010F 000000000000000000- <1>
    47 00000118 000000000000000000- <1>
    47 00000121 000000000000000000- <1>
    47 0000012A 000000000000000000- <1>
    47 00000133 000000000000000000- <1>
    47 0000013C 000000000000000000- <1>
    47 00000145 000000000000000000- <1>
    47 0000014E 00000000000000      <1>
    48                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    49                              <1> 
    50                              <1> ;Structs and strings
    51                              <1> 
    52 00000155 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    52 0000015E 00000000000000      <1>
    53 00000165 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    53 0000016E 000000000000000000- <1>
    53 00000177 000000000000000000- <1>
    53 00000180 000000000000000000- <1>
    53 00000189 00000000000000      <1>
    54                              <1> 
    55 00000190 000000000000000000- <1> launchBlock db execProg_size dup (0)
    55 00000199 000000000000000000- <1>
    55 000001A2 000000000000000000- <1>
    55 000001AB 0000000000          <1>
    56                              <1> 
    57 000001B0 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    57 000001B9 000000000000000000- <1>
    57 000001C2 000000000000000000- <1>
    57 000001CB 000000000000000000- <1>
    57 000001D4 000000000000000000- <1>
    57 000001DD 000000000000000000- <1>
    57 000001E6 000000000000000000- <1>
    57 000001EF 000000000000000000- <1>
    57 000001F8 000000000000000000- <1>
    57 00000201 000000000000000000- <1>
    57 0000020A 000000000000000000- <1>
    57 00000213 000000000000000000- <1>
    57 0000021C 000000000000000000- <1>
    57 00000225 000000000000000000- <1>
    57 0000022E 00000000            <1>
    58                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    59 00000232 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    59 0000023B 000000000000000000- <1>
    59 00000244 000000000000000000- <1>
    59 0000024D 000000000000000000- <1>
    59 00000256 000000000000000000- <1>
    59 0000025F 000000000000000000- <1>
    59 00000268 000000000000000000- <1>
    59 00000271 000000000000000000- <1>
    59 0000027A 000000000000000000- <1>
    59 00000283 000000000000000000- <1>
    59 0000028C 000000000000000000- <1>
    59 00000295 000000000000000000- <1>
    59 0000029E 000000000000000000- <1>
    59 000002A7 000000000000000000- <1>
    59 000002B0 00000000            <1>
    60 000002B4 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    60 000002BD 000000000000000000- <1>
    60 000002C6 000000000000000000- <1>
    60 000002CF 000000000000000000- <1>
    60 000002D8 000000000000000000- <1>
    60 000002E1 000000000000000000- <1>
    60 000002EA 000000000000000000- <1>
    60 000002F3 000000000000000000- <1>
    60 000002FC 000000000000000000- <1>
    60 00000305 000000000000000000- <1>
    60 0000030E 000000000000000000- <1>
    60 00000317 000000000000000000- <1>
    60 00000320 000000000000000000- <1>
    60 00000329 000000000000000000- <1>
    60 00000332 00000000            <1>
    61 00000336 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    61 0000033F 000000000000000000- <1>
    61 00000348 000000000000000000- <1>
    61 00000351 000000000000000000- <1>
    61 0000035A 000000000000000000- <1>
    61 00000363 000000000000000000- <1>
    61 0000036C 000000000000000000- <1>
    61 00000375 000000000000000000- <1>
    61 0000037E 00000000000000      <1>
    62 00000385 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    62 0000038E 0000000000          <1>
    63                              <1> 
    64 00000393 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    64 0000039C 000000000000000000- <1>
    64 000003A5 000000000000000000- <1>
    64 000003AE 000000000000000000- <1>
    64 000003B7 000000000000000000- <1>
    64 000003C0 000000000000000000- <1>
    64 000003C9 000000000000000000- <1>
    64 000003D2 000000000000000000- <1>
    64 000003DB 00000000000000      <1>
    65 000003E2 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    65 000003EB 000000000000000000- <1>
    65 000003F4 000000000000000000- <1>
    65 000003FD 000000000000000000- <1>
    65 00000406 000000000000000000- <1>
    65 0000040F 000000000000000000- <1>
    65 00000418 000000000000000000- <1>
    65 00000421 000000000000000000- <1>
    65 0000042A 00000000000000      <1>
    66                              <1> 
    67                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    68 00000431 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 0000043A 000000000000000000- <1>
    68 00000443 000000000000000000- <1>
    68 0000044C 000000000000000000- <1>
    68 00000455 000000000000000000- <1>
    68 0000045E 000000000000000000- <1>
    68 00000467 000000000000000000- <1>
    68 00000470 000000000000000000- <1>
    68 00000479 00000000000000      <1>
    69 00000480 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    69 00000489 000000000000000000- <1>
    69 00000492 000000000000000000- <1>
    69 0000049B 000000000000000000- <1>
    69 000004A4 000000000000000000- <1>
    69 000004AD 000000000000000000- <1>
    69 000004B6 000000000000000000- <1>
    69 000004BF 000000000000000000- <1>
    69 000004C8 00000000000000      <1>
    70                              <1> 
    71 000004CF 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    72 000004D7 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    73                              <1> 
    74                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    75                              <1> ; a really long invalid DOS path for PATH to work properly.
    76 000004DF 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    76 000004E8 000000000000000000- <1>
    76 000004F1 000000000000000000- <1>
    76 000004FA 000000000000000000- <1>
    76 00000503 000000000000000000- <1>
    76 0000050C 000000000000000000- <1>
    76 00000515 000000000000000000- <1>
    76 0000051E 000000000000000000- <1>
    76 00000527 000000000000000000- <1>
    76 00000530 000000000000000000- <1>
    76 00000539 000000000000000000- <1>
    76 00000542 000000000000000000- <1>
    76 0000054B 000000000000000000- <1>
    76 00000554 000000000000000000- <1>
    76 0000055D 000000000000000000- <1>
    76 00000566 000000000000000000- <1>
    76 0000056F 000000000000000000- <1>
    76 00000578 000000000000000000- <1>
    76 00000581 000000000000000000- <1>
    76 0000058A 000000000000000000- <1>
    76 00000593 000000000000000000- <1>
    76 0000059C 000000000000000000- <1>
    76 000005A5 000000000000000000- <1>
    76 000005AE 000000000000000000- <1>
    76 000005B7 000000000000000000- <1>
    76 000005C0 000000000000000000- <1>
    76 000005C9 000000000000000000- <1>
    76 000005D2 000000000000000000- <1>
    76 000005DB 0000000000000000    <1>
    77                              <1> 
    78                              <1> ;Internal Function vars
    79                              <1> ;Dir Vars
    80 000005E3 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    81                              <1> ;                                   Bit[1] set => /P or /p specified
    82                              <1> ;                                   Bit[2] set => A file/path specified
    83 000005E4 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    84 000005E5 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    85 000005E6 00                  <1> dirDrv      db 0    ;0 based drive number to use
    86 000005E7 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    86 000005F0 000000000000000000- <1>
    86 000005F9 000000000000000000- <1>
    86 00000602 000000000000000000- <1>
    86 0000060B 000000000000000000- <1>
    86 00000614 000000000000000000- <1>
    86 0000061D 000000000000000000- <1>
    86 00000626 000000000000000000- <1>
    86 0000062F 000000000000000000- <1>
    86 00000638 000000000000000000- <1>
    86 00000641 000000000000000000- <1>
    86 0000064A 000000000000000000- <1>
    86 00000653 000000000000000000- <1>
    86 0000065C 000000000000000000- <1>
    86 00000665 00000000            <1>
    87 00000669 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    87 00000672 3F3F3F3F3F3F3F      <1>
    88                              <1> dirWideType equ 1
    89                              <1> dirPageType equ 2
    90                              <1> dirFileType equ 4
    91                              <1> ;Volume Vars
    92                              <1> volFcb:
    93                              <1>     istruc exFcb
    94 00000679 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    95 0000067A 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    96 00000680 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    97 00000681 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    98 00000689 3F3F3F              <1>     at exFcb.fileext,   db "???"
    99 0000068C 00000000            <1>     at exFcb.curBlock,  dd 0
   100 00000690 00<rep 15h>         <1>     iend 
   101                              <1> 
   102                              <1> ;Time/Date vars
   103 000006A5 00                  <1> td1 db 0    ;Minutes/Year
   104 000006A6 00                  <1> td2 db 0    ;Hours/Zero
   105 000006A7 00                  <1> td3 db 0    ;Hundredths/Day
   106 000006A8 00                  <1> td4 db 0    ;Seconds/Month
   107                              <1> 
   108                              <1> ;Rename/Copy/Delete Buffers
   109                              <1> delPath:
   110 000006A9 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   110 000006B2 000000000000000000- <1>
   110 000006BB 000000000000000000- <1>
   110 000006C4 000000000000000000- <1>
   110 000006CD 000000000000000000- <1>
   110 000006D6 000000000000000000- <1>
   110 000006DF 000000000000000000- <1>
   110 000006E8 000000000000000000- <1>
   110 000006F1 000000000000000000- <1>
   110 000006FA 000000000000000000- <1>
   110 00000703 000000000000000000- <1>
   110 0000070C 000000000000000000- <1>
   110 00000715 000000000000000000- <1>
   110 0000071E 000000000000000000- <1>
   110 00000727 00000000            <1>
   111 0000072B 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   111 00000734 000000000000000000- <1>
   111 0000073D 000000000000000000- <1>
   111 00000746 000000000000000000- <1>
   111 0000074F 000000000000000000- <1>
   111 00000758 000000000000000000- <1>
   111 00000761 000000000000000000- <1>
   111 0000076A 000000000000000000- <1>
   111 00000773 000000000000000000- <1>
   111 0000077C 000000000000000000- <1>
   111 00000785 000000000000000000- <1>
   111 0000078E 000000000000000000- <1>
   111 00000797 000000000000000000- <1>
   111 000007A0 000000000000000000- <1>
   111 000007A9 00000000            <1>
   112 000007AD 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   113 000007B5 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   114 000007BD 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   114 000007C6 2020                <1>
   115                              <1> ;Copy Handles
   116 000007C8 FFFF                <1> sourceHdl   dw -1
   117 000007CA FFFF                <1> destHdl     dw -1
   118 000007CC 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   119 000007CE 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   119 000007D7 000000000000000000- <1>
   119 000007E0 000000000000000000- <1>
   119 000007E9 000000000000000000- <1>
   119 000007F2 000000000000000000- <1>
   119 000007FB 000000000000000000- <1>
   119 00000804 000000000000000000- <1>
   119 0000080D 000000000000000000- <1>
   119 00000816 000000000000000000- <1>
   119 0000081F 000000000000000000- <1>
   119 00000828 000000000000000000- <1>
   119 00000831 000000000000000000- <1>
   119 0000083A 000000000000000000- <1>
   119 00000843 000000000000000000- <1>
   119 0000084C 0000                <1>
   120                              <1> 
   121                              <1> ;Environment manipulation vars
   122 0000084E 0000                <1> envVarSz        dw 0    ;Env var size
   123 00000850 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000852 03444952            <1>     db 3, "DIR"
     8 00000856 7219                <1>     dw dir - startLbl
     9                              <1> 
    10 00000858 024344              <1>     db 2, "CD"
    11 0000085B 3B1E                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000085D 054348444952        <1>     db 5, "CHDIR"
    14 00000863 3B1E                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000865 024D44              <1>     db 2, "MD"
    17 00000868 B61E                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000086A 054D4B444952        <1>     db 5, "MKDIR"
    20 00000870 B61E                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000872 025244              <1>     db 2, "RD"
    23 00000875 021F                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000877 05524D444952        <1>     db 5, "RMDIR"
    26 0000087D 021F                <1>     dw rmdir - startLbl
    27                              <1> 
    28 0000087F 0344454C            <1>     db 3, "DEL"
    29 00000883 F020                <1>     dw erase - startLbl
    30                              <1> 
    31 00000885 054552415345        <1>     db 5, "ERASE"
    32 0000088B F020                <1>     dw erase - startLbl
    33                              <1> 
    34 0000088D 0444415445          <1>     db 4, "DATE"
    35 00000892 2E22                <1>     dw date - startLbl
    36                              <1> 
    37 00000894 0454494D45          <1>     db 4, "TIME"
    38 00000899 9322                <1>     dw time - startLbl
    39                              <1> 
    40 0000089B 04434F5059          <1>     db 4, "COPY"
    41 000008A0 4E1F                <1>     dw copy - startLbl
    42                              <1> 
    43 000008A2 0443545459          <1>     db 4, "CTTY"
    44 000008A7 D022                <1>     dw ctty - startLbl
    45                              <1> 
    46 000008A9 03434C53            <1>     db 3, "CLS"
    47 000008AD 6B23                <1>     dw cls - startLbl
    48                              <1> 
    49 000008AF 05425245414B        <1>     db 5, "BREAK"
    50 000008B5 DD23                <1>     dw break - startLbl
    51                              <1> 
    52 000008B7 06564552494659      <1>     db 6, "VERIFY"
    53 000008BE 5E24                <1>     dw verify - startLbl
    54                              <1> 
    55 000008C0 0652454E414D45      <1>     db 6, "RENAME"
    56 000008C7 DB24                <1>     dw rename - startLbl
    57                              <1> 
    58 000008C9 0352454E            <1>     db 3, "REN"
    59 000008CD DB24                <1>     dw rename - startLbl
    60                              <1>     
    61 000008CF 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000008D8 D828                <1>     dw truename - startLbl
    63                              <1> 
    64 000008DA 03564552            <1>     db 3, "VER"
    65 000008DE BE2A                <1>     dw version - startLbl
    66                              <1> 
    67 000008E0 03564F4C            <1>     db 3, "VOL"
    68 000008E4 FF29                <1>     dw volume - startLbl
    69                              <1> 
    70 000008E6 034D454D            <1>     db 3, "MEM"
    71 000008EA 022B                <1>     dw memory - startLbl
    72                              <1> 
    73 000008EC 0445584954          <1>     db 4, "EXIT"
    74 000008F1 FF2C                <1>     dw exit - startLbl
    75                              <1> 
    76 000008F3 0454595045          <1>     db 4, "TYPE"
    77 000008F8 4C2C                <1>     dw type - startLbl
    78                              <1> 
    79 000008FA 054C4142454C        <1>     db 5, "LABEL"
    80 00000900 2929                <1>     dw label - startLbl
    81                              <1> 
    82 00000902 0450415448          <1>     db 4, "PATH"
    83 00000907 D630                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 00000909 03534554            <1>     db 3, "SET"
    86 0000090D B72F                <1>     dw set - startLbl
    87                              <1> 
    88 0000090F 0650524F4D5054      <1>     db 6, "PROMPT"
    89 00000916 B531                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 00000918 054D4B4C424C        <1>     db 5, "MKLBL"
    92 0000091E 5329                <1>     dw mklbl - startLbl
    93                              <1> 
    94 00000920 05524D4C424C        <1>     db 5, "RMLBL"
    95 00000926 8E29                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 00000928 05524E4C424C        <1>     db 5, "RNLBL"
    98 0000092E C929                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 00000930 05544F554348        <1>     db 5, "TOUCH"
   101 00000936 CB26                <1>     dw touch - startLbl
   102                              <1> 
   103 00000938 044A4F494E          <1>     db 4, "JOIN"
   104 0000093D 2E27                <1>     dw join - startLbl
   105                              <1> 
   106 0000093F 055355425354        <1>     db 5, "SUBST"
   107 00000945 F127                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109 00000947 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000948 0D0A24              <1> crlf    db  CR,LF,"$"
     3 0000094B 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000950 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000959 696C65206D69737369- <1>
     4 00000962 6E670D0A24          <1>
     5 00000967 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000970 6469736B2077697468- <1>
     5 00000979 206261746368206669- <1>
     5 00000982 6C65                <1>
     6 00000984 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 0000098D 737320616E79206B65- <1>
     6 00000996 79207768656E207265- <1>
     6 0000099F 6164790D0A24        <1>
     7 000009A5 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000009AE 6E64206F722066696C- <1>
     7 000009B7 65206E616D650D0A24  <1>
     8 000009C0 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000009C9 2066696C65206E616D- <1>
     8 000009D2 65206F7220          <1>
     9 000009D7 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000009E0 666F756E640D0A24    <1>
    10 000009E8 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    10 000009F1 656E74206469736B20- <1>
    10 000009FA 73706163650D0A24    <1>
    11 00000A02 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000A0B 7669726F6E6D656E74- <1>
    11 00000A14 2073706163650D0A24  <1>
    12 00000A1D 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000A26 74696F6E206572726F- <1>
    12 00000A2F 720D0A24            <1>
    13 00000A33 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000A3C 6F7420626520636F70- <1>
    13 00000A45 696564206F6E746F20- <1>
    13 00000A4E 697473656C660D0A24  <1>
    14 00000A57 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000A60 662064657374696E61- <1>
    14 00000A69 74696F6E206C6F7374- <1>
    14 00000A72 206265666F72652063- <1>
    14 00000A7B 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000A81 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000A8A 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000A93 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000A9C 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000A9D 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000AA6 65650D0A24          <1>
    21 00000AAB 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000AB4 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000ABD 726976652073706563- <1>
    23 00000AC6 696669636174696F6E- <1>
    23 00000ACF 0D0A24              <1>
    24 00000AD2 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000ADB 6B6579207768656E20- <1>
    24 00000AE4 7265616479202E202E- <1>
    24 00000AED 202E2024            <1>
    25 00000AF1 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000AFA 6172616D657465720D- <1>
    25 00000B03 0A24                <1>
    26                              <1> 
    27 00000B05 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000B0E 576564546875467269- <1>
    27 00000B17 536174              <1>
    28 00000B1A 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000B23 206461746524        <1>
    29 00000B29 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000B32 6174652069732024    <1>
    30 00000B3A 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000B43 657720646174652024  <1>
    31 00000B4C 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000B55 293A2024            <1>
    32 00000B59 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000B62 293A2024            <1>
    33 00000B66 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000B6F 293A2024            <1>
    34 00000B73 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000B7C 2074696D6524        <1>
    35 00000B82 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000B8B 696D652069732024    <1>
    36 00000B93 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000B9C 65772074696D653A20- <1>
    36 00000BA5 24                  <1>
    37                              <1> 
    38 00000BA6 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000BAF 7572652028592F4E29- <1>
    38 00000BB8 3F2024              <1>
    39                              <1> 
    40 00000BBB 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000BC4 56657273696F6E2024  <1>
    41                              <1> 
    42 00000BCD 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000BD6 6E2064726976652024  <1>
    43 00000BDF 2069732024          <1> volOk   db " is $"
    44 00000BE4 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000BED 6162656C24          <1>
    45                              <1> 
    46 00000BF2 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000BFB 69726563746F72790D- <1>
    46 00000C04 0A24                <1>
    47 00000C06 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000C0F 206372656174652064- <1>
    47 00000C18 69726563746F72790D- <1>
    47 00000C21 0A24                <1>
    48 00000C23 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000C2C 6174682C206E6F7420- <1>
    48 00000C35 6469726563746F7279- <1>
    48 00000C3E 2C0D0A              <1>
    49 00000C41 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000C4A 6F7279206E6F742065- <1>
    49 00000C53 6D7074790D0A24      <1>
    50 00000C5A 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000C63 79206F66202024      <1>
    51 00000C6A 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000C73 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000C7C 6E6965640D0A24      <1>
    53 00000C83 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000C8C 72697665206973206E- <1>
    53 00000C95 6F206C6F6E67657220- <1>
    53 00000C9E 76616C696424        <1>
    54                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    55 00000CA4 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000CAD 65766963650D0A24    <1>
    56 00000CB5 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000CBE 20666F756E640D0A24  <1>
    57 00000CC7 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000CD0 726F720D0A24        <1>
    58 00000CD6 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000CDF 6F74206265206E6573- <1>
    58 00000CE8 7465640D0A24        <1>
    59 00000CEE 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000CF7 6174652066696C6520- <1>
    59 00000D00 6572726F7220647572- <1>
    59 00000D09 696E6720706970650D- <1>
    59 00000D12 0A24                <1>
    60 00000D14 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000D1D 2062696E6172792072- <1>
    60 00000D26 656164732066726F6D- <1>
    60 00000D2F 206120646576696365- <1>
    60 00000D38 0D0A24              <1>
    61 00000D3B 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000D41 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000D46 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000D4F 24                  <1>
    64 00000D50 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000D59 2024                <1>
    65 00000D5B 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000D64 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000D6D 617468206F72206669- <1>
    66 00000D76 6C65206E616D650D0A- <1>
    66 00000D7F 24                  <1>
    67 00000D80 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000D89 756D626572206F6620- <1>
    67 00000D92 706172616D65746572- <1>
    67 00000D9B 730D0A24            <1>
    68 00000D9F 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000DA8 74696E6720746F2064- <1>
    68 00000DB1 6576696365          <1>
    69 00000DB6 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000DBA 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000DC3 20202020202020546F- <1>
    71 00000DCC 74616C207379737465- <1>
    71 00000DD5 6D206D656D6F72793A- <1>
    71 00000DDE 2024                <1>
    72 00000DE0 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000DE9 20202020202020204D- <1>
    72 00000DF2 656D6F727920757365- <1>
    72 00000DFB 6420627920444F533A- <1>
    72 00000E04 2024                <1>
    73 00000E06 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000E0F 656D6F727920757365- <1>
    73 00000E18 64206279206170706C- <1>
    73 00000E21 69636174696F6E733A- <1>
    73 00000E2A 2024                <1>
    74 00000E2C 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000E35 656D6F727920726573- <1>
    74 00000E3E 657276656420627920- <1>
    74 00000E47 68617264776172653A- <1>
    74 00000E50 2024                <1>
    75 00000E52 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000E5B 202020202020202020- <1>
    75 00000E64 2020202020204D656D- <1>
    75 00000E6D 6F727920667265653A- <1>
    75 00000E76 2024                <1>
    76 00000E78 20627974657324      <1> memByte db " bytes$"
    77 00000E7F 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000E88 6F7420417373657274- <1>
    77 00000E91 61696E20444F532045- <1>
    77 00000E9A 6E74727920506F696E- <1>
    77 00000EA3 7424                <1>
    78 00000EA5 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000EAE 416C6C6F636174696F- <1>
    78 00000EB7 6E204572726F7224    <1>
    79 00000EBF 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000EC8 4572726F7224        <1>
    80 00000ECE 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000ED7 68616C74656424      <1>
    81                              <1> 
    82 00000EDE 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000EE7 206372656174652070- <1>
    82 00000EF0 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000EF5 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000EFE 6F6E206572726F720D- <1>
    84 00000F07 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000F08 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000F0C 2020202024          <1> fourSpc  db "    $"
    89 00000F11 20202024            <1> threeSpc db "   $"
    90 00000F15 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000F18 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000F21 696679204F4E206F72- <1>
    92 00000F2A 204F46460D0A24      <1>
    93                              <1> 
    94 00000F31 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    95 00000F39 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000F42 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000F46 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000F4E 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000F57 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000F5D 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000F64 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000F67 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000F6B C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000F6E B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000F70 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000F73 CD21                <1>     int 21h
    11                              <1> commandMain:
    12 00000F75 488B2589F0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    13 00000F7C FC                  <1>     cld ;Ensure stringops are done the right way
    14 00000F7D C6052CF2FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    15 00000F84 C605A7F2FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    16 00000F8B C60522F3FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    17                              <1> .inputMain:         ;Only reset once per line!
    18 00000F92 E8CE240000          <1>     call printCRLF  ;Command complete, indicate with new line!
    19 00000F97 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    20 00000F9C CD21                <1>     int 21h
    21 00000F9E B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    22 00000FA3 BA01000000          <1>     mov edx, 1      ;Start new print job
    23 00000FA8 CD21                <1>     int 21h
    24                              <1> .inputGetAgain:
    25 00000FAA E839270000          <1>     call clearCommandLineState  ;Cleans all handles 5->MAX
    26 00000FAF F605F8F0FFFFFF      <1>     test byte [batFlag], -1 ;If batch on, get the next line to execute
    27 00000FB6 0F8599080000        <1>     jnz batNextLine
    28                              <1> .inputMain2:
    29 00000FBC E814240000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    30 00000FC1 488D15E8F1FFFF      <1>     lea rdx, inBuffer
    31 00000FC8 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    32 00000FCD CD21                <1>     int 21h
    33 00000FCF E891240000          <1>     call printCRLF  ;Note we have accepted input
    34                              <1> ;First check we had something typed in of length greater than 0
    35 00000FD4 803DD6F1FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    36 00000FDB 74DF                <1>     je .inputMain2  ;If not, keep looping input
    37                              <1>     ;Copy over the input text
    38 00000FDD 488D35CCF1FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    39                              <1> .batCopy:               ;Jump here to copy the batch input line 
    40 00000FE4 488D3D47F2FFFF      <1>     lea rdi, cpyBuffer
    41 00000FEB B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    42 00000FF0 F3A4                <1>     rep movsb
    43 00000FF2 E876000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    44 00000FF7 488D35B8F2FFFF      <1>     lea rsi, cmdBuffer + 2
    45 00000FFE E8B3260000          <1>     call skipDelimiters
    46 00001003 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    47 00001006 74A2                <1>     je .inputGetAgain       ;Wipe redir flags!
    48 00001008 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    49 0000100B 7456                <1>     je .synErr
    50                              <1> .pipeLoop:
    51 0000100D 4C8B05FBEFFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    52 00001014 E8AE000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    53                              <1>     ;ZF here indicates if we are at the end of the command or nots
    54 00001019 E884060000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    55 0000101E E8FD000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    56 00001023 E8B0010000          <1>     call doCommandLine      ;This preps and executes the command portion.
    57 00001028 E87F040000          <1>     call advanceRedir       ;Now advance and end redir if needed
    58 0000102D F60569F0FFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    59 00001034 0F8458FFFFFF        <1>     jz .inputMain
    60                              <1>     ;Now we pull the commandline forwards. 
    61 0000103A E888000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    62 0000103F 488D3D70F2FFFF      <1>     lea rdi, cmdBuffer + 2
    63 00001046 4889F1              <1>     mov rcx, rsi
    64 00001049 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    65 0000104C 280D63F2FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And rease from the count
    66 00001052 8A0D5DF2FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    67 00001058 FFC1                <1>     inc ecx     ;One more for the terminating char
    68 0000105A F3A4                <1>     rep movsb   ;Move the chars over    
    69 0000105C E876260000          <1>     call clearCommandState  ;Else, clear the command state and start again
    70 00001061 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    71                              <1> .synErr:
    72 00001063 E891080000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
    73 00001068 E91E030000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
    74                              <1> makeCmdBuffer:
    75                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    76                              <1> ; copy buffer. Called only once in a cycle.
    77                              <1> ;Throughout: CL has char count, CH has quote count
    78 0000106D 488D35C0F1FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    79 00001074 31C9                <1>     xor ecx, ecx
    80 00001076 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    81                              <1> .countQuotes:
    82 00001079 AC                  <1>     lodsb
    83 0000107A 3C22                <1>     cmp al, '"'
    84 0000107C 7507                <1>     jne .notQuoteToCount
    85 0000107E FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    86 00001080 E9F4FFFFFF          <1>     jmp .countQuotes
    87                              <1> .notQuoteToCount:
    88 00001085 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    89 00001087 75F0                <1>     jne .countQuotes
    90 00001089 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    91 0000108C 488D3D23F2FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
    92                              <1> .getChar:
    93 00001093 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
    94 00001094 3C22                <1>     cmp al, '"'     ;Is char a quote?
    95 00001096 750E                <1>     jne .notQuote
    96 00001098 FECD                <1>     dec ch          ;We have a quote, now decrement
    97 0000109A 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
    98                              <1> .searchForClosingQuote:
    99                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   100 0000109C AA                  <1>     stosb   ;Store char and inc rdi
   101 0000109D FEC1                <1>     inc cl
   102 0000109F AC                  <1>     lodsb   ;Get next char
   103 000010A0 3C22                <1>     cmp al, '"'
   104 000010A2 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   105 000010A4 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   106                              <1> .notQuote:
   107 000010A6 E89B050000          <1>     call peelRedir      ;Intervene redir if needed
   108 000010AB 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   109 000010AD 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   110 000010AF EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   111                              <1> .pipeHandle:
   112                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   113 000010B1 0F84BC020000        <1>     jz pipeFailure ;We had double pipe symbol, reset!
   114                              <1> .notRedir:
   115 000010B7 AA                  <1>     stosb       ;Store char and advance rdi
   116 000010B8 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   117 000010BA 7404                <1>     je .exit
   118 000010BC FEC1                <1>     inc cl      ;Increment char count
   119 000010BE EBD3                <1>     jmp short .getChar    ;If not, get next char
   120                              <1> .exit:
   121 000010C0 880DEFF1FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   122                              <1>     return
    13                              <2> %%_ret:
    14 000010C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> makeCmdString:
   125                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   126                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   127                              <1> ; Copies into the psp.
   128                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   129 000010C7 488D35E8F1FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   130 000010CE 31C9                <1>     xor ecx, ecx
   131 000010D0 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   132                              <1> .countQuotes:
   133 000010D3 AC                  <1>     lodsb
   134 000010D4 3C22                <1>     cmp al, '"'
   135 000010D6 7507                <1>     jne .notQuoteToCount
   136 000010D8 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   137 000010DA E9F4FFFFFF          <1>     jmp .countQuotes
   138                              <1> .notQuoteToCount:
   139 000010DF 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   140 000010E1 75F0                <1>     jne .countQuotes
   141 000010E3 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   142 000010E6 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   143                              <1> .getChar:
   144 000010ED AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   145 000010EE 3C22                <1>     cmp al, '"'     ;Is char a quote?
   146 000010F0 750E                <1>     jne .notQuote
   147 000010F2 FECD                <1>     dec ch          ;We have a quote, now decrement
   148 000010F4 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   149                              <1> .searchForClosingQuote:
   150                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   151 000010F6 AA                  <1>     stosb   ;Store char and inc rdi
   152 000010F7 FEC1                <1>     inc cl
   153 000010F9 AC                  <1>     lodsb   ;Get next char
   154 000010FA 3C22                <1>     cmp al, '"'
   155 000010FC 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   156 000010FE FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   157                              <1> .notQuote:
   158 00001100 3C7C                <1>     cmp al, "|"
   159 00001102 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   160 00001104 B00D                <1>     mov al, CR          ;Store the pipe char
   161 00001106 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   162                              <1> .notPipe:
   163 00001109 AA                  <1>     stosb       ;Store char and advance rdi
   164 0000110A 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   165 0000110C 7404                <1>     je .exit
   166 0000110E FEC1                <1>     inc cl      ;Increment char count
   167 00001110 EBDB                <1>     jmp short .getChar    ;If not, get next char
   168                              <1> .exit:
   169 00001112 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   170 00001115 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   171 0000111C 803E0D              <1>     cmp byte [rsi], CR  
   172                              <1>     return
    13                              <2> %%_ret:
    14 0000111F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> analyseCmdline:
   175                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   176                              <1> ; processes the command name into the FCB.  
   177 00001120 C6055EF2FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   178 00001127 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   179 0000112E 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   180 00001131 E880250000          <1>     call skipDelimiters     ;Skip any preceeding separators
   181 00001136 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   182                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001139 74(1F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   183 0000113B 488D3DF4F1FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   184 00001142 E8A0260000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   185 00001147 48FFCE              <1>     dec rsi ;Point it back to the delim char
   186 0000114A E880000000          <1>     call .skipAndCheckCR
   187 0000114F 7439                <1>     je .setupCmdVars
   188 00001151 C60550EFFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   189 00001158 4889F0              <1>     mov rax, rsi
   190 0000115B 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   191 0000115E 880545EFFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   192                              <1> .skipArg:
   193 00001164 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   194 00001165 3C0D                <1>     cmp al, CR
   195 00001167 7421                <1>     je .setupCmdVars
   196 00001169 E856250000          <1>     call isALdelimiter
   197 0000116E 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   198 00001170 E85A000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   199 00001175 7413                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   200 00001177 C6052DEFFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   201 0000117E 4889F0              <1>     mov rax, rsi            
   202 00001181 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   203 00001184 880522EFFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   204                              <1> .setupCmdVars:
   205                              <1> ;Before returning, we copy the command name to cmdName 
   206 0000118A C605F4F1FFFF00      <1>     mov byte [cmdName], 0   ;Initialise this field to indicate no cmd
   207 00001191 488D3D9EF1FFFF      <1>     lea rdi, cmdPathSpec
   208 00001198 E8D0250000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   209 0000119D E8F8240000          <1>     call strlen ;Get the length of the final path componant
   210 000011A2 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   211 000011A8 771D                <1>     ja .exitBad     ;Return error
   212 000011AA 4889FE              <1>     mov rsi, rdi
   213 000011AD 488D3DD1F1FFFF      <1>     lea rdi, cmdName
   214 000011B4 FFC9                <1>     dec ecx ;Minus the terminating null
   215 000011B6 880F                <1>     mov byte [rdi], cl ;Store the length here
   216 000011B8 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   217                              <1> .cpCmdName:
   218 000011BB AC                  <1>     lodsb
   219 000011BC E8E3240000          <1>     call ucChar ;Uppercase the char
   220 000011C1 AA                  <1>     stosb
   221 000011C2 FFC9                <1>     dec ecx
   222 000011C4 75F5                <1>     jnz .cpCmdName
   223                              <1>     return
    13                              <2> %%_ret:
    14 000011C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> .exitBad:
   225 000011C7 C605B7F1FFFFFF      <1>     mov byte [cmdName], -1 ;Store -1 to indicate error
   226                              <1>     return
    13                              <2> %%_ret:
    14 000011CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> .skipAndCheckCR:
   228                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   229 000011CF E8E2240000          <1>     call skipDelimiters ;Go to the next char in the input line
   230 000011D4 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   231                              <1>     return
    13                              <2> %%_ret:
    14 000011D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> doCommandLine:
   234 000011D8 488D3557F1FFFF      <1>     lea rsi, cmdPathSpec
   235                              <1>     ;The following check accounts for the end of a piped command
   236 000011DF 803D9FF1FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, do nothing!
   237 000011E6 7454                <1>     je .badCmdName
   238 000011E8 803D96F1FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   239 000011EF 0F8474070000        <1>     je badCmdError
   240 000011F5 488D3D59EFFFFF      <1>     lea rdi, cmdFcb
   241 000011FC B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   242 00001201 CD21                <1>     int 21h
   243 00001203 0FB71D2CF1FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   244 0000120A 80FF3A              <1>     cmp bh, ":"
   245 0000120D 7537                <1>     jne .noDriveSpecified
   246 0000120F 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   247 00001211 E88E240000          <1>     call ucChar     ;Uppercase al
   248 00001216 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   249 00001218 80FBFF              <1>     cmp bl, -1      ;Int 21h returns AL = -1 if bad drive specified
   250 0000121B 7412                <1>     je .badDrive
   251                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   252 0000121D 803D61F1FFFF02      <1>     cmp byte [cmdName], 2
   253 00001224 7520                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   254 00001226 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   255 00001228 E843240000          <1>     call setDrive
   256                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000122D 74(D7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   257                              <1> .badDrive:
   258 0000122F 488D157EF8FFFF      <1>     lea rdx, badDrv
   259 00001236 B409                <1>     mov ah, 09h
   260 00001238 CD21                <1>     int 21h
   261 0000123A F9                  <1>     stc
   262                              <1>     return
    13                              <2> %%_ret:
    14 0000123B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> .badCmdName:
   264 0000123C E8B8060000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   265 00001241 E945010000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   266                              <1>     
   267                              <1> .noDriveSpecified:
   268                              <1> ;Now we set the two FCB's in the command line
   269 00001246 F6055BEEFFFFFF      <1>     test byte [arg1Flg], -1
   270 0000124D 744D                <1>     jz .fcbArgsDone
   271 0000124F 0FB60553EEFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   272 00001256 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   273 0000125D 4801C6              <1>     add rsi, rax    ;Point to first argument
   274 00001260 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   275 00001264 B801290000          <1>     mov eax, 2901h
   276 00001269 CD21                <1>     int 21h
   277 0000126B 880539EEFFFF        <1>     mov byte [arg1FCBret], al
   278 00001271 F60533EEFFFFFF      <1>     test byte [arg2Flg], -1
   279 00001278 7422                <1>     jz .fcbArgsDone
   280 0000127A 0FB6052BEEFFFF      <1>     movzx eax, byte [arg2Off]
   281 00001281 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   282 00001288 4801C6              <1>     add rsi, rax    ;Point to first argument
   283 0000128B 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   284 0000128F B801290000          <1>     mov eax, 2901h
   285 00001294 CD21                <1>     int 21h
   286 00001296 880511EEFFFF        <1>     mov byte [arg2FCBret], al
   287                              <1> .fcbArgsDone:
   288 0000129C 488D1D11F0FFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer, ergh
   289 000012A3 488D35DBF0FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   290 000012AA B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   291 000012AF BAFFFF0000          <1>     mov edx, 0FFFFh
   292 000012B4 B5FF                <1>     mov ch, -1
   293 000012B6 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   294 000012B8 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   295 000012BD BAFFFF0000          <1>     mov edx, 0FFFFh
   296 000012C2 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   297 000012C4 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   298                              <1>             ;        al = 0  if the command should be executed as usual
   299 000012C6 84C0                <1>     test al, al
   300 000012C8 7426                <1>     jz .executeInternal
   301                              <1>     ;Here we execute externally and return to the prompt
   302                              <1>     ; as if it was an internal execution
   303 000012CA 488D1DE3EFFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer, ergh
   304 000012D1 488D35ADF0FFFF      <1>     lea rsi, cmdName        
   305 000012D8 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   306 000012DD BAFFFF0000          <1>     mov edx, 0FFFFh
   307 000012E2 B5FF                <1>     mov ch, -1
   308 000012E4 CD2F                <1>     int 2Fh
   309 000012E6 803D98F0FFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   310                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000012ED 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000012EF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   311                              <1>     ;Else, we restart the command from scratch.
   312                              <1> .executeInternal:
   313                              <1> ;Now we check if the cmdName is equal to the length of the cmdPathSpec.
   314                              <1> ;If not, then its immediately an external program!
   315 000012F0 E816050000          <1>     call pullCommandline    ;Now pull the tail down
   316 000012F5 488D3D3AF0FFFF      <1>     lea rdi, cmdPathSpec
   317 000012FC E899230000          <1>     call strlen ;Get the length of the input command
   318 00001301 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   319 00001303 380D7CF0FFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   320 00001309 0F85261A0000        <1>     jne launchChild     ;If not, a path was specified, exit!
   321                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   322 0000130F 488D1D3CF5FFFF      <1>     lea rbx, functionTable
   323                              <1> .nextEntry:
   324 00001316 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   325 00001319 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   326 0000131C 0F84131A0000        <1>     je launchChild      ;If so, check externally now
   327 00001322 380D5DF0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   328 00001328 752F                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   329                              <1>     ;Here they have the same length so lets see if the name is the same
   330 0000132A 56                  <1>     push rsi
   331                              <1>     ;ecx has the length to compare
   332 0000132B 51                  <1>     push rcx
   333 0000132C 488D7301            <1>     lea rsi, qword [rbx + 1]
   334 00001330 488D3D4FF0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   335 00001337 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   336 00001339 59                  <1>     pop rcx
   337 0000133A 5E                  <1>     pop rsi
   338 0000133B 751C                <1>     jne .gotoNextEntry
   339                              <1>     ;Here it was found both strings are equal
   340 0000133D 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   341 00001342 480FB71F            <1>     movzx rbx, word [rdi]
   342 00001346 488D3DB3ECFFFF      <1>     lea rdi, startLbl
   343 0000134D 4801FB              <1>     add rbx, rdi
   344 00001350 C605B6ECFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   345 00001357 FFE3                <1>     jmp rbx    ;Jump to this function and return a level up!
   346                              <1> .gotoNextEntry:
   347 00001359 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   348 00001360 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   349 00001363 EBB1                <1>     jmp short .nextEntry
   350                              <1> 
   351                              <1> redirFailure:
   352 00001365 488D1589FBFFFF      <1>     lea rdx, redirErrMsg
   353 0000136C B913000000          <1>     mov ecx, redirErrMsgL
   354 00001371 EB0C                <1>     jmp short redirPipeFailureCommon
   355                              <1> pipeFailure:
   356 00001373 488D1564FBFFFF      <1>     lea rdx, pipeErrMsg
   357 0000137A B917000000          <1>     mov ecx, pipeErrMsgL
   358                              <1> redirPipeFailureCommon:
   359                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   360                              <1> ;This routine tries to close whatever handles are not -1 and delete
   361                              <1> ; pipe files if the pipe count is not 0.
   362                              <1> ;It resets all variables and jumps to reset the stack!
   363 0000137F B800400000          <1>     mov eax, 4000h  ;Write handle
   364 00001384 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   365 00001389 CD21                <1>     int 21h
   366                              <1> .noPrint:
   367 0000138B 0FB70512EDFFFF      <1>     movzx eax, word [redirSTDIN]
   368 00001392 0FB71505EDFFFF      <1>     movzx edx, word [pipeSTDIN]
   369 00001399 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   370 0000139B E8D1000000          <1>     call .closeAndReplace
   371 000013A0 0FB705FFECFFFF      <1>     movzx eax, word [redirSTDOUT]
   372 000013A7 0FB715F2ECFFFF      <1>     movzx edx, word [pipeSTDOUT]
   373 000013AE FFC3                <1>     inc ebx         ;Select STDOUT for closing
   374 000013B0 E8BC000000          <1>     call .closeAndReplace
   375 000013B5 66C705E4ECFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   376 000013BE 0FB71DDFECFFFF      <1>     movzx ebx, word [redirSTDIN]
   377 000013C5 E896000000          <1>     call .closeHandle
   378                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   379 000013CA 66C705D1ECFFFFFFFF  <1>     mov word [redirSTDIN], -1
   380 000013D3 0FB71DCCECFFFF      <1>     movzx ebx, word [redirSTDOUT]
   381 000013DA E881000000          <1>     call .closeHandle
   382 000013DF 66C705BEECFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   383 000013E8 0FB71DAFECFFFF      <1>     movzx ebx, word [pipeSTDIN]
   384 000013EF E86C000000          <1>     call .closeHandle
   385 000013F4 66C705A1ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   386 000013FD 0FB71D9CECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   387 00001404 E857000000          <1>     call .closeHandle
   388 00001409 66C7058EECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   389 00001412 C60584ECFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   390 00001419 488D1511F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   391 00001420 803A00              <1>     cmp byte [rdx], 0
   392 00001423 7407                <1>     jz .checkOld
   393 00001425 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   394 0000142A CD21                <1>     int 21h
   395                              <1> .checkOld:
   396 0000142C 488D154DF0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   397 00001433 803A00              <1>     cmp byte [rdx],0
   398 00001436 7407                <1>     jz .pipeNamesComplete
   399 00001438 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   400 0000143D CD21                <1>     int 21h
   401                              <1> .pipeNamesComplete:
   402 0000143F 31C0                <1>     xor eax, eax
   403                              <1>     ;Invalidate the pointers and the paths too
   404 00001441 48890587F0FFFF      <1>     mov qword [newPipe], rax
   405 00001448 48890588F0FFFF      <1>     mov qword [oldPipe], rax
   406 0000144F 8905DCEFFFFF        <1>     mov dword [pipe1Filespec], eax
   407 00001455 890525F0FFFF        <1>     mov dword [pipe2Filespec], eax
   408                              <1> 
   409 0000145B E915FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   410                              <1> .closeHandle:
   411 00001460 81FBFFFFFFFF        <1>     cmp ebx, -1
   412                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001466 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001468 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   413 00001469 B8003E0000          <1>     mov eax, 3E00h
   414 0000146E CD21                <1>     int 21h
   415                              <1>     return
    13                              <2> %%_ret:
    14 00001470 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   416                              <1> .closeAndReplace:
   417                              <1> ;Input: ax = one possible handle, dx = second possible handle
   418                              <1> ;       bx = handle to close and copy ax/dx into
   419                              <1> ;Output: Handle intervened on. bx preserved
   420 00001471 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   421 00001474 09D0                <1>     or eax, edx     ;Form packed
   422 00001476 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   423                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000147B 74(70)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   424 0000147D E8DEFFFFFF          <1>     call .closeHandle
   425 00001482 663DFFFF            <1>     cmp ax, -1      
   426 00001486 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   427 0000148A 53                  <1>     push rbx
   428 0000148B 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   429 0000148E B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   430 00001493 CD21                <1>     int 21h
   431 00001495 5B                  <1>     pop rbx
   432                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001496 73(70)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433                              <1>     ;Else we now try to force con to open!
   434 00001498 E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   435 0000149D B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   436 000014A2 488D1599FAFFFF      <1>     lea rdx, conName
   437 000014A9 CD21                <1>     int 21h
   438                              <1>     return
    13                              <2> %%_ret:
    14 000014AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> 
   440                              <1> advanceRedir:
   441                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   442                              <1> ;Close stdin redir then stdout redir. 
   443 000014AC F605EFEBFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   444 000014B3 0F8585000000        <1>     jnz .redirIn
   445 000014B9 F605DDEBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   446 000014C0 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   447 000014C6 0FBF05D1EBFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   448 000014CD 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   449 000014D2 0F84EB000000        <1>     je .pipeOut              
   450                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   451 000014D8 0FB71DBFEBFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   452 000014DF 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   453 000014E1 B800460000          <1>     mov eax, 4600h
   454 000014E6 CD21                <1>     int 21h
   455 000014E8 0F8285FEFFFF        <1>     jc pipeFailure
   456 000014EE B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   457 000014F3 CD21                <1>     int 21h
   458 000014F5 0F8278FEFFFF        <1>     jc pipeFailure
   459 000014FB 488B15D5EFFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   460 00001502 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   461 00001507 CD21                <1>     int 21h
   462 00001509 0F8264FEFFFF        <1>     jc pipeFailure
   463 0000150F C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   464 00001512 66C70583EBFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   465                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   466                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   467                              <1>     ;Else exit!
   468 0000151B 0FBF057EEBFFFF      <1>     movsx eax, word [pipeSTDOUT]
   469 00001522 3DFFFFFFFF          <1>     cmp eax, -1
   470 00001527 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   471 0000152D C60569EBFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   472 00001534 F60568EBFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   473 0000153B 753D                <1>     jnz .redirOut               ;Go for it if so!
   474                              <1>     return
    13                              <2> %%_ret:
    14 0000153D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   475                              <1> .redirIn:
   476                              <1> ;Here we clean redirIn
   477 0000153E 0FB71D5FEBFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   478 00001545 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   479 00001547 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   480 0000154C CD21                <1>     int 21h
   481 0000154E 0F8211FEFFFF        <1>     jc redirFailure
   482 00001554 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   483 00001559 CD21                <1>     int 21h
   484 0000155B 0F8204FEFFFF        <1>     jc redirFailure
   485 00001561 66C7053AEBFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   486 0000156A C60531EBFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   487 00001571 F60525EBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   488 00001578 7549                <1>     jnz .pipeOut
   489                              <1> .redirOut:
   490 0000157A F60522EBFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   491                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001581 74(3D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   492                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   493 00001583 F60513EBFFFFFF      <1>     test byte [pipeFlag], -1
   494 0000158A 7537                <1>     jnz short .pipeOut
   495 0000158C 0FB71D13EBFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   496 00001593 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   497 00001598 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   498 0000159D CD21                <1>     int 21h
   499 0000159F 0F82C0FDFFFF        <1>     jc redirFailure
   500 000015A5 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   501 000015AA CD21                <1>     int 21h
   502 000015AC 0F82B3FDFFFF        <1>     jc redirFailure
   503 000015B2 66C705EBEAFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   504 000015BB C605E1EAFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   505                              <1>     return
    13                              <2> %%_ret:
    14 000015C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> .pipeOut:
   507                              <1> ;Duplicate STDIN to save across pipe
   508 000015C3 0FBF05D6EAFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   509 000015CA 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   510                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000015CF 74(C2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   511 000015D1 B800450000          <1>     mov eax, 4500h
   512 000015D6 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   513 000015D8 CD21                <1>     int 21h
   514 000015DA 0F8293FDFFFF        <1>     jc pipeFailure
   515 000015E0 668905B7EAFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   516                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   517 000015E7 B800460000          <1>     mov eax, 4600h
   518 000015EC 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   519 000015EE FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   520 000015F0 CD21                <1>     int 21h
   521 000015F2 0F827BFDFFFF        <1>     jc pipeFailure
   522                              <1> ;Now return the original stdout to stdout
   523 000015F8 89D9                <1>     mov ecx, ebx
   524 000015FA 0FB71D9FEAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   525 00001601 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   526 00001606 CD21                <1>     int 21h
   527 00001608 0F8265FDFFFF        <1>     jc pipeFailure
   528                              <1> ;Now close the DUP'ed STDOUT
   529 0000160E B8003E0000          <1>     mov eax, 3E00h
   530 00001613 CD21                <1>     int 21h
   531 00001615 0F8258FDFFFF        <1>     jc pipeFailure
   532                              <1> ;Finally unwind STDIN to the beginning of the file
   533 0000161B B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   534 00001620 31DB                <1>     xor ebx, ebx    ;STDIN handle
   535 00001622 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   536 00001624 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   537 00001626 CD21                <1>     int 21h
   538 00001628 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   539 0000162E 488B159AEEFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   540 00001635 4889159BEEFFFF      <1>     mov qword [oldPipe], rdx
   541 0000163C 66C7055BEAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   542                              <1>     return
    13                              <2> %%_ret:
    14 00001645 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> 
   544                              <1> 
   545                              <1> peelRedir:
   546                              <1> ;Checks and sets up redir as appropriate
   547                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   548                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   549                              <1> ;Output: ZF=NZ => No redir
   550                              <1> ;        ZF=ZY => Redir
   551                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   552                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   553 00001646 51                  <1>     push rcx
   554 00001647 57                  <1>     push rdi
   555 00001648 3C3C                <1>     cmp al, "<"
   556 0000164A 740C                <1>     je .inputRedir
   557 0000164C 3C3E                <1>     cmp al, ">"
   558 0000164E 7427                <1>     je .outputRedir
   559 00001650 3C7C                <1>     cmp al, "|"
   560 00001652 7441                <1>     je .pipeSetup
   561 00001654 F8                  <1>     clc
   562                              <1> .redirExit:
   563 00001655 5F                  <1>     pop rdi
   564 00001656 59                  <1>     pop rcx
   565                              <1>     return
    13                              <2> %%_ret:
    14 00001657 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   566                              <1> .inputRedir:
   567 00001658 C60543EAFFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   568 0000165F 488D3D2DEDFFFF      <1>     lea rdi, rdrInFilespec
   569                              <1> .redirCommon:
   570 00001666 E84B200000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   571 0000166B E877210000          <1>     call cpDelimPathToBufz
   572 00001670 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   573 00001673 30C0                <1>     xor al, al  ;Clear the ZF flag
   574 00001675 EBDE                <1>     jmp short .redirExit
   575                              <1> .outputRedir:
   576 00001677 C60525EAFFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   577 0000167E 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   578 00001681 7509                <1>     jne .notDouble
   579 00001683 FE051AEAFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   580 00001689 48FFC6              <1>     inc rsi ;Go past it too
   581                              <1> .notDouble:
   582 0000168C 488D3D4FEDFFFF      <1>     lea rdi, rdrOutFilespec
   583 00001693 EBD1                <1>     jmp short .redirCommon
   584                              <1> .pipeSetup:
   585 00001695 56                  <1>     push rsi    ;Save rsi pointing to char past |
   586 00001696 E81B200000          <1>     call skipDelimiters ;Check if this is a double ||
   587 0000169B 803E7C              <1>     cmp byte [rsi], "|" 
   588 0000169E 5E                  <1>     pop rsi
   589 0000169F F9                  <1>     stc
   590 000016A0 EBB3                <1>     jmp short .redirExit
   591                              <1> 
   592                              <1> setupRedirandPipes:
   593                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   594                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   595 000016A2 0F8484000000        <1>     jz .redirIn
   596 000016A8 488D1582EDFFFF      <1>     lea rdx, pipe1Filespec
   597 000016AF 803A00              <1>     cmp byte [rdx], 0
   598 000016B2 7410                <1>     jz .pathFound
   599 000016B4 488D15C5EDFFFF      <1>     lea rdx, pipe2Filespec
   600 000016BB 803A00              <1>     cmp byte [rdx], 0
   601 000016BE 0F85AFFCFFFF        <1>     jnz pipeFailure
   602                              <1> .pathFound:
   603 000016C4 48891504EEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   604 000016CB B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   605 000016D0 BB01000000          <1>     mov ebx, 1
   606 000016D5 CD21                <1>     int 21h
   607 000016D7 0F8296FCFFFF        <1>     jc pipeFailure
   608 000016DD 668905BCE9FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   609 000016E4 E8931F0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   610 000016E9 0441                <1>     add al, "A"
   611 000016EB BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   612 000016F0 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   613 000016F2 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   614 000016F4 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   615 000016F6 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   616 000016FB CD21                <1>     int 21h
   617 000016FD 0F8270FCFFFF        <1>     jc pipeFailure
   618                              <1>     ;AX has the handle for this file now, this will become STDOUT
   619                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   620 00001703 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   621 00001706 B901000000          <1>     mov ecx, 1
   622 0000170B B800460000          <1>     mov eax, 4600h
   623 00001710 CD21                <1>     int 21h
   624 00001712 0F825BFCFFFF        <1>     jc pipeFailure
   625 00001718 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   626 0000171D CD21                <1>     int 21h
   627 0000171F 0F824EFCFFFF        <1>     jc pipeFailure
   628 00001725 C60571E9FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   629                              <1> .redirIn:
   630                              <1> ;Now check if any other redir needs to be setup
   631                              <1> ;Checks and sets up redir as appropriate.
   632                              <1>     ;Setup the redir here for STDIN
   633 0000172C F6056FE9FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   634 00001733 7449                <1>     jz .redirOut
   635 00001735 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   636 00001737 B800450000          <1>     mov eax, 4500h
   637 0000173C CD21                <1>     int 21h
   638 0000173E 0F8221FCFFFF        <1>     jc redirFailure
   639 00001744 66890559E9FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   640 0000174B 488D1541ECFFFF      <1>     lea rdx, rdrInFilespec
   641 00001752 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   642 00001757 CD21                <1>     int 21h
   643 00001759 0F8206FCFFFF        <1>     jc redirFailure
   644 0000175F 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   645 00001761 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   646 00001764 B800460000          <1>     mov eax, 4600h
   647 00001769 CD21                <1>     int 21h
   648 0000176B 0F82F4FBFFFF        <1>     jc redirFailure
   649 00001771 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   650 00001776 CD21                <1>     int 21h
   651 00001778 0F82E7FBFFFF        <1>     jc redirFailure
   652                              <1> .redirOut:
   653 0000177E F6051EE9FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   654                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001785 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001787 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   655 00001788 803D11E9FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   656                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000178F 75(87)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   657                              <1>     ;Else setup the redir here for STDOUT
   658 00001791 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   659 00001796 B800450000          <1>     mov eax, 4500h
   660 0000179B CD21                <1>     int 21h
   661 0000179D 0F82C2FBFFFF        <1>     jc redirFailure
   662 000017A3 668905FCE8FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   663 000017AA 488D1531ECFFFF      <1>     lea rdx, rdrOutFilespec
   664 000017B1 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   665 000017B6 CD21                <1>     int 21h
   666 000017B8 730F                <1>     jnc .fileExists
   667 000017BA B8003C0000          <1>     mov eax, 3C00h
   668 000017BF 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   669 000017C1 CD21                <1>     int 21h
   670 000017C3 0F829CFBFFFF        <1>     jc redirFailure
   671                              <1> .fileExists:
   672 000017C9 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   673 000017CE 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   674 000017D1 B800460000          <1>     mov eax, 4600h  ;DUP2
   675 000017D6 CD21                <1>     int 21h
   676 000017D8 0F8287FBFFFF        <1>     jc redirFailure
   677 000017DE B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   678 000017E3 CD21                <1>     int 21h
   679 000017E5 0F827AFBFFFF        <1>     jc redirFailure
   680 000017EB 803DB1E8FFFF01      <1>     cmp byte [redirOut], 1
   681                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017F2 74(87)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   682                              <1>     ;Here we move the file pointer to the end of the file
   683 000017F4 31D2                <1>     xor edx, edx    ;Low order 32 bits
   684 000017F6 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   685 000017F8 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   686 000017FD B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   687 00001802 CD21                <1>     int 21h
   688 00001804 0F825BFBFFFF        <1>     jc redirFailure
   689                              <1>     return
    13                              <2> %%_ret:
    14 0000180A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   690                              <1> 
   691                              <1> 
   692                              <1> pullCommandline:
   693                              <1> ;This command pulls the command tail down, removing the whole launch command
   694 0000180B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;rbx points to the de-redired command line 
   695                              <1> ;Skip leading separators
   696                              <1> .pctSkipLeading:
   697 00001812 AC                  <1>     lodsb   ;Get first char
   698 00001813 E8AC1E0000          <1>     call isALdelimiter
   699 00001818 74F8                <1>     je .pctSkipLeading
   700 0000181A 48FFCE              <1>     dec rsi
   701                              <1>     ;rsi points to the start of the command
   702 0000181D 488D3D12EBFFFF      <1>     lea rdi, cmdPathSpec
   703 00001824 E8711E0000          <1>     call strlen ;Get the length of the command
   704 00001829 FFC9                <1>     dec ecx ;Minus the terminating null
   705 0000182B 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   706 0000182E 280D75E8FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   707 00001834 280D72E8FFFF        <1>     sub byte [arg2Off], cl
   708 0000183A 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   709 0000183C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   710                              <1> .pctPullChars:
   711 00001843 AC                  <1>     lodsb
   712 00001844 AA                  <1>     stosb
   713 00001845 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   714 00001847 7404                <1>     je .pctExit
   715 00001849 FFC1                <1>     inc ecx     ;Increment count
   716 0000184B EBF6                <1>     jmp short .pctPullChars 
   717                              <1> .pctExit:
   718 0000184D 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   719                              <1>     return
    13                              <2> %%_ret:
    14 00001854 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   720                              <1> 
   721                              <1> batNextLine:
   722                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   723 00001855 488D1513000000      <1>     lea rdx, .l1
   724 0000185C B800090000          <1>     mov eax, 0900h
   725 00001861 CD21                <1>     int 21h
   726 00001863 C60544E8FFFF00      <1>     mov byte [batFlag], 0
   727 0000186A E906F7FFFF          <1>     jmp commandMain
   728 0000186F 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   728 00001878 652E2E2E2077616974- <1>
   728 00001881 2C20776861743F2048- <1>
   728 0000188A 6F772064696420796F- <1>
   728 00001893 7520646F2074686174- <1>
   728 0000189C 3F0D0A24            <1>
   729                              <1> 
   730                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   731                              <1> ;Input: rsi points to the count byte of a command line
   732 000018A0 4150                <1>     push r8
   733 000018A2 4151                <1>     push r9
   734 000018A4 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   735 000018A6 CD21                <1>     int 21h
   736 000018A8 52                  <1>     push rdx    ;Save on the stack
   737 000018A9 488D1D50E6FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   738 000018B0 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   739 000018B2 CD21                <1>     int 21h
   740 000018B4 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   741 000018B7 4989D9              <1>     mov r9, rbx
   742 000018BA 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   743 000018C1 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   744 000018C6 F348A5              <1>     rep movsq   ;Copy command line over
   745                              <1>     ;call doCommandLine
   746 000018C9 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   747 000018CA B450                <1>     mov ah, 50h ;Set Current PSP
   748 000018CC CD21                <1>     int 21h
   749 000018CE 4159                <1>     pop r9
   750 000018D0 4158                <1>     pop r8
   751 000018D2 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 000018D4 488D150DF1FFFF      <1>     lea rdx, noSpace
    10 000018DB 488D0D0CF4FFFF      <1>     lea rcx, pipeErr
    11 000018E2 F605B4E7FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 000018E9 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 000018EB 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 000018EF E866000000          <1>     call badCmn     ;Print the string
    15 000018F4 E992FAFFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badSyntaxError:
    17 000018F9 488D15C7F3FFFF      <1>     lea rdx, syntaxErr
    18 00001900 EB58                <1>     jmp short badCmn
    19                              <1> badEnvSpaceError:
    20 00001902 488D15F9F0FFFF      <1>     lea rdx, noEnvSpace
    21 00001909 EB4F                <1>     jmp short badCmn
    22                              <1> badAccError:
    23 0000190B 488D1561F3FFFF      <1>     lea rdx, accDenMsg
    24 00001912 EB46                <1>     jmp short badCmn
    25                              <1> noSelfCopyError:
    26 00001914 488D1518F1FFFF      <1>     lea rdx, noSelfCopy
    27 0000191B EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 0000191D 488D15CDF1FFFF      <1>     lea rdx, badParm
    30 00001924 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001926 488D1587F1FFFF      <1>     lea rdx, badDrv
    33 0000192D EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 0000192F 488D154AF4FFFF      <1>     lea rdx, badArgs
    36 00001936 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001938 488D1525F4FFFF      <1>     lea rdx, badSpec
    39 0000193F EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001941 488D1578F0FFFF      <1>     lea rdx, dupName
    43 00001948 EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 0000194A 488D1586F0FFFF      <1>     lea rdx, fnfMsg
    46 00001951 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001953 488D1598F2FFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 0000195A C605ACE6FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    51 00001961 B800090000          <1>     mov eax, 0900h
    52 00001966 CD21                <1>     int 21h
    53                              <1>     return  ;This will be made nuanced later, to agree with DOS behaviour
    13                              <2> %%_ret:
    14 00001968 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> badCmdError:
    55 00001969 488D1535F0FFFF      <1>     lea rdx, badCmd
    56 00001970 EBE8                <1>     jmp short badCmn
    57                              <1> dir:
    58                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    59 00001972 C6056AECFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    60 00001979 C60564ECFFFF00      <1>     mov byte [dirLineCtr], 0
    61 00001980 C6055EECFFFF00      <1>     mov byte [dirFileCtr], 0
    62 00001987 C60559ECFFFF00      <1>     mov byte [dirSrchDir], 0
    63 0000198E 66C70548EBFFFF0000  <1>     mov word [searchSpec], 0
    64 00001997 488D3DCBECFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    65 0000199E C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    66 000019A1 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    66 000019AA 3F                  <1>
    67 000019AB 48894701            <1>     mov qword [rdi + fcb.filename], rax
    68 000019AF C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    69                              <1>     ;Start by scanning for the switches
    70 000019B6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    71 000019BD 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    72                              <1> .scanNew:
    73 000019C0 E8F11C0000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    74 000019C5 AC                  <1>     lodsb   ;Get this char
    75 000019C6 3C0D                <1>     cmp al, CR
    76 000019C8 744D                <1>     je .scanDone
    77 000019CA 3A055AE6FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    78 000019D0 7524                <1>     jne .notSwitch
    79 000019D2 AC                  <1>     lodsb   ;Get the next char
    80 000019D3 E8CC1C0000          <1>     call ucChar
    81 000019D8 3C57                <1>     cmp al, "W"
    82 000019DA 7509                <1>     jne .notWide
    83 000019DC 800D00ECFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    84 000019E3 EBDB                <1>     jmp short .scanNew
    85                              <1> .notWide:
    86 000019E5 3C50                <1>     cmp al, "P"
    87 000019E7 0F8530FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    88 000019ED 800DEFEBFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    89 000019F4 EBCA                <1>     jmp short .scanNew
    90                              <1> .notSwitch:
    91 000019F6 F605E6EBFFFF04      <1>     test byte [dirFlags], dirFileType
    92 000019FD 0F851AFFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    93                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    94 00001A03 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    95 00001A06 E8371E0000          <1>     call copyArgumentToSearchSpec   
    96 00001A0B 48FFCE              <1>     dec rsi ;Point back to the terminator char
    97 00001A0E 800DCEEBFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    98 00001A15 EBA9                <1>     jmp short .scanNew
    99                              <1> .scanDone:
   100 00001A17 F605C5EBFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
   101 00001A1E 7438                <1>     jz .currentDrv
   102                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   103 00001A20 488D35B8EAFFFF      <1>     lea rsi, searchSpec
   104 00001A27 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   105 00001A2B 752B                <1>     jne .currentDrv
   106                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   107 00001A2D 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   108 00001A32 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   109 00001A36 B801290000          <1>     mov eax, 2901h   ;Parse filename
   110 00001A3B CD21                <1>     int 21h
   111 00001A3D 3CFF                <1>     cmp al, -1
   112 00001A3F 0F84E1FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   113                              <1>     ;Else the drive in the fcb is valid
   114 00001A45 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   115 00001A4A 84C0                <1>     test al, al
   116 00001A4C 740A                <1>     jz .currentDrv
   117 00001A4E FEC8                <1>     dec al  ;Convert to 0 based drive number
   118 00001A50 880590EBFFFF        <1>     mov byte [dirDrv], al
   119 00001A56 EB0B                <1>     jmp short .dirPrintVol
   120                              <1> .currentDrv:
   121 00001A58 E81F1C0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   122 00001A5D 880583EBFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   123                              <1> .dirPrintVol:
   124 00001A63 488D3575EAFFFF      <1>     lea rsi, searchSpec
   125                              <1> ;Now construct the path on dirSrchDir.
   126 00001A6A 488D3D76EBFFFF      <1>     lea rdi, dirSrchDir
   127 00001A71 0FB6056EEBFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   128 00001A78 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   129 00001A7A 0441                <1>     add al, "A" ;Turn into a letter
   130 00001A7C B43A                <1>     mov ah, ":"
   131 00001A7E 66AB                <1>     stosw   ;Store X: into the search path
   132 00001A80 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   133 00001A85 CD2F                <1>     int 2fh
   134 00001A87 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   135 00001A89 0F8497FEFFFF        <1>     je badDriveError
   136                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   137 00001A8F 8A0594E5FFFF        <1>     mov al, byte [pathSep]
   138 00001A95 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   139 00001A97 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   140 00001A99 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   141 00001A9A FEC2                <1>     inc dl  ;Increment by 1
   142 00001A9C 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   143 00001A9F B800470000          <1>     mov eax, 4700h  ;Print current working directory
   144 00001AA4 CD21                <1>     int 21h
   145 00001AA6 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   146                              <1>     ;rsi points to the first char in the provided path.
   147                              <1>     ;rdi points to the first char of the cwd.
   148 00001AA9 31C0                <1>     xor eax, eax
   149                              <1> .goToEndOfCwd:
   150                              <1> ;Move to the end of the string, could use repne?
   151 00001AAB 3807                <1>     cmp byte [rdi], al
   152 00001AAD 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   153 00001AAF 48FFC7              <1>     inc rdi
   154 00001AB2 EBF7                <1>     jmp short .goToEndOfCwd
   155                              <1> .prepCopy:
   156 00001AB4 8A056FE5FFFF        <1>     mov al, byte [pathSep]
   157 00001ABA 3806                <1>     cmp byte [rsi], al
   158 00001ABC 7412                <1>     je .copyPathLoop
   159 00001ABE B43A                <1>     mov ah, ":"
   160 00001AC0 86C4                <1>     xchg al, ah
   161 00001AC2 663947FE            <1>     cmp word [rdi - 2], ax
   162 00001AC6 7408                <1>     je .copyPathLoop
   163 00001AC8 88E0                <1>     mov al, ah
   164 00001ACA 3847FF              <1>     cmp byte [rdi - 1], al
   165 00001ACD 7401                <1>     je .copyPathLoop
   166 00001ACF AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   167                              <1> .copyPathLoop:
   168 00001AD0 AC                  <1>     lodsb
   169 00001AD1 3A0552E5FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   170 00001AD7 7509                <1>     jne .checkDot  ;If not, store it
   171                              <1> .lpPathseps:
   172 00001AD9 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   173 00001ADB 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   174 00001ADD 48FFC6              <1>     inc rsi
   175 00001AE0 EBF7                <1>     jmp short .lpPathseps
   176                              <1> .checkDot:
   177 00001AE2 3C2E                <1>     cmp al, "."
   178 00001AE4 7407                <1>     je .dots
   179                              <1> .store:
   180 00001AE6 AA                  <1>     stosb
   181 00001AE7 84C0                <1>     test al, al ;Was the char we just copied a null?
   182 00001AE9 7472                <1>     jz .exitPathCopy
   183 00001AEB EBE3                <1>     jmp short .copyPathLoop
   184                              <1> .dots:
   185                              <1>     ;Here handle dot and dot dot
   186                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   187                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   188                              <1>     ; by 1. If it is null, go to top of loop.
   189                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   190 00001AED 8A2536E5FFFF        <1>     mov ah, byte [pathSep]
   191 00001AF3 3867FF              <1>     cmp byte [rdi - 1], ah  
   192 00001AF6 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   193 00001AF8 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   194 00001AFA 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   195 00001AFD 7413                <1>     je .twoDot
   196                              <1>     ;This is only a "current dir" when next char is pathsep or null
   197 00001AFF 3A2524E5FFFF        <1>     cmp ah, byte [pathSep]
   198 00001B05 7406                <1>     je .skipThisPathsep
   199 00001B07 84E4                <1>     test ah, ah
   200 00001B09 74C5                <1>     jz .copyPathLoop
   201 00001B0B EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   202                              <1> .skipThisPathsep:
   203                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   204 00001B0D 48FFC6              <1>     inc rsi ;Point to the pathsep
   205 00001B10 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   206                              <1> .twoDot:
   207                              <1>     ;Woohoo, this works!
   208 00001B12 48FFC6              <1>     inc rsi ;Move past the second dot
   209 00001B15 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   210 00001B17 3A250CE5FFFF        <1>     cmp ah, byte [pathSep]
   211 00001B1D 7408                <1>     je .tdOk
   212 00001B1F 84E4                <1>     test ah, ah
   213 00001B21 0F85F6FDFFFF        <1>     jne badParamError
   214                              <1> .tdOk:
   215 00001B27 8A05FCE4FFFF        <1>     mov al, byte byte [pathSep]
   216 00001B2D 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   217 00001B31 0F84E6FDFFFF        <1>     je badParamError
   218 00001B37 4881EF02000000      <1>     sub rdi, 2
   219 00001B3E 31C9                <1>     xor ecx, ecx
   220 00001B40 FFC9                <1>     dec ecx
   221 00001B42 FD                  <1>     std
   222 00001B43 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   223 00001B45 FC                  <1>     cld
   224 00001B46 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   225 00001B4D 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   226 00001B4F 0F847BFFFFFF        <1>     jz .copyPathLoop
   227 00001B55 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   228 00001B58 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   229                              <1> .exitPathCopy:
   230                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   231 00001B5D 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   232 00001B64 8A05BFE4FFFF        <1>     mov al, byte [pathSep]
   233 00001B6A B43A                <1>     mov ah, ":"
   234 00001B6C 86C4                <1>     xchg al, ah
   235 00001B6E 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   236 00001B72 7409                <1>     je .skipOverwrite
   237 00001B74 88E0                <1>     mov al, ah
   238 00001B76 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   239 00001B78 7503                <1>     jne .skipOverwrite
   240 00001B7A C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   241                              <1> .skipOverwrite:
   242 00001B7D 488D3563EAFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   243 00001B84 4889F7              <1>     mov rdi, rsi
   244 00001B87 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   245 00001B8C CD2F                <1>     int 2fh
   246 00001B8E E8BC1C0000          <1>     call scanForWildcards
   247 00001B93 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   248 00001B95 4889F2              <1>     mov rdx, rsi
   249 00001B98 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   250 00001B9C 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   251                              <1> .notNull:
   252 00001B9E E8731D0000          <1>     call setDTA ;Set the DTA
   253 00001BA3 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   254 00001BA8 B8004E0000          <1>     mov eax, 4E00h ;Find first
   255 00001BAD CD21                <1>     int 21h
   256 00001BAF 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   257                              <1> ;Now we have searched for the file, is a directory?
   258 00001BB1 F605C2E5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   259 00001BB8 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   260                              <1>     ;Here we are searching IN a directory. Default search pattern!
   261 00001BBA 31C0                <1>     xor eax, eax
   262 00001BBC 31C9                <1>     xor ecx, ecx
   263 00001BBE FFC9                <1>     dec ecx
   264 00001BC0 F2AE                <1>     repne scasb
   265 00001BC2 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   266 00001BC5 EB40                <1>     jmp short .wcDefaultSearch
   267                              <1> .wcSearchPattern:
   268                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   269                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   270 00001BC7 31C0                <1>     xor eax, eax
   271 00001BC9 31C9                <1>     xor ecx, ecx
   272 00001BCB FFC9                <1>     dec ecx
   273 00001BCD F2AE                <1>     repne scasb ;Scan forwards
   274                              <1>     ;Here rdi points past the null at the end
   275 00001BCF 8A0554E4FFFF        <1>     mov al, byte [pathSep]
   276 00001BD5 31C9                <1>     xor ecx, ecx
   277 00001BD7 FFC9                <1>     dec ecx
   278 00001BD9 FD                  <1>     std ;Search backwards
   279 00001BDA F2AE                <1>     repne scasb
   280 00001BDC FC                  <1>     cld ;Search forwards again
   281 00001BDD 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   282 00001BE0 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   283 00001BE4 7503                <1>     jne .wcsp1
   284 00001BE6 48FFC7              <1>     inc rdi ;Go one char forwards
   285                              <1> .wcsp1:
   286                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   287 00001BE9 57                  <1>     push rdi
   288 00001BEA 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   289 00001BEC 7503                <1>     jne .wcsp2
   290 00001BEE 48FFC7              <1>     inc rdi
   291                              <1> .wcsp2:
   292 00001BF1 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   293 00001BF4 488D3D6EEAFFFF      <1>     lea rdi, dirSrchFCB
   294 00001BFB B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   295 00001C00 CD21                <1>     int 21h
   296 00001C02 5F                  <1>     pop rdi
   297 00001C03 31C0                <1>     xor eax, eax
   298 00001C05 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   299                              <1> .wcDefaultSearch:
   300 00001C07 0FB605D8E9FFFF      <1>     movzx eax, byte [dirDrv] 
   301 00001C0E E83A0E0000          <1>     call volume.dirEP
   302 00001C13 488D1540F0FFFF      <1>     lea rdx, dirMain    ;Print message intro
   303 00001C1A B409                <1>     mov ah, 09h
   304 00001C1C CD21                <1>     int 21h
   305 00001C1E C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   306 00001C21 488D15BFE9FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   307 00001C28 B409                <1>     mov ah, 09h
   308 00001C2A CD21                <1>     int 21h
   309 00001C2C C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   310 00001C2F 488D1515EDFFFF      <1>     lea rdx, crlf2
   311 00001C36 B409                <1>     mov ah, 09h
   312 00001C38 CD21                <1>     int 21h
   313                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   314                              <1> ;rdi points to the terminating null
   315 00001C3A 8A05E9E3FFFF        <1>     mov al, byte [pathSep]
   316 00001C40 3847FF              <1>     cmp byte [rdi - 1], al
   317 00001C43 7403                <1>     je .root
   318 00001C45 48FFC7              <1>     inc rdi
   319                              <1> .root:
   320 00001C48 48FFCF              <1>     dec rdi ;Point back to the pathsep
   321 00001C4B AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   322 00001C4C 488D3517EAFFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   323 00001C53 E8391B0000          <1>     call FCBToAsciiz    ;Terminates for free
   324 00001C58 E801000000          <1>     call .searchForFile
   325                              <1>     return
    13                              <2> %%_ret:
    14 00001C5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   326                              <1> 
   327                              <1> .searchForFile:
   328 00001C5E E8B31C0000          <1>     call setDTA
   329 00001C63 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   330 00001C68 488D1578E9FFFF      <1>     lea rdx, dirSrchDir
   331 00001C6F B8004E0000          <1>     mov eax, 4E00h ;Find first
   332 00001C74 CD21                <1>     int 21h
   333 00001C76 720B                <1>     jc .dirNoMoreFiles
   334                              <1> .findNext:
   335 00001C78 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   336 00001C7D B44F                <1>     mov ah, 4Fh
   337 00001C7F CD21                <1>     int 21h
   338 00001C81 73F5                <1>     jnc .findNext 
   339                              <1> .dirNoMoreFiles:
   340 00001C83 F60559E9FFFF01      <1>     test byte [dirFlags], dirWideType
   341 00001C8A 740B                <1>     jz .dirNoEndNewLine
   342 00001C8C 488D15B5ECFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   343 00001C93 B409                <1>     mov ah, 09h
   344 00001C95 CD21                <1>     int 21h
   345                              <1> .dirNoEndNewLine:
   346                              <1>     ;Now we print the number of files and the number of bytes on the disk
   347 00001C97 488D156EF2FFFF      <1>     lea rdx, fourSpc
   348 00001C9E B409                <1>     mov ah, 09h
   349 00001CA0 CD21                <1>     int 21h
   350 00001CA2 B409                <1>     mov ah, 09h ;Print four Spaces twice
   351 00001CA4 CD21                <1>     int 21h
   352 00001CA6 0FB60538E9FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   353 00001CAD E8B11B0000          <1>     call printDecimalWord
   354 00001CB2 488D15DAEDFFFF      <1>     lea rdx, dirOk
   355 00001CB9 B409                <1>     mov ah, 09h
   356 00001CBB CD21                <1>     int 21h
   357 00001CBD 488D154DF2FFFF      <1>     lea rdx, threeSpc
   358 00001CC4 B409                <1>     mov ah, 09h
   359 00001CC6 CD21                <1>     int 21h
   360 00001CC8 B800360000          <1>     mov eax, 3600h ;Get disk info
   361 00001CCD 8A1513E9FFFF        <1>     mov dl, byte [dirDrv]
   362 00001CD3 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   363 00001CD5 CD21                <1>     int 21h ;Get disk free space info
   364 00001CD7 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   365 00001CDA 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   366 00001CDD 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   367 00001CDF F7E1                <1>     mul ecx ;Get bytes per cluster
   368 00001CE1 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   369                              <1>     ;rax now has the number of free bytes on the disk
   370 00001CE4 E87A1B0000          <1>     call printDecimalWord
   371 00001CE9 488D15ADEDFFFF      <1>     lea rdx, bytesOk
   372 00001CF0 B409                <1>     mov ah, 09h
   373 00001CF2 CD21                <1>     int 21h
   374                              <1>     return
    13                              <2> %%_ret:
    14 00001CF4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   375                              <1> 
   376                              <1> .dirPrintFileData:
   377                              <1> ;Use cmdFcb to build the file name with space
   378                              <1> ;Start by print the name (same for both cases)
   379                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   380 00001CF5 F6057EE4FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   381                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001CFC 75(F4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   382 00001CFE 488D357EE4FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   383 00001D05 488D3D49E4FFFF      <1>     lea rdi, cmdFcb
   384 00001D0C E8121A0000          <1>     call asciiFilenameToFCB
   385 00001D11 488D153DE4FFFF      <1>     lea rdx, cmdFcb
   386 00001D18 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   387 00001D1D BB01000000          <1>     mov ebx, 1  ;STDOUT
   388 00001D22 B440                <1>     mov ah, 40h ;Write handle
   389 00001D24 CD21                <1>     int 21h
   390 00001D26 52                  <1>     push rdx
   391 00001D27 B220                <1>     mov dl, " "
   392 00001D29 B402                <1>     mov ah, 02h ;Print char
   393 00001D2B CD21                <1>     int 21h
   394 00001D2D 5A                  <1>     pop rdx
   395 00001D2E 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   396 00001D35 B903000000          <1>     mov ecx, 3  ;Print three chars
   397 00001D3A BB01000000          <1>     mov ebx, 1  ;STDOUT
   398 00001D3F B440                <1>     mov ah, 40h ;Write handle
   399 00001D41 CD21                <1>     int 21h
   400 00001D43 F60599E8FFFF01      <1>     test byte [dirFlags], dirWideType
   401 00001D4A 0F85A8000000        <1>     jnz .widePrint
   402                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   403                              <1>     ;Now check if a DIR
   404 00001D50 F60523E4FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   405 00001D57 7418                <1>     jz .dirPrintNotDir
   406 00001D59 488D154BEDFFFF      <1>     lea rdx, dirLbl
   407 00001D60 B409                <1>     mov ah, 09h
   408 00001D62 CD21                <1>     int 21h
   409 00001D64 488D15A6F1FFFF      <1>     lea rdx, threeSpc
   410 00001D6B B409                <1>     mov ah, 09h
   411 00001D6D CD21                <1>     int 21h
   412 00001D6F EB4F                <1>     jmp short .dirPrintFileDT
   413                              <1> .dirPrintNotDir:
   414                              <1> ;Here we print the file size
   415 00001D71 B220                <1>     mov dl, " "
   416 00001D73 B402                <1>     mov ah, 02h
   417 00001D75 CD21                <1>     int 21h
   418 00001D77 8B0502E4FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   419 00001D7D E8521B0000          <1>     call getDecimalWord
   420 00001D82 4889CB              <1>     mov rbx, rcx
   421 00001D85 51                  <1>     push rcx
   422 00001D86 480FCB              <1>     bswap rbx
   423 00001D89 B908000000          <1>     mov ecx, 8
   424                              <1> .dirPrintFileSizePrep:
   425 00001D8E 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   426 00001D90 7514                <1>     jne .dirPrintFileSize
   427 00001D92 B402                <1>     mov ah, 02h
   428 00001D94 B220                <1>     mov dl, " "
   429 00001D96 CD21                <1>     int 21h
   430 00001D98 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   431 00001D9C FFC9                <1>     dec ecx
   432 00001D9E 81F901000000        <1>     cmp ecx, 1
   433 00001DA4 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   434                              <1> .dirPrintFileSize:
   435 00001DA6 5B                  <1>     pop rbx
   436                              <1> .dirPrintFileSizeLoop:
   437 00001DA7 88DA                <1>     mov dl, bl
   438 00001DA9 B402                <1>     mov ah, 02h
   439 00001DAB CD21                <1>     int 21h
   440 00001DAD 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   441 00001DB1 FFC9                <1>     dec ecx
   442 00001DB3 75F2                <1>     jnz .dirPrintFileSizeLoop
   443 00001DB5 488D1559F1FFFF      <1>     lea rdx, twoSpc
   444 00001DBC B409                <1>     mov ah, 09h
   445 00001DBE CD21                <1>     int 21h
   446                              <1> .dirPrintFileDT:
   447 00001DC0 B220                <1>     mov dl, " "
   448 00001DC2 B402                <1>     mov ah, 02h
   449 00001DC4 CD21                <1>     int 21h
   450 00001DC6 0FB705B0E3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   451 00001DCD 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   452 00001DCF E851140000          <1>     call printDate
   453 00001DD4 488D153AF1FFFF      <1>     lea rdx, twoSpc
   454 00001DDB B409                <1>     mov ah, 09h
   455 00001DDD CD21                <1>     int 21h
   456 00001DDF 0FB70595E3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   457 00001DE6 E85C150000          <1>     call printTime
   458 00001DEB 488D1556EBFFFF      <1>     lea rdx, crlf
   459 00001DF2 B409                <1>     mov ah, 09h
   460 00001DF4 CD21                <1>     int 21h
   461 00001DF6 EB0B                <1>     jmp short .dirPrintNameExit
   462                              <1> .widePrint:
   463                              <1> ;If /W, print name space ext space space space space
   464 00001DF8 488D150DF1FFFF      <1>     lea rdx, fourSpc
   465 00001DFF B409                <1>     mov ah, 09h ;Print string
   466 00001E01 CD21                <1>     int 21h
   467                              <1> .dirPrintNameExit:
   468 00001E03 FE05DCE7FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   469 00001E09 FE05D5E7FFFF        <1>     inc byte [dirLineCtr]
   470 00001E0F 803DCEE7FFFF17      <1>     cmp byte [dirLineCtr], 23
   471                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001E16 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001E18 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   472 00001E19 488D15B2ECFFFF      <1>     lea rdx, pauseMes
   473 00001E20 B409                <1>     mov ah, 09h
   474 00001E22 CD21                <1>     int 21h
   475 00001E24 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   476 00001E26 CD21                <1>     int 21h
   477 00001E28 C605B5E7FFFF00      <1>     mov byte [dirLineCtr], 0
   478 00001E2F 488D1512EBFFFF      <1>     lea rdx, crlf   ;Force new line
   479 00001E36 B409                <1>     mov ah, 09h
   480 00001E38 CD21                <1>     int 21h
   481                              <1>     return
    13                              <2> %%_ret:
    14 00001E3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> chdir:
   484 00001E3B F60566E2FFFFFF      <1>     test byte [arg1Flg], -1
   485 00001E42 754D                <1>     jnz .changeDir
   486                              <1>     ;Print CWD
   487                              <1> .printCWD:
   488 00001E44 E898160000          <1>     call putCWDInPrompt ;Exactly the same procedure
   489 00001E49 E817160000          <1>     call printCRLF
   490                              <1>     return
    13                              <2> %%_ret:
    14 00001E4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> .printDiskCWD:
   492                              <1> ;Print CWD for a specified drive
   493 00001E4F 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   494 00001E53 88D0                <1>     mov al, dl
   495 00001E55 0440                <1>     add al, "@" ;Get the UC letter
   496 00001E57 B43A                <1>     mov ah, ":"
   497 00001E59 488D3D7FE6FFFF      <1>     lea rdi, searchSpec
   498 00001E60 66AB                <1>     stosw   ;Store X:, rdi+=2
   499 00001E62 8A05C1E1FFFF        <1>     mov al, byte [pathSep]
   500 00001E68 AA                  <1>     stosb   ;Store pathSep, inc rdi
   501 00001E69 B447                <1>     mov ah, 47h ;Get Current Working Directory
   502 00001E6B 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   503 00001E6E CD21                <1>     int 21h
   504 00001E70 E825180000          <1>     call strlen
   505 00001E75 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   506 00001E7B B440                <1>     mov ah, 40h ;Write to handle
   507 00001E7D BB01000000          <1>     mov ebx, 1  ;STDOUT
   508 00001E82 488D1556E6FFFF      <1>     lea rdx, searchSpec
   509 00001E89 CD21                <1>     int 21h
   510 00001E8B E8D5150000          <1>     call printCRLF
   511                              <1>     return
    13                              <2> %%_ret:
    14 00001E90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> .changeDir:
   513 00001E91 8A0513E2FFFF        <1>     mov al, byte [arg1FCBret]
   514 00001E97 3CFF                <1>     cmp al, -1 
   515 00001E99 0F8487FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   516 00001E9F E886190000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   517 00001EA4 488D1534E6FFFF      <1>     lea rdx, searchSpec
   518 00001EAB B43B                <1>     mov ah, 3Bh ;CHDIR
   519 00001EAD CD21                <1>     int 21h
   520 00001EAF 0F829EFAFFFF        <1>     jc badDirError
   521                              <1>     return
    13                              <2> %%_ret:
    14 00001EB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   522                              <1> 
   523                              <1> mkdir:
   524 00001EB6 F605EBE1FFFFFF      <1>     test byte [arg1Flg], -1
   525 00001EBD 0F846CFAFFFF        <1>     jz badArgError
   526 00001EC3 F605E1E1FFFFFF      <1>     test byte [arg2Flg], -1
   527 00001ECA 0F855FFAFFFF        <1>     jnz badArgError
   528                              <1>     ;We have exactly one argument
   529 00001ED0 8A05D4E1FFFF        <1>     mov al, byte [arg1FCBret]
   530 00001ED6 3CFF                <1>     cmp al, -1 
   531 00001ED8 0F8448FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   532 00001EDE E847190000          <1>     call buildCommandPath
   533 00001EE3 488D15F5E5FFFF      <1>     lea rdx, searchSpec
   534 00001EEA B800390000          <1>     mov eax, 3900h  ;MKDIR
   535 00001EEF CD21                <1>     int 21h
   536                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001EF1 73(B5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   537                              <1> .badMake:   ;Else, bad make
   538 00001EF3 488D150CEDFFFF      <1>     lea rdx, badMD
   539 00001EFA B800090000          <1>     mov eax, 0900h
   540 00001EFF CD21                <1>     int 21h
   541                              <1>     return
    13                              <2> %%_ret:
    14 00001F01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> 
   543                              <1> rmdir:
   544 00001F02 F6059FE1FFFFFF      <1>     test byte [arg1Flg], -1
   545 00001F09 0F8420FAFFFF        <1>     jz badArgError
   546 00001F0F F60595E1FFFFFF      <1>     test byte [arg2Flg], -1
   547 00001F16 0F8513FAFFFF        <1>     jnz badArgError
   548                              <1>     ;We have exactly one argument
   549 00001F1C 8A0588E1FFFF        <1>     mov al, byte [arg1FCBret]
   550 00001F22 3CFF                <1>     cmp al, -1 
   551 00001F24 0F84FCF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   552 00001F2A E8FB180000          <1>     call buildCommandPath
   553 00001F2F 488D15A9E5FFFF      <1>     lea rdx, searchSpec
   554 00001F36 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   555 00001F3B CD21                <1>     int 21h
   556                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F3D 73(01)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557                              <1> .badRemove:   ;Else, bad make
   558 00001F3F 488D15DDECFFFF      <1>     lea rdx, badRD
   559 00001F46 B800090000          <1>     mov eax, 0900h
   560 00001F4B CD21                <1>     int 21h
   561                              <1>     return
    13                              <2> %%_ret:
    14 00001F4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   562                              <1> 
   563                              <1> copy:
   564 00001F4E F60553E1FFFFFF      <1>     test byte [arg1Flg], -1
   565 00001F55 0F84D4F9FFFF        <1>     jz badArgError
   566 00001F5B F60549E1FFFFFF      <1>     test byte [arg2Flg], -1
   567 00001F62 0F84C7F9FFFF        <1>     jz badArgError
   568 00001F68 0FB6053AE1FFFF      <1>     movzx eax, byte [arg1Off]
   569 00001F6F 4C8B0599E0FFFF      <1>     mov r8, [pspPtr]
   570 00001F76 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   571 00001F7D 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   572 00001F80 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   573 00001F83 488D3D1FE7FFFF      <1>     lea rdi, srcSpec
   574 00001F8A E858180000          <1>     call cpDelimPathToBufz    
   575 00001F8F 0FB60516E1FFFF      <1>     movzx eax, byte [arg2Off]
   576 00001F96 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   577 00001F99 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   578 00001F9C 488D3D88E7FFFF      <1>     lea rdi, destSpec
   579 00001FA3 E83F180000          <1>     call cpDelimPathToBufz   
   580                              <1> ;Before we open, we check if the two filenames are equal
   581                              <1> ; If so, crap out.
   582 00001FA8 488D35FAE6FFFF      <1>     lea rsi, srcSpec
   583 00001FAF 488D3D75E7FFFF      <1>     lea rdi, destSpec
   584 00001FB6 B81E120000          <1>     mov eax, 121Eh
   585 00001FBB CD2F                <1>     int 2Fh
   586 00001FBD 0F84D3000000        <1>     jz .sameFilename
   587                              <1>     ;Open source with read permission
   588                              <1>     ;Open destination with write permission
   589 00001FC3 488D15DFE6FFFF      <1>     lea rdx, srcSpec
   590 00001FCA B8003D0000          <1>     mov eax, 3D00h  ;Read open
   591 00001FCF CD21                <1>     int 21h
   592 00001FD1 0F8246F9FFFF        <1>     jc badParamError
   593 00001FD7 668905EAE7FFFF      <1>     mov word [sourceHdl], ax
   594                              <1> 
   595 00001FDE 0FB7D8              <1>     movzx ebx, ax   ;For bx
   596 00001FE1 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   597 00001FE6 CD21                <1>     int 21h
   598 00001FE8 668915DDE7FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   599                              <1> 
   600 00001FEF 488D1535E7FFFF      <1>     lea rdx, destSpec
   601 00001FF6 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   602 00001FFB 31C9                <1>     xor ecx, ecx    ;No file attributes
   603 00001FFD CD21                <1>     int 21h
   604 00001FFF 0F82B8000000        <1>     jc .badExit
   605 00002005 668905BEE7FFFF      <1>     mov word [destHdl], ax
   606 0000200C 31F6                <1>     xor esi, esi
   607 0000200E 488D15B9E7FFFF      <1>     lea rdx, copyBuffer
   608                              <1> .copyLoop:
   609 00002015 B980000000          <1>     mov ecx, 128
   610 0000201A 0FB71DA7E7FFFF      <1>     movzx ebx, word [sourceHdl]
   611 00002021 B43F                <1>     mov ah, 3Fh ;Read
   612 00002023 CD21                <1>     int 21h
   613 00002025 0F8292000000        <1>     jc .badExit
   614 0000202B 85C0                <1>     test eax, eax
   615 0000202D 743A                <1>     jz .okExit
   616 0000202F 01C6                <1>     add esi, eax
   617 00002031 89C1                <1>     mov ecx, eax
   618 00002033 0FB71D90E7FFFF      <1>     movzx ebx, word [destHdl]
   619 0000203A B440                <1>     mov ah, 40h ;Write
   620 0000203C CD21                <1>     int 21h
   621 0000203E 727D                <1>     jc .badExit
   622 00002040 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   623 00002045 74CE                <1>     je .copyLoop
   624                              <1>     ;If not char dev, exit
   625 00002047 66F7057CE7FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   626 00002050 7417                <1>     jz .okExit
   627                              <1>     ;Is handle in cooked or binary mode?
   628 00002052 66F70571E7FFFF2000  <1>     test word [srcHdlInfo], 20h
   629 0000205B 750C                <1>     jnz .okExit
   630                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   631 0000205D 09C0                <1>     or eax, eax ;Clear upper bits in eax
   632 0000205F 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   633 00002064 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   634 00002067 75AC                <1>     jne .copyLoop   ;Jump if not
   635                              <1> .okExit:
   636 00002069 E832000000          <1>     call .leaveCopyClose
   637 0000206E 488D15D3E8FFFF      <1>     lea rdx, crlf
   638 00002075 B409                <1>     mov ah, 09h
   639 00002077 CD21                <1>     int 21h
   640 00002079 488D158CEEFFFF      <1>     lea rdx, fourSpc
   641 00002080 B409                <1>     mov ah, 09h
   642 00002082 CD21                <1>     int 21h
   643 00002084 B402                <1>     mov ah, 02h
   644 00002086 B231                <1>     mov dl, "1" ;1 File(s) copied
   645 00002088 CD21                <1>     int 21h
   646 0000208A 488D15F0E9FFFF      <1>     lea rdx, copyOk
   647 00002091 B409                <1>     mov ah, 09h
   648 00002093 CD21                <1>     int 21h
   649                              <1>     return
    13                              <2> %%_ret:
    14 00002095 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   650                              <1> .sameFilename:
   651 00002096 E805000000          <1>     call .leaveCopyClose ;Close the handles
   652 0000209B E974F8FFFF          <1>     jmp noSelfCopyError
   653                              <1> .leaveCopyClose:
   654 000020A0 668B1D21E7FFFF      <1>     mov bx, word [sourceHdl]
   655 000020A7 B8003E0000          <1>     mov eax, 3E00h
   656 000020AC CD21                <1>     int 21h
   657 000020AE 668B1D15E7FFFF      <1>     mov bx, word [destHdl]
   658 000020B5 B8003E0000          <1>     mov eax, 3E00h
   659 000020BA CD21                <1>     int 21h
   660                              <1>     return
    13                              <2> %%_ret:
    14 000020BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   661                              <1> .badExit:
   662                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   663 000020BD 668B1D04E7FFFF      <1>     mov bx, word [sourceHdl]
   664 000020C4 6681FBFFFF          <1>     cmp bx, -1
   665 000020C9 7407                <1>     je .skipSource
   666 000020CB B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   667 000020D0 CD21                <1>     int 21h
   668                              <1> .skipSource:
   669 000020D2 668B1DF1E6FFFF      <1>     mov bx, word [destHdl]
   670 000020D9 6681FBFFFF          <1>     cmp bx, -1
   671 000020DE 0F8439F8FFFF        <1>     je badParamError
   672 000020E4 B8003E0000          <1>     mov eax, 3E00h
   673 000020E9 CD21                <1>     int 21h
   674 000020EB E92DF8FFFF          <1>     jmp badParamError
   675                              <1> 
   676                              <1> erase:
   677 000020F0 F605B1DFFFFFFF      <1>     test byte [arg1Flg], -1
   678 000020F7 0F8432F8FFFF        <1>     jz badArgError
   679 000020FD E814180000          <1>     call setDTA     ;Start by resetting the DTA
   680 00002102 E823170000          <1>     call buildCommandPath   ;Get the relative path to the file
   681                              <1> .dirLp:
   682 00002107 488D3DD1E3FFFF      <1>     lea rdi, searchSpec
   683 0000210E E85A160000          <1>     call findLastPathComponant
   684 00002113 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   685 00002116 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   686 0000211A B03F                <1>     mov al, "?"
   687                              <1>     ;Store question marks in the name field
   688 0000211C 57                  <1>     push rdi
   689 0000211D 48FFC7              <1>     inc rdi ;Goto the first char
   690 00002120 B90B000000          <1>     mov ecx, 11
   691 00002125 F3AA                <1>     rep stosb
   692 00002127 5F                  <1>     pop rdi
   693 00002128 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   694 0000212B B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   695 00002130 CD21                <1>     int 21h
   696 00002132 3C01                <1>     cmp al, 1
   697 00002134 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   698                              <1>     ;Else, we now copy back the search pattern over the last componant!
   699                              <1>     ;No dirs to handle in here
   700 0000213A 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   701 0000213E 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   702 00002141 E84B160000          <1>     call FCBToAsciiz    ;Null terminates for free
   703                              <1>     ;Count the number of ?'s, if 11, we print the message
   704 00002146 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   705 0000214A 31C9                <1>     xor ecx, ecx
   706                              <1> .wcScan:
   707 0000214C AC                  <1>     lodsb
   708 0000214D 3C3F                <1>     cmp al, "?"
   709 0000214F 752F                <1>     jne .endCount
   710 00002151 FFC1                <1>     inc ecx
   711 00002153 81F90B000000        <1>     cmp ecx, 11
   712 00002159 75F1                <1>     jne .wcScan
   713                              <1> .ynmsg:
   714 0000215B 488D1544EAFFFF      <1>     lea rdx, ynMes
   715 00002162 E805130000          <1>     call printString
   716 00002167 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   717 00002169 CD21                <1>     int 21h ;Get char in al
   718 0000216B E834150000          <1>     call ucChar ;Uppercase the char
   719 00002170 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   720 00002172 7407                <1>     je .endCount1
   721 00002174 3C4E                <1>     cmp al, "N"
   722                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002176 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002178 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   723 00002179 EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   724                              <1> .endCount1:
   725 0000217B E8E5120000          <1>     call printCRLF
   726                              <1> .endCount:
   727                              <1>     ;Now we copy our search template pathstring to delPath
   728 00002180 488D3D22E5FFFF      <1>     lea rdi, delPath
   729 00002187 488D3551E3FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   730 0000218E E8FD140000          <1>     call strcpy2         ;Copy the string over to delPath
   731                              <1> .findFile:
   732                              <1>     ;Now we find first/find next our way through the files
   733 00002193 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   734 00002196 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   735 00002198 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   736 0000219D CD21                <1>     int 21h
   737 0000219F 0F82A5F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   738                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   739 000021A5 E8C3150000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   740 000021AA 488D35D2DFFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   741                              <1> .delNextFile:
   742                              <1> ;rsi and rdi dont move here
   743 000021B1 E8DA140000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   744 000021B6 488D15ECE4FFFF      <1>     lea rdx, delPath
   745 000021BD B800410000          <1>     mov eax, 4100h  ;Delete File 
   746 000021C2 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   747 000021C4 488D1514E3FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   748 000021CB B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   749 000021D0 CD21                <1>     int 21h
   750 000021D2 73DD                <1>     jnc .delNextFile    
   751 000021D4 F8                  <1>     clc ;Clear carry to indicate success
   752                              <1>     return
    13                              <2> %%_ret:
    14 000021D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   753                              <1> .noWildcard:
   754                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   755                              <1>     ; a \*.*<NUL> over the null terminator
   756 000021D6 488D1502E3FFFF      <1>     lea rdx, searchSpec
   757 000021DD B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   758 000021E2 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   759 000021E7 CD21                <1>     int 21h
   760 000021E9 0F825BF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   761 000021EF F60584DFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   762 000021F6 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   763                              <1>     ;Else, we are dealing with a dir
   764 000021F8 4889D7              <1>     mov rdi, rdx
   765 000021FB 31C9                <1>     xor ecx, ecx
   766 000021FD FFC9                <1>     dec ecx
   767 000021FF F2AE                <1>     repne scasb ;Go to the end of the line!
   768 00002201 48FFCF              <1>     dec rdi
   769 00002204 0FB6051EDEFFFF      <1>     movzx eax, byte [pathSep]
   770 0000220B AA                  <1>     stosb
   771 0000220C B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   772 00002211 AB                  <1>     stosd
   773 00002212 E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   774                              <1> .delMain:   ;Call with rdx -> buffer!
   775 00002217 B800410000          <1>     mov eax, 4100h  ;Delete File 
   776 0000221C CD21                <1>     int 21h
   777                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000221E 73(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   778 00002220 3C05                <1>     cmp al, errAccDen
   779 00002222 0F84E3F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   780 00002228 E90BF7FFFF          <1>     jmp badFileError
   781                              <1>     return
    13                              <2> %%_ret:
    14 0000222D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   782                              <1> date:
   783 0000222E 488D15F4E8FFFF      <1>     lea rdx, curDate
   784 00002235 B409                <1>     mov ah, 09h
   785 00002237 CD21                <1>     int 21h
   786 00002239 E858130000          <1>     call printFmtDate
   787                              <1> 
   788 0000223E 488D15F5E8FFFF      <1>     lea rdx, newDate
   789 00002245 B409                <1>     mov ah, 09h
   790 00002247 CD21                <1>     int 21h
   791 00002249 488D1509E9FFFF      <1>     lea rdx, ukDate
   792 00002250 488D05F5E8FFFF      <1>     lea rax, usDate
   793 00002257 488D1D08E9FFFF      <1>     lea rbx, jpDate
   794 0000225E 803DCFDDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   795 00002265 480F47D3            <1>     cmova rdx, rbx
   796 00002269 480F42D0            <1>     cmovb rdx, rax
   797 0000226D B409                <1>     mov ah, 09h
   798 0000226F CD21                <1>     int 21h
   799                              <1> 
   800 00002271 488D1538DFFFFF      <1>     lea rdx, inBuffer
   801 00002278 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   802 0000227B B40A                <1>     mov ah, 0Ah
   803 0000227D CD21                <1>     int 21h
   804 0000227F 52                  <1>     push rdx
   805 00002280 488D15C1E6FFFF      <1>     lea rdx, crlf
   806 00002287 B409                <1>     mov ah, 09h
   807 00002289 CD21                <1>     int 21h
   808 0000228B 5A                  <1>     pop rdx
   809 0000228C 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   810                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002290 74(2D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   811                              <1>     return
    13                              <2> %%_ret:
    14 00002292 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   812                              <1> 
   813                              <1> time:
   814 00002293 488D15E8E8FFFF      <1>     lea rdx, curTime
   815 0000229A B409                <1>     mov ah, 09h
   816 0000229C CD21                <1>     int 21h
   817                              <1> 
   818 0000229E E890120000          <1>     call printFmtTime
   819                              <1> 
   820 000022A3 488D15E9E8FFFF      <1>     lea rdx, newTime
   821 000022AA B409                <1>     mov ah, 09h
   822 000022AC CD21                <1>     int 21h
   823                              <1> 
   824 000022AE 488D15FBDEFFFF      <1>     lea rdx, inBuffer
   825 000022B5 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   826 000022B8 B40A                <1>     mov ah, 0Ah
   827 000022BA CD21                <1>     int 21h
   828 000022BC 52                  <1>     push rdx
   829 000022BD 488D1584E6FFFF      <1>     lea rdx, crlf
   830 000022C4 B409                <1>     mov ah, 09h
   831 000022C6 CD21                <1>     int 21h
   832 000022C8 5A                  <1>     pop rdx
   833 000022C9 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   834                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000022CD 74(92)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   835                              <1>     return
    13                              <2> %%_ret:
    14 000022CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   836                              <1> ctty:
   837 000022D0 F605D1DDFFFFFF      <1>     test byte [arg1Flg], -1
   838 000022D7 0F8452F6FFFF        <1>     jz badArgError
   839 000022DD F605C7DDFFFFFF      <1>     test byte [arg2Flg], -1
   840 000022E4 0F8545F6FFFF        <1>     jnz badArgError
   841 000022EA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   842 000022F1 0FB605B1DDFFFF      <1>     movzx eax, byte [arg1Off]
   843 000022F8 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   844 000022FB 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   845 000022FF 750F                <1>     jne .noDrive
   846 00002301 0FB605A2DDFFFF      <1>     movzx eax, byte [arg1FCBret]
   847 00002308 3CFF                <1>     cmp al, -1
   848 0000230A 0F8416F6FFFF        <1>     je badDriveError
   849                              <1> .noDrive:
   850                              <1>     ;Now we open the provided file
   851 00002310 E82D150000          <1>     call copyArgumentToSearchSpec
   852 00002315 488D15C3E1FFFF      <1>     lea rdx, searchSpec
   853 0000231C B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   854 00002321 CD21                <1>     int 21h
   855 00002323 0F820FF6FFFF        <1>     jc badFileError
   856 00002329 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   857 0000232C B800440000          <1>     mov eax, 4400h  ;Get device word
   858 00002331 CD21                <1>     int 21h
   859 00002333 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   860 00002336 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   861                              <1>     ;Now we set this handle to be STDIO
   862 00002338 80CA03              <1>     or dl, 3    ;Set STDIO bits
   863 0000233B 30F6                <1>     xor dh, dh
   864 0000233D B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   865 00002342 CD21                <1>     int 21h
   866                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   867 00002344 31C9                <1>     xor ecx, ecx    ;STDIN
   868 00002346 B446                <1>     mov ah, 46h
   869 00002348 CD21                <1>     int 21h
   870 0000234A FFC1                <1>     inc ecx         ;STDOUT
   871 0000234C B446                <1>     mov ah, 46h
   872 0000234E CD21                <1>     int 21h
   873 00002350 FFC1                <1>     inc ecx         ;STDERR
   874 00002352 B446                <1>     mov ah, 46h
   875 00002354 CD21                <1>     int 21h
   876 00002356 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   877 00002358 CD21                <1>     int 21h
   878                              <1>     return
    13                              <2> %%_ret:
    14 0000235A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   879                              <1> .badCharDev:
   880 0000235B 488D1542E9FFFF      <1>     lea rdx, badDev
   881 00002362 B409                <1>     mov ah, 09h
   882 00002364 CD21                <1>     int 21h
   883 00002366 B43E                <1>     mov ah, 3Eh ;Close opened handle
   884 00002368 CD21                <1>     int 21h
   885                              <1>     return
    13                              <2> %%_ret:
    14 0000236A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   886                              <1> 
   887                              <1> cls:  
   888 0000236B B800440000          <1>     mov eax, 4400h  ;Get device info
   889 00002370 BB01000000          <1>     mov ebx, 1      ;for handle 1
   890 00002375 CD21                <1>     int 21h         ;in dx
   891 00002377 F7C280000000        <1>     test edx, devCharDev
   892 0000237D 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   893 0000237F F7C210000000        <1>     test edx, charDevFastOut
   894 00002385 743E                <1>     jz .doAnsi
   895                              <1>     ;Test if Int 29h uses Int 30h
   896                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   897                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   898 00002387 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   899 0000238C CD21                <1>     int 21h
   900                              <1> .biosCheck:
   901 0000238E 66813BCD30          <1>     cmp word [rbx], 30CDh
   902 00002393 740C                <1>     je .biosConfirmed
   903 00002395 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   904 0000239A 7429                <1>     je .doAnsi
   905 0000239C 48FFC3              <1>     inc rbx
   906 0000239F EBED                <1>     jmp short .biosCheck
   907                              <1> .biosConfirmed:
   908                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   909 000023A1 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   910 000023A3 31DB                <1>     xor ebx, ebx
   911 000023A5 CD30                <1>     int 30h
   912 000023A7 B40F                <1>     mov ah, 0Fh ;Get screen mode
   913 000023A9 CD30                <1>     int 30h
   914 000023AB 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   915 000023AE FECA                <1>     dec dl
   916 000023B0 B619                <1>     mov dh, 25  ;Number of rows is standard
   917 000023B2 31C0                <1>     xor eax, eax
   918 000023B4 89C1                <1>     mov ecx, eax
   919 000023B6 B707                <1>     mov bh, 7   ;Screen attributes
   920 000023B8 B406                <1>     mov ah, 6   ;Scroll
   921 000023BA CD30                <1>     int 30h
   922 000023BC 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   923 000023BE B700                <1>     mov bh, 0   ;Page 0
   924 000023C0 B402                <1>     mov ah, 2
   925 000023C2 CD30                <1>     int 30h
   926                              <1>     return
    13                              <2> %%_ret:
    14 000023C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   927                              <1> .doAnsi:
   928                              <1> ;4 chars in the ansi routine
   929                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   930                              <1> ; understand ANSI codes
   931 000023C5 488D353CEBFFFF      <1>     lea rsi, ansiCls
   932 000023CC B904000000          <1>     mov ecx, 4
   933 000023D1 B406                <1>     mov ah, 06h ;Raw char output
   934                              <1> .ansiLp:
   935 000023D3 AC                  <1>     lodsb   ;Get the char in 
   936 000023D4 88C2                <1>     mov dl, al
   937 000023D6 CD21                <1>     int 21h
   938 000023D8 FFC9                <1>     dec ecx
   939 000023DA 75F7                <1>     jnz .ansiLp
   940                              <1>     return
    13                              <2> %%_ret:
    14 000023DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   941                              <1> 
   942                              <1> break:
   943 000023DD F605C4DCFFFFFF      <1>     test byte [arg1Flg], -1
   944 000023E4 752D                <1>     jnz .argumentProvided
   945                              <1>     ;Here we just get the status of break
   946 000023E6 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   947 000023EB CD21                <1>     int 21h
   948 000023ED 88D3                <1>     mov bl, dl
   949 000023EF 488D1550E9FFFF      <1>     lea rdx, breakIs
   950 000023F6 B409                <1>     mov ah, 09h
   951 000023F8 CD21                <1>     int 21h
   952 000023FA 488D1540E9FFFF      <1>     lea rdx, onMes
   953 00002401 488D0D33E9FFFF      <1>     lea rcx, offMes
   954 00002408 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   955 0000240A 480F44D1            <1>     cmovz rdx, rcx
   956 0000240E B409                <1>     mov ah, 09h
   957 00002410 CD21                <1>     int 21h
   958                              <1>     return
    13                              <2> %%_ret:
    14 00002412 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   959                              <1> .argumentProvided:
   960 00002413 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   961 00002417 AD                  <1>     lodsd   ;Read the word
   962 00002418 89C3                <1>     mov ebx, eax
   963 0000241A 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   964 0000241F C1EB10              <1>     shr ebx, 10h     ;Get high word low
   965 00002422 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   966 00002427 7416                <1>     je .maybeOn
   967 00002429 663D4F46            <1>     cmp ax, "OF"
   968 0000242D 7523                <1>     jne .badOnOff
   969 0000242F 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   970 00002434 6681FB4620          <1>     cmp bx, "F "
   971 00002439 7517                <1>     jne .badOnOff
   972                              <1>     ;Set off
   973 0000243B 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   974 0000243D EB0B                <1>     jmp short .setBreak
   975                              <1> .maybeOn:
   976 0000243F 663D4F4E            <1>     cmp ax, "ON"
   977 00002443 750D                <1>     jne .badOnOff
   978                              <1>     ;Set on
   979 00002445 BA01000000          <1>     mov edx, 1
   980                              <1> .setBreak:
   981 0000244A B801330000          <1>     mov eax, 3301h  ;Set break
   982 0000244F CD21                <1>     int 21h
   983                              <1>     return
    13                              <2> %%_ret:
    14 00002451 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   984                              <1> .badOnOff:
   985 00002452 488D15BFEAFFFF      <1>     lea rdx, badOnOff
   986 00002459 B409                <1>     mov ah, 09h
   987 0000245B CD21                <1>     int 21h
   988                              <1>     return
    13                              <2> %%_ret:
    14 0000245D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   989                              <1> 
   990                              <1> verify:
   991 0000245E F60543DCFFFFFF      <1>     test byte [arg1Flg], -1
   992 00002465 752D                <1>     jnz .argumentProvided
   993                              <1>     ;Here we just get the status of break
   994 00002467 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   995 0000246C CD21                <1>     int 21h
   996 0000246E 88C3                <1>     mov bl, al
   997 00002470 488D15D9E8FFFF      <1>     lea rdx, verifyIs
   998 00002477 B409                <1>     mov ah, 09h
   999 00002479 CD21                <1>     int 21h
  1000 0000247B 488D15BFE8FFFF      <1>     lea rdx, onMes
  1001 00002482 488D0DB2E8FFFF      <1>     lea rcx, offMes
  1002 00002489 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1003 0000248B 480F44D1            <1>     cmovz rdx, rcx
  1004 0000248F B409                <1>     mov ah, 09h
  1005 00002491 CD21                <1>     int 21h
  1006                              <1>     return
    13                              <2> %%_ret:
    14 00002493 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1007                              <1> .argumentProvided:
  1008 00002494 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1009 00002498 AD                  <1>     lodsd   ;Read the word
  1010 00002499 89C3                <1>     mov ebx, eax
  1011 0000249B 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1012 000024A0 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1013 000024A3 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1014 000024A8 7416                <1>     je .maybeOn
  1015 000024AA 663D4F46            <1>     cmp ax, "OF"
  1016 000024AE 751F                <1>     jne .badOnOff
  1017 000024B0 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1018 000024B5 6681FB4620          <1>     cmp bx, "F "
  1019 000024BA 7513                <1>     jne .badOnOff
  1020                              <1>     ;Set off
  1021 000024BC 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1022 000024BE EB0A                <1>     jmp short .setVerify
  1023                              <1> .maybeOn:
  1024 000024C0 663D4F4E            <1>     cmp ax, "ON"
  1025 000024C4 7509                <1>     jne .badOnOff
  1026                              <1>     ;Set on
  1027 000024C6 31C0                <1>     xor eax, eax
  1028 000024C8 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1029                              <1> .setVerify:
  1030 000024CA B42E                <1>     mov ah, 2Eh  ;Set Verify
  1031 000024CC CD21                <1>     int 21h
  1032                              <1>     return
    13                              <2> %%_ret:
    14 000024CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1033                              <1> .badOnOff:
  1034 000024CF 488D1542EAFFFF      <1>     lea rdx, badOnOff
  1035 000024D6 B409                <1>     mov ah, 09h
  1036 000024D8 CD21                <1>     int 21h
  1037                              <1>     return
    13                              <2> %%_ret:
    14 000024DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> 
  1039                              <1> rename:
  1040 000024DB F605C6DBFFFFFF      <1>     test byte [arg1Flg], -1
  1041 000024E2 0F8447F4FFFF        <1>     jz badArgError
  1042 000024E8 F605BCDBFFFFFF      <1>     test byte [arg2Flg], -1
  1043 000024EF 0F843AF4FFFF        <1>     jz badArgError    
  1044                              <1>     ;Initialise the variables!
  1045 000024F5 488D35ADE1FFFF      <1>     lea rsi, srcSpec
  1046 000024FC 488935AAE2FFFF      <1>     mov qword [srcPtr], rsi
  1047 00002503 488D3521E2FFFF      <1>     lea rsi, destSpec
  1048 0000250A 488935A4E2FFFF      <1>     mov qword [destPtr], rsi
  1049                              <1>     ;Check the second path is just a filename!
  1050 00002511 0FB60594DBFFFF      <1>     movzx eax, byte [arg2Off]
  1051 00002518 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1052 0000251F 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1053 00002522 488D3DB6DFFFFF      <1>     lea rdi, searchSpec
  1054 00002529 57                  <1>     push rdi
  1055 0000252A E8B8120000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1056 0000252F 5F                  <1>     pop rdi
  1057 00002530 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1058 00002534 0F84F5F3FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1059 0000253A 4889FE              <1>     mov rsi, rdi
  1060                              <1> .destScan:
  1061 0000253D AC                  <1>     lodsb   ;Get the char
  1062 0000253E 3A05E5DAFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1063 00002544 0F84E5F3FFFF        <1>     je badArgError
  1064 0000254A 84C0                <1>     test al, al
  1065 0000254C 75EF                <1>     jnz .destScan
  1066                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1067 0000254E 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1068 00002552 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1068 0000255B 3F                  <1>
  1069 0000255C B903000000          <1>     mov ecx, 3  ;24 bytes
  1070 00002561 F348AB              <1>     rep stosq
  1071 00002564 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1072 00002565 488D3573DFFFFF      <1>     lea rsi, searchSpec
  1073 0000256C 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1074 00002570 B80D290000          <1>     mov eax, 290Dh
  1075 00002575 CD21                <1>     int 21h     
  1076 00002577 50                  <1>     push rax    ;Save the WC signature
  1077 00002578 E8AD120000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1078 0000257D 488D3D5BDFFFFF      <1>     lea rdi, searchSpec
  1079 00002584 E8E4110000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1080 00002589 4889FE              <1>     mov rsi, rdi
  1081 0000258C 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1082 0000258F 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1083 00002593 B80D290000          <1>     mov eax, 290Dh
  1084 00002598 CD21                <1>     int 21h
  1085 0000259A 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1086 0000259B 88CC                <1>     mov ah, cl
  1087 0000259D 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1088 000025A0 0F84EC000000        <1>     jz .noWC
  1089 000025A6 488D3532DFFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1090                              <1>     ;Now we check if we have a path to actually handle
  1091 000025AD 4839F3              <1>     cmp rbx, rsi
  1092 000025B0 7444                <1>     je .noPath
  1093 000025B2 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1094 000025B6 488D3522DFFFFF      <1>     lea rsi, searchSpec
  1095 000025BD 488D3DE5E0FFFF      <1>     lea rdi, srcSpec
  1096 000025C4 56                  <1>     push rsi
  1097 000025C5 E8B7100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1098 000025CA 5E                  <1>     pop rsi
  1099 000025CB 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1100 000025CE 8A0555DAFFFF        <1>     mov al, byte [pathSep]
  1101 000025D4 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1102 000025D5 48893DD1E1FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1103 000025DC 488D3D48E1FFFF      <1>     lea rdi, destSpec
  1104 000025E3 E899100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1105 000025E8 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1106 000025EB AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1107 000025EC 48893DC2E1FFFF      <1>     mov qword [destPtr], rdi
  1108 000025F3 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1109                              <1> .noPath:
  1110                              <1>     ;Now we have where to copy the files to, we can start our work!
  1111 000025F6 E81B130000          <1>     call setDTA
  1112 000025FB 488D15DDDEFFFF      <1>     lea rdx, searchSpec
  1113 00002602 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1114 00002604 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1115 00002609 CD21                <1>     int 21h
  1116 0000260B 0F8230F3FFFF        <1>     jc badDupFnf    ;If no file was found!
  1117                              <1> .wcLoop:
  1118                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1119 00002611 488D356BDBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1120 00002618 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1121 0000261C B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1122 00002621 CD21                <1>     int 21h 
  1123                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1124 00002623 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1125 00002627 488D3D8FE1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1126 0000262E 57                  <1>     push rdi
  1127 0000262F 48A5                <1>     movsq
  1128 00002631 66A5                <1>     movsw
  1129 00002633 A4                  <1>     movsb
  1130 00002634 5F                  <1>     pop rdi
  1131 00002635 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1132 00002639 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1133                              <1> .wcNameMake:
  1134 0000263E AC                  <1>     lodsb   ;Get the char from the source string
  1135 0000263F 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1136 00002642 7502                <1>     jne .noStore    ;Dont store the char there
  1137 00002644 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1138                              <1> .noStore:
  1139 00002646 48FFC7              <1>     inc rdi ;Goto next char position
  1140 00002649 FFC9                <1>     dec ecx
  1141 0000264B 75F1                <1>     jnz .wcNameMake
  1142                              <1> ;renName now has the FCB name for the file we wish to make!
  1143                              <1> ;Now make the two paths!
  1144 0000264D 488D352FDBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1145 00002654 488B3D52E1FFFF      <1>     mov rdi, qword [srcPtr]
  1146 0000265B E821100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1147 00002660 488D3556E1FFFF      <1>     lea rsi, renName
  1148 00002667 488B3D47E1FFFF      <1>     mov rdi, qword [destPtr]
  1149 0000266E E81E110000          <1>     call FCBToAsciiz
  1150 00002673 488D152FE0FFFF      <1>     lea rdx, srcSpec
  1151 0000267A 488D3DAAE0FFFF      <1>     lea rdi, destSpec
  1152 00002681 B800560000          <1>     mov eax, 5600h
  1153 00002686 CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1154 00002688 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1155 0000268D CD21                <1>     int 21h
  1156 0000268F 7380                <1>     jnc .wcLoop     ;And process it too!
  1157                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00002691 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1158                              <1> .noWC:
  1159 00002692 E893110000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1160 00002697 0FB6050EDAFFFF      <1>     movzx eax, byte [arg2Off]
  1161 0000269E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1162 000026A5 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1163 000026A8 488D3D7CE0FFFF      <1>     lea rdi, destSpec
  1164 000026AF 57                  <1>     push rdi
  1165 000026B0 E832110000          <1>     call cpDelimPathToBufz
  1166 000026B5 5F                  <1>     pop rdi
  1167 000026B6 488D1522DEFFFF      <1>     lea rdx, searchSpec
  1168 000026BD B800560000          <1>     mov eax, 5600h
  1169 000026C2 CD21                <1>     int 21h
  1170                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000026C4 73(91)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1171 000026C6 E976F2FFFF          <1>     jmp badDupFnf   ;Always just return this
  1172                              <1> 
  1173                              <1> 
  1174                              <1> touch:
  1175                              <1> ;Temporarily used to create files
  1176 000026CB F605D6D9FFFFFF      <1>     test byte [arg1Flg], -1
  1177 000026D2 0F8457F2FFFF        <1>     jz badArgError
  1178 000026D8 E84D110000          <1>     call buildCommandPath
  1179 000026DD 488D15FBDDFFFF      <1>     lea rdx, searchSpec
  1180 000026E4 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1181 000026E9 31C9                <1>     xor ecx, ecx
  1182 000026EB CD21                <1>     int 21h
  1183 000026ED 721D                <1>     jc .touch1
  1184                              <1> .touchClose:
  1185 000026EF 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1186 000026F2 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1187 000026F7 CD2F                <1>     int 2fh
  1188 000026F9 89C1                <1>     mov ecx, eax    ;Move the time here
  1189 000026FB 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1190 000026FD B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1191 00002702 CD21                <1>     int 21h
  1192 00002704 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1193 00002709 CD21                <1>     int 21h
  1194                              <1>     return
    13                              <2> %%_ret:
    14 0000270B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1195                              <1> .touch1:
  1196 0000270C 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1197 0000270E 7509                <1>     jne .touchError ;If not, this is a proper error!
  1198 00002710 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1199 00002715 CD21                <1>     int 21h
  1200 00002717 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1201                              <1> .touchError:
  1202 00002719 3C03                <1>     cmp al, errPnf
  1203 0000271B 0F840EF2FFFF        <1>     je badArgError
  1204 00002721 3C02                <1>     cmp al, errFnf
  1205 00002723 0F8421F2FFFF        <1>     je badFnf
  1206 00002729 E9DDF1FFFF          <1>     jmp badAccError
  1207                              <1>     
  1208                              <1> 
  1209                              <1> join:
  1210                              <1> ;Mock join command, to test join. Make an external command.
  1211                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1212 0000272E F605AF000000FF      <1>     test byte [.joinOn], -1
  1213 00002735 743D                <1>     jz .okJoin
  1214                              <1> .joindisable:
  1215 00002737 B800520000          <1>     mov eax, 5200h  
  1216 0000273C CD21                <1>     int 21h
  1217                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1218 0000273E B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1219 00002743 CD2A                <1>     int 2Ah
  1220 00002745 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1221 00002749 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1222 0000274D 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1223 00002753 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1224 00002756 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1225 0000275A FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1226 0000275D B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1227 00002762 CD2A                <1>     int 2Ah
  1228 00002764 C6057900000000      <1>     mov byte [.joinOn], 0
  1229 0000276B 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1230 00002772 EB45                <1>     jmp short .joinExit
  1231                              <1> .okJoin:
  1232 00002774 C60569000000FF      <1>     mov byte [.joinOn], -1
  1233 0000277B B800520000          <1>     mov eax, 5200h  
  1234 00002780 CD21                <1>     int 21h
  1235 00002782 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1236 00002786 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1237                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1238 0000278A B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1239 0000278F CD2A                <1>     int 2Ah
  1240 00002791 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1241 00002797 4889DF              <1>     mov rdi, rbx
  1242 0000279A 488D3544000000      <1>     lea rsi, .joinPath
  1243 000027A1 B90C000000          <1>     mov ecx, .joinPathL
  1244 000027A6 F3A4                <1>     rep movsb   ;Copy chars over
  1245 000027A8 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1246 000027AB B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1247 000027B0 CD2A                <1>     int 2Ah
  1248 000027B2 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1249                              <1> .joinExit:
  1250 000027B9 B800090000          <1>     mov eax, 0900h
  1251 000027BE CD21                <1>     int 21h
  1252                              <1>     return
    13                              <2> %%_ret:
    14 000027C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1253 000027C1 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1253 000027CA 61626C65640D0A24    <1>
  1254 000027D2 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1254 000027DB 7361626C65640D0A24  <1>
  1255 000027E4 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1256 000027E5 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1256 000027EE 535400              <1>
  1257                              <1> .joinPathL  equ $ - .joinPath 
  1258                              <1> 
  1259                              <1> subst:
  1260                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1261                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1262 000027F1 F605D3000000FF      <1>     test byte [.substOn], -1
  1263 000027F8 7443                <1>     jz .okSubst
  1264                              <1> .substdisable:
  1265 000027FA B800520000          <1>     mov eax, 5200h  
  1266 000027FF CD21                <1>     int 21h
  1267                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1268 00002801 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1269 00002806 CD2A                <1>     int 2Ah
  1270 00002808 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1271 0000280C 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1272 00002813 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1273 00002819 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1274 0000281C C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1275 00002820 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1276 00002826 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1277 0000282B CD2A                <1>     int 2Ah
  1278 0000282D C6059700000000      <1>     mov byte [.substOn], 0
  1279 00002834 488D157D000000      <1>     lea rdx, .substDisableMsg
  1280 0000283B EB61                <1>     jmp short .substExit
  1281                              <1> .okSubst:
  1282 0000283D C60587000000FF      <1>     mov byte [.substOn], -1
  1283 00002844 B800520000          <1>     mov eax, 5200h  
  1284 00002849 CD21                <1>     int 21h
  1285 0000284B B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1286 00002850 CD2A                <1>     int 2Ah
  1287 00002852 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1288 00002856 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1289 0000285D 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1290 00002861 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1291 00002868 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1292 0000286C C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1293                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1294 00002873 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1295 00002879 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1296 0000287F 4889DF              <1>     mov rdi, rbx
  1297 00002882 488D3543000000      <1>     lea rsi, .substPath
  1298 00002889 B90C000000          <1>     mov ecx, .substPathL
  1299 0000288E F3A4                <1>     rep movsb   ;Copy chars over
  1300 00002890 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1301 00002895 CD2A                <1>     int 2Ah
  1302 00002897 488D1508000000      <1>     lea rdx, .substEnableMsg
  1303                              <1> .substExit:
  1304 0000289E B800090000          <1>     mov eax, 0900h
  1305 000028A3 CD21                <1>     int 21h
  1306                              <1>     return
    13                              <2> %%_ret:
    14 000028A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1307 000028A6 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1307 000028AF 6E61626C65640D0A24  <1>
  1308 000028B8 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1308 000028C1 697361626C65640D0A- <1>
  1308 000028CA 24                  <1>
  1309 000028CB 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1310 000028CC 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1310 000028D5 535400              <1>
  1311                              <1> .substPathL  equ $ - .substPath 
  1312                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1313                              <1> truename:
  1314 000028D8 F605C9D7FFFFFF      <1>     test byte [arg1Flg], -1
  1315 000028DF 0F844AF0FFFF        <1>     jz badArgError
  1316 000028E5 E8400F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1317 000028EA 488D35EEDBFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1318 000028F1 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1319 000028F4 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1320 000028F9 CD21                <1>     int 21h
  1321 000028FB 730D                <1>     jnc .writePath
  1322 000028FD 3C02                <1>     cmp al, errFnf
  1323 000028FF 0F8433F0FFFF        <1>     je badFileError
  1324 00002905 E913F0FFFF          <1>     jmp badParamError
  1325                              <1> .writePath:
  1326 0000290A 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1327 0000290D B9FFFFFFFF          <1>     mov ecx, -1
  1328 00002912 30C0                <1>     xor al, al
  1329 00002914 F2AE                <1>     repne scasb     ;Get the new len
  1330 00002916 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1331 00002918 FFC9                <1>     dec ecx
  1332 0000291A BB01000000          <1>     mov ebx, 01
  1333 0000291F B440                <1>     mov ah, 40h
  1334 00002921 CD21                <1>     int 21h
  1335 00002923 E83D0B0000          <1>     call printCRLF
  1336                              <1>     return
    13                              <2> %%_ret:
    14 00002928 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1337                              <1> 
  1338                              <1> label:
  1339                              <1> ;Displays/Changes/Deletes the file label
  1340 00002929 488D1508000000      <1>     lea rdx, .l1
  1341 00002930 B800090000          <1>     mov eax, 0900h
  1342 00002935 CD21                <1>     int 21h
  1343                              <1>     return
    13                              <2> %%_ret:
    14 00002937 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1344 00002938 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1344 00002941 6E20756E696D706C65- <1>
  1344 0000294A 6D656E7465640D0A24  <1>
  1345                              <1> 
  1346                              <1> mklbl:
  1347                              <1>     ;lea rdx, .l1
  1348                              <1>     ;mov cx, 08h ;Make a label
  1349                              <1>     ;mov eax, 3C00h
  1350                              <1>     ;int 21h
  1351                              <1> 
  1352                              <1>     ;mov ebx, eax
  1353                              <1>     ;mov eax, 3E00h  ;Close the handle
  1354                              <1>     ;int 21h
  1355                              <1>     ;return
  1356                              <1> 
  1357                              <1> ;.l1: db "TESTLABEL",0
  1358 00002953 488D1508000000      <1>     lea rdx, .l1
  1359 0000295A B800160000          <1>     mov eax, 1600h  ;Create FCB
  1360 0000295F CD21                <1>     int 21h
  1361                              <1>     return
    13                              <2> %%_ret:
    14 00002961 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1362                              <1> .l1:
  1363                              <1>     istruc exFcb
  1364 00002962 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1365 00002963 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1366 00002969 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1367 0000296A 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1368 00002972 4C2020              <1>     at exFcb.fileext,   db "L  "
  1369 00002975 00000000            <1>     at exFcb.curBlock,  dd 0
  1370 00002979 00<rep 15h>         <1>     iend 
  1371                              <1> rmlbl:
  1372 0000298E 488D1508000000      <1>     lea rdx, .l1
  1373 00002995 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1374 0000299A CD21                <1>     int 21h
  1375                              <1>     return
    13                              <2> %%_ret:
    14 0000299C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1376                              <1> .l1:    ;FCB to volume label
  1377                              <1>     istruc exFcb
  1378 0000299D FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1379 0000299E 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1380 000029A4 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1381 000029A5 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1382 000029AD 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1383 000029B0 00000000            <1>     at exFcb.curBlock,  dd 0
  1384 000029B4 00<rep 15h>         <1>     iend 
  1385                              <1> 
  1386                              <1> rnlbl:
  1387 000029C9 488D1508000000      <1>     lea rdx, .l1
  1388 000029D0 B800170000          <1>     mov eax, 1700h
  1389 000029D5 CD21                <1>     int 21h
  1390                              <1>     return
    13                              <2> %%_ret:
    14 000029D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1391                              <1> .l1:
  1392                              <1>     istruc exRenFcb
  1393 000029D8 FF                  <1>     at exRenFcb.extSig,     db -1
  1394 000029D9 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1395 000029DF 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1396 000029E0 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1397 000029E8 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1398 000029EB 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1398 000029F4 4C414245            <1>
  1399 000029F8 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1400 000029FB 00<rep 4h>          <1>     iend
  1401                              <1> volume:
  1402                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1403 000029FF F605A5D6FFFFFF      <1>     test byte [arg2Flg], -1
  1404 00002A06 0F8523EFFFFF        <1>     jnz badArgError
  1405 00002A0C F60595D6FFFFFF      <1>     test byte [arg1Flg], -1
  1406 00002A13 7507                <1>     jnz .notCurrentDrive
  1407 00002A15 E8620C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1408 00002A1A EB31                <1>     jmp short .dirEP
  1409                              <1> .notCurrentDrive:
  1410 00002A1C E8090E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1411 00002A21 488D35B7DAFFFF      <1>     lea rsi, searchSpec
  1412 00002A28 E8890C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1413 00002A2D 66AD                <1>     lodsw                   ;Get this word
  1414 00002A2F 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1415 00002A32 0F85F7EEFFFF        <1>     jne badArgError
  1416 00002A38 8A056CD6FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1417 00002A3E A8FF                <1>     test al, -1
  1418 00002A40 0F85E0EEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1419 00002A46 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1420 00002A4B FFC8                <1>     dec eax ;Convert to 0 based number
  1421                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1422 00002A4D E8C40E0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1423 00002A52 488D1520DCFFFF      <1>     lea rdx, volFcb
  1424 00002A59 FFC0                <1>     inc eax ;Get 1 based drive number
  1425 00002A5B 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1426 00002A5D 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1427 00002A60 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1428 00002A65 CD21                <1>     int 21h
  1429 00002A67 50                  <1>     push rax
  1430                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1431 00002A68 488D15D9DEFFFF      <1>     lea rdx, crlf
  1432 00002A6F B409                <1>     mov ah, 09h
  1433 00002A71 CD21                <1>     int 21h
  1434 00002A73 488D1553E1FFFF      <1>     lea rdx, volMes
  1435 00002A7A B409                <1>     mov ah, 09h
  1436 00002A7C CD21                <1>     int 21h
  1437 00002A7E 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1438 00002A80 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1439 00002A83 B402                <1>     mov ah, 02h
  1440 00002A85 CD21                <1>     int 21h
  1441 00002A87 58                  <1>     pop rax
  1442 00002A88 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1443 00002A8A 7409                <1>     jz .volIDOk
  1444 00002A8C 488D1551E1FFFF      <1>     lea rdx, volNo
  1445 00002A93 EB19                <1>     jmp short .volEndPrint
  1446                              <1> .volIDOk:
  1447 00002A95 488D1543E1FFFF      <1>     lea rdx, volOk
  1448 00002A9C B409                <1>     mov ah, 09h
  1449 00002A9E CD21                <1>     int 21h
  1450 00002AA0 C605D1D6FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1451 00002AA7 488D15BFD6FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1452                              <1> .volEndPrint:
  1453 00002AAE B409                <1>     mov ah, 09h
  1454 00002AB0 CD21                <1>     int 21h
  1455 00002AB2 488D158FDEFFFF      <1>     lea rdx, crlf
  1456 00002AB9 B409                <1>     mov ah, 09h
  1457 00002ABB CD21                <1>     int 21h
  1458                              <1>     return
    13                              <2> %%_ret:
    14 00002ABD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1459                              <1> 
  1460                              <1> version:
  1461 00002ABE 488D1583DEFFFF      <1>     lea rdx, crlf
  1462 00002AC5 B409                <1>     mov ah, 09h
  1463 00002AC7 CD21                <1>     int 21h
  1464 00002AC9 488D15EBE0FFFF      <1>     lea rdx, dosVer
  1465 00002AD0 B409                <1>     mov ah, 09h
  1466 00002AD2 CD21                <1>     int 21h
  1467 00002AD4 E80C000000          <1>     call .printVersionNumber
  1468 00002AD9 488D1568DEFFFF      <1>     lea rdx, crlf
  1469 00002AE0 B409                <1>     mov ah, 09h
  1470 00002AE2 CD21                <1>     int 21h
  1471                              <1>     return
    13                              <2> %%_ret:
    14 00002AE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1472                              <1> .printVersionNumber:
  1473 00002AE5 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1474 00002AE7 CD21                <1>     int 21h
  1475 00002AE9 50                  <1>     push rax
  1476 00002AEA 0FB6C0              <1>     movzx eax, al
  1477 00002AED E8710D0000          <1>     call printDecimalWord
  1478 00002AF2 B22E                <1>     mov dl, "."
  1479 00002AF4 B402                <1>     mov ah, 02h
  1480 00002AF6 CD21                <1>     int 21h
  1481 00002AF8 58                  <1>     pop rax
  1482 00002AF9 0FB6C4              <1>     movzx eax, ah
  1483 00002AFC E8620D0000          <1>     call printDecimalWord
  1484                              <1>     return
    13                              <2> %%_ret:
    14 00002B01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1485                              <1> 
  1486                              <1> 
  1487                              <1> memory:
  1488 00002B02 488B1D16D5FFFF      <1>     mov rbx, qword [sysVars]
  1489 00002B09 4885DB              <1>     test rbx, rbx
  1490 00002B0C 7510                <1>     jnz .sysvarsOK
  1491 00002B0E 488D156AE3FFFF      <1>     lea rdx, memBad0
  1492 00002B15 B409                <1>     mov ah, 09h
  1493 00002B17 CD21                <1>     int 21h
  1494 00002B19 E9E80D0000          <1>     jmp freezePC.altEP
  1495                              <1> .sysvarsOK:
  1496                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1497                              <1>     ; and rcx to store Application memory
  1498 00002B1E 31F6                <1>     xor esi, esi
  1499 00002B20 31FF                <1>     xor edi, edi
  1500 00002B22 31ED                <1>     xor ebp, ebp
  1501 00002B24 31C9                <1>     xor ecx, ecx
  1502 00002B26 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1503 00002B2A 488B1B              <1>     mov rbx, qword [rbx]
  1504                              <1> .memLp:
  1505 00002B2D 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1506 00002B30 7409                <1>     je .validMCB
  1507 00002B32 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1508 00002B35 0F8501010000        <1>     jne .badMCBFound
  1509                              <1> .validMCB:
  1510 00002B3B 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1511 00002B3E 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1512 00002B42 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1513 00002B4A 7505                <1>     jne .notDOS
  1514 00002B4C 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1515 00002B4F EB21                <1>     jmp short .gotoNext
  1516                              <1> .notDOS:
  1517 00002B51 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1518 00002B59 7505                <1>     jne .notFree
  1519 00002B5B 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1520 00002B5E EB12                <1>     jmp short .gotoNext
  1521                              <1> .notFree:
  1522 00002B60 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1523 00002B68 7505                <1>     jne .notHole
  1524 00002B6A 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1525 00002B6D EB03                <1>     jmp short .gotoNext
  1526                              <1> .notHole:
  1527 00002B6F 4801C1              <1>     add rcx, rax    ;Add to Application count
  1528                              <1> .gotoNext:
  1529 00002B72 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1530 00002B75 7407                <1>     je .endOfWalk
  1531 00002B77 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1532 00002B7C EBAF                <1>     jmp short .memLp
  1533                              <1> .endOfWalk:
  1534                              <1>     
  1535 00002B7E 488D155BE2FFFF      <1>     lea rdx, memDOS
  1536 00002B85 B409                <1>     mov ah, 09h
  1537 00002B87 CD21                <1>     int 21h
  1538 00002B89 4889F0              <1>     mov rax, rsi
  1539 00002B8C E89D000000          <1>     call .mcbPrintAmount
  1540 00002B91 488D15E0E2FFFF      <1>     lea rdx, memByte
  1541 00002B98 B409                <1>     mov ah, 09h
  1542 00002B9A CD21                <1>     int 21h
  1543                              <1> 
  1544 00002B9C 4885ED              <1>     test rbp, rbp
  1545 00002B9F 741E                <1>     jz .skipHole
  1546 00002BA1 488D1584E2FFFF      <1>     lea rdx, memHole
  1547 00002BA8 B409                <1>     mov ah, 09h
  1548 00002BAA CD21                <1>     int 21h
  1549 00002BAC 4889E8              <1>     mov rax, rbp
  1550 00002BAF E87A000000          <1>     call .mcbPrintAmount
  1551 00002BB4 488D15BDE2FFFF      <1>     lea rdx, memByte
  1552 00002BBB B409                <1>     mov ah, 09h
  1553 00002BBD CD21                <1>     int 21h
  1554                              <1> .skipHole:
  1555                              <1> 
  1556 00002BBF 488D1540E2FFFF      <1>     lea rdx, memApp
  1557 00002BC6 B409                <1>     mov ah, 09h
  1558 00002BC8 CD21                <1>     int 21h
  1559 00002BCA 4889C8              <1>     mov rax, rcx
  1560 00002BCD E85C000000          <1>     call .mcbPrintAmount
  1561 00002BD2 488D159FE2FFFF      <1>     lea rdx, memByte
  1562 00002BD9 B409                <1>     mov ah, 09h
  1563 00002BDB CD21                <1>     int 21h
  1564                              <1> 
  1565 00002BDD 488D156EE2FFFF      <1>     lea rdx, memFree
  1566 00002BE4 B409                <1>     mov ah, 09h
  1567 00002BE6 CD21                <1>     int 21h
  1568 00002BE8 4889F8              <1>     mov rax, rdi
  1569 00002BEB E83E000000          <1>     call .mcbPrintAmount
  1570 00002BF0 488D1581E2FFFF      <1>     lea rdx, memByte
  1571 00002BF7 B409                <1>     mov ah, 09h
  1572 00002BF9 CD21                <1>     int 21h
  1573                              <1> 
  1574 00002BFB 488D15B8E1FFFF      <1>     lea rdx, memSys
  1575 00002C02 B409                <1>     mov ah, 09h
  1576 00002C04 CD21                <1>     int 21h
  1577 00002C06 4889F0              <1>     mov rax, rsi
  1578 00002C09 4801F8              <1>     add rax, rdi
  1579 00002C0C 4801C8              <1>     add rax, rcx
  1580 00002C0F 4801E8              <1>     add rax, rbp
  1581 00002C12 E817000000          <1>     call .mcbPrintAmount
  1582 00002C17 488D155AE2FFFF      <1>     lea rdx, memByte
  1583 00002C1E B409                <1>     mov ah, 09h
  1584 00002C20 CD21                <1>     int 21h
  1585                              <1> 
  1586 00002C22 488D151FDDFFFF      <1>     lea rdx, crlf
  1587 00002C29 B409                <1>     mov ah, 09h
  1588 00002C2B CD21                <1>     int 21h
  1589                              <1>     return
    13                              <2> %%_ret:
    14 00002C2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1590                              <1> 
  1591                              <1> .mcbPrintAmount:
  1592 00002C2E 51                  <1>     push rcx
  1593 00002C2F 56                  <1>     push rsi
  1594 00002C30 57                  <1>     push rdi
  1595 00002C31 55                  <1>     push rbp
  1596 00002C32 E82C0C0000          <1>     call printDecimalWord
  1597 00002C37 5D                  <1>     pop rbp
  1598 00002C38 5F                  <1>     pop rdi
  1599 00002C39 5E                  <1>     pop rsi
  1600 00002C3A 59                  <1>     pop rcx
  1601                              <1>     return
    13                              <2> %%_ret:
    14 00002C3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1602                              <1> .badMCBFound:
  1603 00002C3C 488D157CE2FFFF      <1>     lea rdx, memBad2
  1604 00002C43 B409                <1>     mov ah, 09h
  1605 00002C45 CD21                <1>     int 21h
  1606 00002C47 E9BA0C0000          <1>     jmp freezePC.altEP
  1607                              <1> 
  1608                              <1> type:
  1609 00002C4C F60555D4FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1610 00002C53 0F84D6ECFFFF        <1>     jz badArgError
  1611 00002C59 F6054BD4FFFFFF      <1>     test byte [arg2Flg], -1
  1612 00002C60 0F85C9ECFFFF        <1>     jnz badArgError         ;If this set, error
  1613 00002C66 4C8B05A2D3FFFF      <1>     mov r8, [pspPtr]
  1614 00002C6D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1615 00002C74 0FB6052ED4FFFF      <1>     movzx eax, byte [arg1Off]
  1616 00002C7B 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1617 00002C7E 803E0D              <1>     cmp byte [rsi], CR
  1618 00002C81 0F84A8ECFFFF        <1>     je badArgError
  1619 00002C87 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1620 00002C8B 750F                <1>     jne .noDrive
  1621 00002C8D 0FB60516D4FFFF      <1>     movzx eax, byte [arg1FCBret]
  1622 00002C94 3CFF                <1>     cmp al, -1
  1623 00002C96 0F848AECFFFF        <1>     je badDriveError
  1624                              <1> .noDrive:
  1625                              <1>     ;Now we open the provided file
  1626 00002C9C E8890B0000          <1>     call buildCommandPath
  1627 00002CA1 488D1537D8FFFF      <1>     lea rdx, searchSpec
  1628 00002CA8 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1629 00002CAD CD21                <1>     int 21h
  1630 00002CAF 0F8283ECFFFF        <1>     jc badFileError
  1631 00002CB5 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1632 00002CBC 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1633                              <1> .lp:
  1634 00002CBF B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1635 00002CC4 B43F                <1>     mov ah, 3Fh ;Read handle
  1636 00002CC6 CD21                <1>     int 21h
  1637 00002CC8 89C1                <1>     mov ecx, eax
  1638 00002CCA 67E317              <1>     jecxz .exit
  1639 00002CCD 53                  <1>     push rbx    ;Save the original in handle
  1640 00002CCE BB01000000          <1>     mov ebx, 1  ;STDOUT
  1641 00002CD3 B440                <1>     mov ah, 40h
  1642 00002CD5 CD21                <1>     int 21h
  1643 00002CD7 5B                  <1>     pop rbx ;Get back the original read handle
  1644 00002CD8 720F                <1>     jc .exitBad
  1645 00002CDA 39C8                <1>     cmp eax, ecx
  1646 00002CDC 74E1                <1>     je .lp
  1647 00002CDE FFC9                <1>     dec ecx ;One less for a ^Z
  1648 00002CE0 39C8                <1>     cmp eax, ecx
  1649 00002CE2 7505                <1>     jne .exitBad
  1650                              <1> .exit:
  1651 00002CE4 B43E                <1>     mov ah, 3Eh ;Close handle
  1652 00002CE6 CD21                <1>     int 21h
  1653                              <1>     return
    13                              <2> %%_ret:
    14 00002CE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1654                              <1> .exitBad:
  1655                              <1>     ;If it is a char device, don't print an error
  1656 00002CE9 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  1657 00002CEE BB01000000          <1>     mov ebx, 1
  1658 00002CF3 CD21                <1>     int 21h
  1659 00002CF5 F6C280              <1>     test dl, devCharDev
  1660                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002CF8 75(E8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1661 00002CFA E9D5EBFFFF          <1>     jmp badDiskFull
  1662                              <1> 
  1663                              <1> exit:
  1664 00002CFF F60525D3FFFFFF      <1>     test byte [permaSwitch], -1
  1665                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D06 75(E8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1666 00002D08 488B0508D3FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1667 00002D0F 483DFFFFFFFF        <1>     cmp rax, -1
  1668                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D15 74(E8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1669 00002D17 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1670                              <1> 
  1671 00002D1B 488B150AD3FFFF      <1>     mov rdx, qword [parentInt22]
  1672 00002D22 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1673 00002D26 B822250000          <1>     mov eax, 2522h
  1674 00002D2B CD21                <1>     int 21h
  1675                              <1> 
  1676 00002D2D B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1677 00002D32 CD21                <1>     int 21h
  1678                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002D34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1679                              <1> 
  1680                              <1> launchChild:
  1681                              <1>     ;We execute an external command here.
  1682                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1683                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1684                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1685                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1686                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1687 00002D35 E8DC0B0000          <1>     call setDTA         
  1688                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1689 00002D3A 488D3DF5D5FFFF      <1>     lea rdi, cmdPathSpec
  1690 00002D41 4889FE              <1>     mov rsi, rdi
  1691 00002D44 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  1692 00002D49 CD2F                <1>     int 2fh
  1693 00002D4B E81D0A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1694 00002D50 4889FE              <1>     mov rsi, rdi    ;Source here
  1695 00002D53 488D3DFBD3FFFF      <1>     lea rdi, cmdFcb
  1696 00002D5A B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1697 00002D5F CD21                <1>     int 21h
  1698 00002D61 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1699 00002D63 0F8500ECFFFF        <1>     jnz badCmdError
  1700 00002D69 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1701                              <1> .pathLoop:
  1702 00002D6C 488D35EBD3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1703 00002D73 488D3DBFE1FFFF      <1>     lea rdi, extStr
  1704 00002D7A BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1705                              <1> .extLp:
  1706 00002D7F 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1707 00002D80 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1708 00002D85 F3A6                <1>     rep cmpsb   ;Compare the two strings
  1709 00002D87 5E                  <1>     pop rsi
  1710 00002D88 85C9                <1>     test ecx, ecx
  1711 00002D8A 7455                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1712 00002D8C 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1713 00002D8F FFCA                <1>     dec edx         ;Else one less extension type to check
  1714 00002D91 75EC                <1>     jnz .extLp
  1715                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1716                              <1>     ;If not, error.
  1717 00002D93 B903000000          <1>     mov ecx, 3
  1718 00002D98 4889F7              <1>     mov rdi, rsi
  1719 00002D9B B020                <1>     mov al, SPC
  1720 00002D9D F3AE                <1>     rep scasb   
  1721 00002D9F 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1722 00002DA1 0F85C2EBFFFF        <1>     jnz badCmdError    ;If not, error!
  1723                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1724 00002DA7 488D358BE1FFFF      <1>     lea rsi, extStr
  1725 00002DAE BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1726                              <1> .extSrchLp:
  1727 00002DB3 488D3DA4D3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1728 00002DBA B903000000          <1>     mov ecx, 3
  1729 00002DBF F3A4                <1>     rep movsb   ;Copy the extension over!
  1730 00002DC1 E8C6010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1731 00002DC6 7324                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1732 00002DC8 FFCB                <1>     dec ebx                 ;Decrement extension counter
  1733 00002DCA 75E7                <1>     jnz .extSrchLp
  1734                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1735                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1736                              <1> ; by setting the fcb extension back to all spaces.
  1737 00002DCC 488D3D8BD3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1738 00002DD3 B903000000          <1>     mov ecx, 3
  1739 00002DD8 B020                <1>     mov al, SPC
  1740 00002DDA F3AA                <1>     rep stosb   ;Store back the empty extension!
  1741 00002DDC E9B9000000          <1>     jmp .pathHandle
  1742                              <1> .extFnd:
  1743                              <1> ;Here if the file had the right extension.
  1744 00002DE1 E8A6010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1745 00002DE6 0F82AE000000        <1>     jc .pathHandle
  1746                              <1> .extSrchFnd:
  1747                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1748                              <1> ; a BAT. If it is, separate handling!
  1749 00002DEC 803D6BD3FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1750 00002DF3 0F845F010000        <1>     je .batLaunch
  1751 00002DF9 488D1D90D3FFFF      <1>     lea rbx, launchBlock
  1752 00002E00 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1753 00002E04 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1754 00002E07 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1755 00002E0E 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1756 00002E12 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1757 00002E16 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1758 00002E1A 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1759 00002E1E 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1760 00002E22 488D150DD5FFFF      <1>     lea rdx, cmdPathSpec
  1761 00002E29 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1762 00002E2E CD21                <1>     int 21h
  1763                              <1> ;If the program failed to start, verify why!
  1764 00002E30 B800590000          <1>     mov eax, 5900h      ;Get extended error
  1765 00002E35 31DB                <1>     xor ebx, ebx
  1766 00002E37 CD21                <1>     int 21h
  1767 00002E39 668905CDD1FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  1768 00002E40 3C05                <1>     cmp al, errAccDen   ;Access denied?
  1769 00002E42 0F84C3EAFFFF        <1>     je badAccError
  1770 00002E48 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  1771 00002E4A 0F84AB0A0000        <1>     je freezePC
  1772 00002E50 E914EBFFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  1773                              <1> .appRet:  ;Return point from a task
  1774 00002E55 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
  1775 00002E5A CD21                <1>     int 21h
  1776 00002E5C 668905AAD1FFFF      <1>     mov word [returnCode], ax
  1777                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
  1778 00002E63 488D15280C0000      <1>     lea rdx, critErrorHandler
  1779 00002E6A 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
  1780 00002E6E B824250000          <1>     mov eax, 2524h
  1781 00002E73 CD21                <1>     int 21h
  1782 00002E75 488D15B10E0000      <1>     lea rdx, int23h
  1783 00002E7C 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
  1784 00002E80 B823250000          <1>     mov eax, 2523h
  1785 00002E85 CD21                <1>     int 21h
  1786 00002E87 488D15C7FFFFFF      <1>     lea rdx, .appRet
  1787 00002E8E 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1788 00002E92 B822250000          <1>     mov eax, 2522h
  1789 00002E97 CD21                <1>     int 21h
  1790                              <1>     return  ;Now return to main loop
    13                              <2> %%_ret:
    14 00002E99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1791                              <1> .pathHandle:        
  1792                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  1793                              <1> ;al has error code!
  1794 00002E9A 4885ED              <1>     test rbp, rbp
  1795 00002E9D 0F85A3000000        <1>     jnz .pathReentry
  1796                              <1> ;Now check if the command we recieved included an absolute path.
  1797                              <1> ;If so, we don't do path substitution and just fail at this point
  1798 00002EA3 488D358CD4FFFF      <1>     lea rsi, cmdPathSpec
  1799 00002EAA 66AD                <1>     lodsw   ;Get the first two chars
  1800 00002EAC 3A0577D1FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1801 00002EB2 0F84B1EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1802 00002EB8 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1803 00002EBA 7412                <1>     je .pathGetEnv
  1804 00002EBC 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1805 00002EBF 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1806 00002EC1 AC                  <1>     lodsb   ;Get the third char
  1807 00002EC2 3A0561D1FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  1808 00002EC8 0F849BEAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1809                              <1> .pathGetEnv:
  1810                              <1> ;Now get a pointer to the environment and search for PATH=
  1811                              <1> ;We only take the final portion of the path and add it to each path componant
  1812                              <1> ;This agrees with DOS 3.3
  1813 00002ECE E8790A0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  1814 00002ED3 0F8490EAFFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  1815                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  1816                              <1>     ;Now we know we dont have to keep track of chars!!
  1817 00002ED9 488D3D7DE0FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  1818 00002EE0 E8C10A0000          <1>     call searchForEnvVar
  1819 00002EE5 0F827EEAFFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  1820 00002EEB 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  1821 00002EEE 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  1822                              <1> .pathRejoin:
  1823 00002EF5 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  1824 00002EF8 0F846BEAFFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  1825 00002EFE 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  1826 00002F01 488D3DD7D5FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  1827                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  1828                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  1829                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  1830                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  1831 00002F08 E8C4080000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  1832 00002F0D 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  1833 00002F10 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  1834 00002F13 48FFCF              <1>     dec rdi ;Point to the null terminator
  1835 00002F16 8A050DD1FFFF        <1>     mov al, byte [pathSep]
  1836 00002F1C 3847FF              <1>     cmp byte [rdi - 1], al
  1837 00002F1F 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  1838 00002F21 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  1839                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  1840 00002F22 488D352DD2FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1841 00002F29 E863080000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  1842 00002F2E 488D35AAD5FFFF      <1>     lea rsi, searchSpec 
  1843 00002F35 488D3DFAD3FFFF      <1>     lea rdi, cmdPathSpec
  1844 00002F3C E840070000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  1845 00002F41 E926FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  1846                              <1> .pathReentry:
  1847 00002F46 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  1848 00002F4A 0F8419EAFFFF        <1>     je badCmdError
  1849                              <1> ;Currently, because we dont swap drives, we wont print this message.
  1850                              <1> ;Not really a big deal...
  1851                              <1>     ;cmp al, errBadDrv
  1852                              <1>     ;jne .pathDrvOk
  1853                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  1854                              <1>     ;mov eax, 0900h
  1855                              <1>     ;int 21h
  1856                              <1> ;.pathDrvOk:
  1857 00002F50 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  1858 00002F53 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  1859 00002F56 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  1860                              <1> 
  1861                              <1> .batLaunch:
  1862 00002F58 488D1508000000      <1>     lea rdx, .batMsg
  1863 00002F5F B800090000          <1>     mov eax, 0900h
  1864 00002F64 CD21                <1>     int 21h
  1865                              <1>     return
    13                              <2> %%_ret:
    14 00002F66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1866 00002F67 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  1866 00002F70 70726F636573736F72- <1>
  1866 00002F79 206E6F7420696D706C- <1>
  1866 00002F82 656D656E7465640D0A- <1>
  1866 00002F8B 24                  <1>
  1867                              <1> 
  1868                              <1> .prepAndSearch:
  1869                              <1> ;Copies over the name and extension in UC to the last componant of the 
  1870                              <1> ;cmdPathSpec and null terminates. 
  1871                              <1> ;Input: cmdFcb name + ext setup. 
  1872                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  1873                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  1874 00002F8C 51                  <1>     push rcx
  1875 00002F8D 56                  <1>     push rsi
  1876 00002F8E 57                  <1>     push rdi
  1877 00002F8F 488D3DA0D3FFFF      <1>     lea rdi, cmdPathSpec 
  1878 00002F96 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  1879 00002F99 E8CF070000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  1880 00002F9E 488D35B1D1FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1881 00002FA5 E8E7070000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  1882 00002FAA B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1883 00002FAF 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  1884 00002FB1 CD21                <1>     int 21h
  1885 00002FB3 5F                  <1>     pop rdi
  1886 00002FB4 5E                  <1>     pop rsi
  1887 00002FB5 59                  <1>     pop rcx
  1888                              <1>     return
    13                              <2> %%_ret:
    14 00002FB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1889                              <1> 
  1890                              <1> set:
  1891 00002FB7 F605EAD0FFFFFF      <1>     test byte [arg1Flg], -1
  1892 00002FBE 7539                <1>     jnz .editEnv
  1893                              <1>     ;Here we just print the environment.
  1894 00002FC0 E887090000          <1>     call checkEnvGoodAndGet 
  1895 00002FC5 0F8437E9FFFF        <1>     jz badEnvSpaceError
  1896                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  1897 00002FCB 4889F7              <1>     mov rdi, rsi
  1898 00002FCE 4889F2              <1>     mov rdx, rsi
  1899                              <1> .findLp:
  1900 00002FD1 B9FFFFFFFF          <1>     mov ecx, -1
  1901 00002FD6 31C0                <1>     xor eax, eax
  1902                              <1> .scanLp:
  1903 00002FD8 F2AE                <1>     repne scasb
  1904 00002FDA 75FC                <1>     jne .scanLp
  1905 00002FDC F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  1906                              <1>     ;Else, we now print this environment variable and CRLF it
  1907                              <1>     ;rdx points to the start of the string aleady
  1908                              <1>     ;ecx has the bytes to print
  1909 00002FDE BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  1910 00002FE3 B800400000          <1>     mov eax, 4000h  ;Print to handle
  1911 00002FE8 CD21                <1>     int 21h
  1912 00002FEA E876040000          <1>     call printCRLF
  1913 00002FEF 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  1914                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FF2 74(B6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1915 00002FF4 4889FA              <1>     mov rdx, rdi   
  1916 00002FF7 EBD8                <1>     jmp short .findLp
  1917                              <1> .editEnv:
  1918 00002FF9 E84E090000          <1>     call checkEnvGoodAndGet
  1919 00002FFE 0F84FEE8FFFF        <1>     jz badEnvSpaceError
  1920 00003004 0FB6059ED0FFFF      <1>     movzx eax, byte [arg1Off]
  1921 0000300B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1922 00003012 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  1923                              <1> .altEp:
  1924 00003015 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  1925 00003018 B00D                <1>     mov al, CR              ;Search for the CR
  1926 0000301A 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  1927 00003022 89CB                <1>     mov ebx, ecx            ;Save this count 
  1928 00003024 53                  <1>     push rbx                ;Save this count on the stack too!
  1929 00003025 F2AE                <1>     repne scasb             ;Now get the length of this env string
  1930 00003027 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  1931 00003029 66891D1ED8FFFF      <1>     mov word [envVarSz], bx ;Store the count
  1932 00003030 59                  <1>     pop rcx                 ;Get the char count back!
  1933 00003031 89CB                <1>     mov ebx, ecx            
  1934 00003033 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  1935 00003036 B03D                <1>     mov al, "="             ;Scan for an equals sign
  1936 00003038 F2AE                <1>     repne scasb
  1937 0000303A 0F85B9E8FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  1938 00003040 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  1939 00003042 66891D07D8FFFF      <1>     mov word [envVarNamSz], bx
  1940 00003049 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  1941 0000304C 7477                <1>     je .delEnvVar           ;Free the envvar and return
  1942 0000304E 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  1943 0000304F 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  1944 00003052 E84F090000          <1>     call searchForEnvVar    ;Look for the environment variable
  1945 00003057 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  1946 00003059 E876090000          <1>     call envFree            ;Free the var in rsi
  1947                              <1> .editNewEnv:
  1948 0000305E E8AA090000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  1949 00003063 E8CA090000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  1950 00003068 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  1951 00003069 31C0                <1>     xor eax, eax            ;Prepare null length!
  1952 0000306B 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  1953 00003071 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  1954 00003074 720B                <1>     jb .reallocTry          ;Try to reallocate!
  1955 00003076 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  1956 00003078 663B0DCFD7FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  1957 0000307F 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  1958                              <1> .reallocTry:
  1959                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  1960                              <1>     ; we proceed with the environment size.
  1961 00003081 E8C1090000          <1>     call growEnvBlock   ;Attempt to grow the environment
  1962 00003086 7319                <1>     jnc .reallocOk
  1963 00003088 0F8474E8FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  1964                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  1965                              <1>     ; partially the variable into the env. If so we do that. If the name
  1966                              <1>     ; cannot fit, we don't bother
  1967                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  1968 0000308E 663B0DBBD7FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  1969                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003095 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003097 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1970 00003098 E865E8FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  1971 0000309D FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  1972 0000309F EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  1973                              <1> .reallocOk:
  1974                              <1>     ;Here we have all the space to just copy the full path
  1975 000030A1 0FB70DA6D7FFFF      <1>     movzx ecx, word [envVarSz]
  1976                              <1> .nameCp:
  1977                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  1978                              <1> ;Always enough memory for name= here
  1979 000030A8 AC                  <1>     lodsb
  1980 000030A9 E8F6050000          <1>     call ucChar
  1981 000030AE AA                  <1>     stosb
  1982 000030AF 66FFC9              <1>     dec cx      ;Always decrement this count
  1983 000030B2 3C3D                <1>     cmp al, "="
  1984 000030B4 75F2                <1>     jne .nameCp
  1985                              <1> .exitNameCp:
  1986 000030B6 AC                  <1>     lodsb
  1987 000030B7 3C0D                <1>     cmp al, CR
  1988 000030B9 7405                <1>     je .exitCp
  1989 000030BB AA                  <1>     stosb
  1990 000030BC FFC9                <1>     dec ecx
  1991 000030BE 75F6                <1>     jnz .exitNameCp
  1992                              <1> .exitCp:
  1993 000030C0 31C0                <1>     xor eax, eax
  1994 000030C2 66AB                <1>     stosw   ;Store the final null word
  1995                              <1>     return
    13                              <2> %%_ret:
    14 000030C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1996                              <1> .delEnvVar:
  1997                              <1>     ;rsi -> Start of the envvar name in user buffer
  1998 000030C5 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  1999 000030C8 E8D9080000          <1>     call searchForEnvVar    ;Look for the environment variable
  2000 000030CD 7205                <1>     jc .delEnvVarSkip
  2001 000030CF E800090000          <1>     call envFree    ;Free the env var at rsi
  2002                              <1> .delEnvVarSkip:
  2003 000030D4 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2004                              <1>     return
    13                              <2> %%_ret:
    14 000030D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2005                              <1> 
  2006                              <1> pathEdit:
  2007                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2008                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2009                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2010                              <1> ; end there. Error with too many arguments error!
  2011                              <1> ;If after the equals sign there is nothing, we just print the path!
  2012                              <1> ;Gotta process the command line ourselves first
  2013 000030D6 E871080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2014 000030DB 0F8421E8FFFF        <1>     jz badEnvSpaceError
  2015                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2016 000030E1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2017 000030E8 E8AD000000          <1>     call .skipPathDelimiters
  2018 000030ED 3C0D                <1>     cmp al, CR
  2019 000030EF 7466                <1>     je .printPath
  2020                              <1> ;Else use the set command to setup the path in the searchSpec.
  2021 000030F1 56                  <1>     push rsi    ;Save the first char of the command line string
  2022 000030F2 488D3564DEFFFF      <1>     lea rsi, pathEVar
  2023 000030F9 488D3DDFD3FFFF      <1>     lea rdi, searchSpec
  2024 00003100 E87C050000          <1>     call strcpy
  2025 00003105 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2026 00003108 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2027 00003109 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2028                              <1> .cpLp:
  2029 0000310B AC                  <1>     lodsb
  2030 0000310C 3C0D                <1>     cmp al, CR
  2031 0000310E 7411                <1>     je .cpLpExit
  2032 00003110 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2033 00003115 740A                <1>     je .cpLpExit
  2034 00003117 E888050000          <1>     call ucChar ;Uppercase the char
  2035 0000311C AA                  <1>     stosb       ;Store it
  2036 0000311D FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2037 0000311F EBEA                <1>     jmp short .cpLp
  2038                              <1> .cpLpExit:
  2039                              <1>     ;Remove trailing semicolons
  2040 00003121 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2041 00003125 7507                <1>     jne .cpLpNoIntervene
  2042 00003127 FFC9                <1>     dec ecx     ;Reduce the count by one
  2043 00003129 48FFCF              <1>     dec rdi     ;Go back a char
  2044 0000312C EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2045                              <1> .cpLpNoIntervene:
  2046 0000312E B00D                <1>     mov al, CR  ;Now we store the terminator!
  2047 00003130 AA                  <1>     stosb       ;Store it!
  2048 00003131 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2049 00003137 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2050 0000313E FFC1                <1>     inc ecx     ;Add the CR for copying over
  2051 00003140 488D3598D3FFFF      <1>     lea rsi, searchSpec
  2052 00003147 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2053 0000314E 57                  <1>     push rdi
  2054 0000314F F3A4                <1>     rep movsb
  2055 00003151 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2056 00003152 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2057                              <1> .printPath:
  2058 00003157 488D3DFFDDFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2059 0000315E E843080000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2060 00003163 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2061 00003165 4889F7              <1>     mov rdi, rsi        
  2062 00003168 E82D050000          <1>     call strlen         ;Get the length of the path in rdi
  2063 0000316D 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2064 00003173 7411                <1>     je .noPathPrnt      ;Print no path!
  2065 00003175 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2066 00003177 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2067 0000317A BB01000000          <1>     mov ebx, 1          ;STDOUT
  2068 0000317F B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2069 00003184 EB0C                <1>     jmp short .pathExit
  2070                              <1> .noPathPrnt:
  2071 00003186 488D15DDDAFFFF      <1>     lea rdx, noPath
  2072 0000318D B800090000          <1>     mov eax, 0900h
  2073                              <1> .pathExit:
  2074 00003192 CD21                <1>     int 21h
  2075 00003194 E8CC020000          <1>     call printCRLF      ;Print a crlf at the end
  2076                              <1>     return
    13                              <2> %%_ret:
    14 00003199 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2077                              <1> 
  2078                              <1> .skipPathDelimiters:
  2079                              <1> ;Input: rsi -> Start of string to parse
  2080                              <1> ;Output: rsi -> First non-delimiter char of string
  2081                              <1> ;        al = First non delim char
  2082 0000319A AC                  <1>     lodsb
  2083 0000319B E806000000          <1>     call .isALPathDelimiter
  2084 000031A0 74F8                <1>     je .skipPathDelimiters
  2085 000031A2 48FFCE              <1>     dec rsi
  2086                              <1>     return
    13                              <2> %%_ret:
    14 000031A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2087                              <1> .isALPathDelimiter:
  2088                              <1> ;Same as before without semicolon
  2089 000031A6 3C20                <1>     cmp al, SPC
  2090                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000031A8 74(A5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2091 000031AA 3C09                <1>     cmp al, TAB
  2092                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000031AC 74(A5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2093 000031AE 3C2C                <1>     cmp al, ","
  2094                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000031B0 74(A5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2095 000031B2 3C3D                <1>     cmp al, "="
  2096                              <1>     return
    13                              <2> %%_ret:
    14 000031B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2097                              <1> 
  2098                              <1> prompt:
  2099 000031B5 E892070000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2100 000031BA 0F8442E7FFFF        <1>     jz badEnvSpaceError
  2101                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2102 000031C0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2103 000031C7 E8EA040000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2104 000031CC 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2105 000031CF 742C                <1>     je .reset   ;Reset if so
  2106 000031D1 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2107 000031D2 488D3558DDFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2108 000031D9 488D3DFFD2FFFF      <1>     lea rdi, searchSpec
  2109 000031E0 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2110 000031E5 F3A4                <1>     rep movsb
  2111 000031E7 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2112 000031E8 31C9                <1>     xor ecx, ecx    ;Get char count
  2113                              <1> .cp:    ;Now copy the user string over
  2114 000031EA AC                  <1>     lodsb
  2115 000031EB AA                  <1>     stosb 
  2116 000031EC 3C0D                <1>     cmp al, CR
  2117 000031EE 7404                <1>     je .cpOk
  2118 000031F0 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2119 000031F2 EBF6                <1>     jmp short .cp
  2120                              <1> .cpOk:
  2121 000031F4 488D35E4D2FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2122 000031FB EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2123                              <1> .reset:
  2124                              <1> ;Delete the environment variable!
  2125 000031FD 488D352DDDFFFF      <1>     lea rsi, promptEVar 
  2126 00003204 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2127                              <1> .goSet:
  2128 00003206 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2129 0000320C 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2130 00003213 FFC1                <1>     inc ecx     ;Include CR in copy
  2131 00003215 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2132 0000321C 57                  <1>     push rdi
  2133 0000321D F3A4                <1>     rep movsb
  2134 0000321F 5E                  <1>     pop rsi
  2135 00003220 E9F0FDFFFF          <1>     jmp set.altEp
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003225 53                  <1>     push rbx
    11 00003226 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003228 803D05CEFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 0000322F 7240                <1>     jb .usDate
    14 00003231 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003233 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003238 E8B0000000          <1>     call .printFirst
    18 0000323D 8A15FCCDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003243 B402                <1>     mov ah, 02h
    20 00003245 CD21                <1>     int 21h
    21                              <1> 
    22 00003247 89C8                <1>     mov eax, ecx
    23 00003249 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 0000324E C1E805              <1>     shr eax, 5
    25 00003251 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003256 8A15E3CDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 0000325C B402                <1>     mov ah, 02h
    29 0000325E CD21                <1>     int 21h
    30                              <1> 
    31 00003260 89C8                <1>     mov eax, ecx
    32 00003262 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00003267 C1E809              <1>     shr eax, 9
    34 0000326A 5B                  <1>     pop rbx ;Get the year signature back
    35 0000326B E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003270 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003271 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003276 C1E805              <1>     shr eax, 5
    41 00003279 E86F000000          <1>     call .printFirst
    42                              <1> 
    43 0000327E 8A15BBCDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003284 B402                <1>     mov ah, 02h
    45 00003286 CD21                <1>     int 21h
    46                              <1> 
    47 00003288 89C8                <1>     mov eax, ecx
    48 0000328A 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 0000328F E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003294 8A15A5CDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 0000329A B402                <1>     mov ah, 02h
    53 0000329C CD21                <1>     int 21h
    54                              <1> 
    55 0000329E 89C8                <1>     mov eax, ecx
    56 000032A0 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 000032A5 C1E809              <1>     shr eax, 9
    58 000032A8 5B                  <1>     pop rbx ;Get the year signature back
    59 000032A9 E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 000032AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 000032AF 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000032B4 C1E809              <1>     shr eax, 9
    65 000032B7 5B                  <1>     pop rbx ;Get the year signature back
    66 000032B8 E85C000000          <1>     call .printYear
    67                              <1> 
    68 000032BD 8A157CCDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 000032C3 B402                <1>     mov ah, 02h
    70 000032C5 CD21                <1>     int 21h
    71                              <1> 
    72 000032C7 89C8                <1>     mov eax, ecx
    73 000032C9 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 000032CE C1E805              <1>     shr eax, 5
    75 000032D1 E833000000          <1>     call .printSecond
    76                              <1> 
    77 000032D6 8A1563CDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 000032DC B402                <1>     mov ah, 02h
    79 000032DE CD21                <1>     int 21h
    80                              <1> 
    81 000032E0 89C8                <1>     mov eax, ecx
    82 000032E2 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000032E7 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000032EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000032ED 51                  <1>     push rcx
    89 000032EE E8E1050000          <1>     call getDecimalWord
    90 000032F3 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 000032F5 7504                <1>     jnz .skipSpace
    92 000032F7 88CD                <1>     mov ch, cl
    93 000032F9 B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 000032FB 88CA                <1>     mov dl, cl
    96 000032FD B402                <1>     mov ah, 02h
    97 000032FF CD21                <1>     int 21h
    98 00003301 88EA                <1>     mov dl, ch
    99 00003303 B402                <1>     mov ah, 02h
   100 00003305 CD21                <1>     int 21h
   101 00003307 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00003308 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00003309 51                  <1>     push rcx
   105 0000330A E8C5050000          <1>     call getDecimalWord
   106 0000330F 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00003311 75E8                <1>     jnz .skipSpace
   108 00003313 88CD                <1>     mov ch, cl
   109 00003315 B130                <1>     mov cl, "0"
   110 00003317 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00003319 05BC070000          <1>     add eax, 1980
   113 0000331E 51                  <1>     push rcx
   114 0000331F 53                  <1>     push rbx
   115 00003320 E8AF050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00003325 5B                  <1>     pop rbx
   117 00003326 84DB                <1>     test bl, bl
   118 00003328 740C                <1>     jz .twoDigitYear
   119 0000332A 88CA                <1>     mov dl, cl  ;Print the first digit
   120 0000332C B402                <1>     mov ah, 02h
   121 0000332E CD21                <1>     int 21h
   122 00003330 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003332 B402                <1>     mov ah, 02h
   124 00003334 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00003336 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00003339 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 0000333B B402                <1>     mov ah, 02h
   129 0000333D CD21                <1>     int 21h
   130 0000333F 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003341 B402                <1>     mov ah, 02h
   132 00003343 CD21                <1>     int 21h
   133 00003345 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00003346 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00003347 89C1                <1>     mov ecx, eax
   142 00003349 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 0000334E C1E80B              <1>     shr eax, 11
   144 00003351 803DEDCCFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00003358 750B                <1>     jne .ampm
   146 0000335A E85A000000          <1>     call .printHours
   147 0000335F E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003364 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003365 3D0C000000          <1>     cmp eax, 12
   151 0000336A 7713                <1>     ja .pm
   152 0000336C 7416                <1>     je .pm2
   153 0000336E E846000000          <1>     call .printHours
   154 00003373 E81D000000          <1>     call .printMinutes
   155 00003378 B261                <1>     mov dl, "a"
   156 0000337A B402                <1>     mov ah, 02h
   157 0000337C CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 0000337E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 0000337F 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003384 E830000000          <1>     call .printHours
   163 00003389 E807000000          <1>     call .printMinutes
   164 0000338E B270                <1>     mov dl, "p"
   165 00003390 B402                <1>     mov ah, 02h
   166 00003392 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003394 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00003395 8A15A6CCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 0000339B B402                <1>     mov ah, 02h
   171 0000339D CD21                <1>     int 21h
   172                              <1> 
   173 0000339F 89C8                <1>     mov eax, ecx
   174 000033A1 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 000033A6 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 000033A9 51                  <1>     push rcx
   178 000033AA E825050000          <1>     call getDecimalWord
   179 000033AF 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 000033B1 7514                <1>     jnz .skipSpace
   181 000033B3 88CD                <1>     mov ch, cl
   182 000033B5 B130                <1>     mov cl, "0"
   183 000033B7 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 000033B9 51                  <1>     push rcx
   186 000033BA E815050000          <1>     call getDecimalWord
   187 000033BF 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 000033C1 7504                <1>     jnz .skipSpace
   189 000033C3 88CD                <1>     mov ch, cl
   190 000033C5 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 000033C7 88CA                <1>     mov dl, cl
   193 000033C9 B402                <1>     mov ah, 02h
   194 000033CB CD21                <1>     int 21h
   195 000033CD 88EA                <1>     mov dl, ch
   196 000033CF B402                <1>     mov ah, 02h
   197 000033D1 CD21                <1>     int 21h
   198 000033D3 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 000033D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 000033D5 488D3D55DBFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   203 000033DC E8C5050000          <1>     call searchForEnvVar
   204 000033E1 730B                <1>     jnc .validPrompt
   205                              <1>     ;Here we print the default prompt
   206 000033E3 E8F9000000          <1>     call putCWDInPrompt
   207 000033E8 E8C5000000          <1>     call putGTinPrompt
   208                              <1>     return
    13                              <2> %%_ret:
    14 000033ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   209                              <1> .validPrompt:
   210                              <1> ;rsi points to the prompt
   211 000033EE 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   212                              <1> .promptLp:
   213 000033F5 AC                  <1>     lodsb   ;Get the char
   214 000033F6 84C0                <1>     test al, al
   215                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000033F8 74(ED)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   216 000033FA 3C24                <1>     cmp al, "$"
   217 000033FC 7409                <1>     je .escapeChar
   218 000033FE 88C2                <1>     mov dl, al
   219 00003400 E8D7000000          <1>     call outChar    ;Prints the char in dl
   220 00003405 EBEE                <1>     jmp short .promptLp
   221                              <1> .escapeChar:
   222 00003407 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   223 00003408 E897020000          <1>     call ucChar ;Uppercase this char in al
   224 0000340D 488D1D2A000000      <1>     lea rbx, .pTbl
   225 00003414 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   226                              <1> .escapeLp:
   227 00003419 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   228 0000341B 740D                <1>     je .escapeFnd
   229 0000341D 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   230 00003424 FFC9                <1>     dec ecx
   231 00003426 75F1                <1>     jnz .escapeLp
   232 00003428 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   233                              <1> .escapeFnd:
   234 0000342A 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   235 00003431 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   236 00003435 4801D8              <1>     add rax, rbx                ;Add these
   237 00003438 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   238 00003439 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   239 0000343B 5E                  <1>     pop rsi
   240 0000343C EBB7                <1>     jmp short .promptLp
   241                              <1> 
   242                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   243                              <1> .pTbl:
   244 0000343E 42                  <1>     db "B", 
   245 0000343F 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   246 00003441 44                  <1>     db "D", 
   247 00003442 5801                <1>     dw printFmtDate - .pTbl        ;Current date
   248 00003444 45                  <1>     db "E", 
   249 00003445 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   250 00003447 47                  <1>     db "G", 
   251 00003448 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   252 0000344A 48                  <1>     db "H", 
   253 0000344B 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   254 0000344D 4C                  <1>     db "L", 
   255 0000344E 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   256 00003450 4E                  <1>     db "N", 
   257 00003451 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   258 00003453 50                  <1>     db "P", 
   259 00003454 A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   260 00003456 51                  <1>     db "Q", 
   261 00003457 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   262 00003459 54                  <1>     db "T", 
   263 0000345A F500                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   264 0000345C 56                  <1>     db "V", 
   265 0000345D 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   266 0000345F 5F                  <1>     db "_", 
   267 00003460 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   268 00003462 24                  <1>     db "$", 
   269 00003463 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   270                              <1> pTblL equ $ - .pTbl
   271                              <1> 
   272                              <1> printCRLF:
   273 00003465 488D15DCD4FFFF      <1>     lea rdx, crlf
   274                              <1> printString:
   275 0000346C B800090000          <1>     mov eax, 0900h  ;Print string
   276 00003471 CD21                <1>     int 21h
   277                              <1>     return
    13                              <2> %%_ret:
    14 00003473 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   278                              <1> 
   279                              <1> putVersionInPrompt:
   280 00003474 488D1540D7FFFF      <1>     lea rdx, dosVer
   281 0000347B B409                <1>     mov ah, 09h ;Print String
   282 0000347D CD21                <1>     int 21h
   283 0000347F B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   284 00003481 CD21                <1>     int 21h
   285 00003483 50                  <1>     push rax    ;Save minor version
   286 00003484 E89E010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   287 00003489 E8B6010000          <1>     call printPackedBCD ;Print al
   288 0000348E B22E                <1>     mov dl, "."
   289 00003490 B402                <1>     mov ah, 02h
   290 00003492 CD21                <1>     int 21h
   291 00003494 58                  <1>     pop rax
   292 00003495 88E0                <1>     mov al, ah  ;Get the minor version low
   293 00003497 E88B010000          <1>     call hexToBCD
   294 0000349C E8A3010000          <1>     call printPackedBCD
   295                              <1>     return
    13                              <2> %%_ret:
    14 000034A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> putEscInPrompt:
   297 000034A2 B21B                <1>     mov dl, ESC
   298 000034A4 EB36                <1>     jmp short outChar
   299                              <1> 
   300                              <1> putMoneyInPrompt:
   301 000034A6 B224                <1>     mov dl, "$"
   302 000034A8 EB32                <1>     jmp short outChar
   303                              <1> 
   304                              <1> putEquInPrompt:
   305 000034AA B23D                <1>     mov dl, "="
   306 000034AC EB2E                <1>     jmp short outChar
   307                              <1> 
   308                              <1> putPipeInPrompt:
   309 000034AE B27C                <1>     mov dl, "|"
   310 000034B0 EB2A                <1>     jmp short outChar
   311                              <1> 
   312                              <1> putGTinPrompt:
   313 000034B2 B23E                <1>     mov dl, ">"
   314 000034B4 EB26                <1>     jmp short outChar
   315                              <1> 
   316                              <1> putLTinPrompt:
   317 000034B6 B23C                <1>     mov dl, "<"
   318 000034B8 EB22                <1>     jmp short outChar
   319                              <1> 
   320                              <1> putBSPinPrompt:
   321 000034BA 488D15F5D8FFFF      <1>     lea rdx, backSpace
   322 000034C1 B903000000          <1>     mov ecx, 3
   323 000034C6 BB01000000          <1>     mov ebx, 1
   324 000034CB B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   325 000034D0 CD21                <1>     int 21h
   326                              <1>     return
    13                              <2> %%_ret:
    14 000034D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   327                              <1> 
   328                              <1> putDriveInPrompt:
   329 000034D3 E8A4010000          <1>     call getCurrentDrive
   330 000034D8 0441                <1>     add al, "A" ;Convert to letter
   331 000034DA 88C2                <1>     mov dl, al
   332                              <1> outChar:
   333 000034DC B402                <1>     mov ah, 02h ;Echo to STDOUT
   334 000034DE CD21                <1>     int 21h
   335                              <1>     return
    13                              <2> %%_ret:
    14 000034E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> putCWDInPrompt:
   337 000034E1 E896010000          <1>     call getCurrentDrive
   338 000034E6 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   339 000034E8 FEC2                <1>     inc dl
   340 000034EA 0441                <1>     add al, "A" ;Convert to letter
   341 000034EC B43A                <1>     mov ah, ":"
   342 000034EE 488D3D65CBFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   343 000034F5 66AB                <1>     stosw   ;Store X:, rdi+=2
   344 000034F7 8A052CCBFFFF        <1>     mov al, byte [pathSep]
   345 000034FD AA                  <1>     stosb   ;Store pathSep, inc rdi
   346 000034FE B447                <1>     mov ah, 47h ;Get Current Working Directory
   347 00003500 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   348 00003503 CD21                <1>     int 21h
   349 00003505 721F                <1>     jc .badDrive
   350 00003507 E88E010000          <1>     call strlen
   351 0000350C 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   352                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   353 00003512 B800400000          <1>     mov eax, 4000h ;Write to handle
   354 00003517 BB01000000          <1>     mov ebx, 1  ;STDOUT
   355 0000351C 488D1537CBFFFF      <1>     lea rdx, currDirStr
   356 00003523 CD21                <1>     int 21h
   357                              <1>     return
    13                              <2> %%_ret:
    14 00003525 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> .badDrive:
   359                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   360 00003526 488D1556D7FFFF      <1>     lea rdx, badDrvMsg
   361 0000352D E83AFFFFFF          <1>     call printString
   362                              <1>     return
    13                              <2> %%_ret:
    14 00003532 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> printFmtTime:
   364                              <1> ;Outputs the formatted time
   365 00003533 B42C                <1>     mov ah, 2Ch ;DOS get time
   366 00003535 CD21                <1>     int 21h
   367                              <1>     ;CH = hour (0-23)
   368                              <1> 	;CL = minutes (0-59)
   369                              <1> 	;DH = seconds (0-59)
   370                              <1> 	;DL = hundredths (0-99)
   371 00003537 880D68D1FFFF        <1>     mov byte [td1], cl
   372 0000353D 882D63D1FFFF        <1>     mov byte [td2], ch
   373 00003543 88155ED1FFFF        <1>     mov byte [td3], dl
   374 00003549 883559D1FFFF        <1>     mov byte [td4], dh
   375 0000354F 0FB6C5              <1>     movzx eax, ch
   376 00003552 E862FEFFFF          <1>     call printTime.printHours
   377 00003557 8A15E4CAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   378 0000355D B402                <1>     mov ah, 02h
   379 0000355F CD21                <1>     int 21h
   380 00003561 0FB6053DD1FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   381 00003568 E83CFEFFFF          <1>     call printTime.printMinutesAlt
   382 0000356D 8A15CECAFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   383 00003573 B402                <1>     mov ah, 02h
   384 00003575 CD21                <1>     int 21h
   385 00003577 0FB6052AD1FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   386 0000357E E826FEFFFF          <1>     call printTime.printMinutesAlt
   387 00003583 B22E                <1>     mov dl, "."
   388 00003585 B402                <1>     mov ah, 02h
   389 00003587 CD21                <1>     int 21h
   390 00003589 0FB60517D1FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   391 00003590 E814FEFFFF          <1>     call printTime.printMinutesAlt
   392                              <1>     return
    13                              <2> %%_ret:
    14 00003595 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> 
   394                              <1> printFmtDate:
   395                              <1> ;Outputs the formatted date
   396 00003596 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   397 0000359B CD21                <1>     int 21h
   398                              <1> 	;AL = day of the week (0=Sunday)
   399                              <1> 	;CX = year (1980-2099)
   400                              <1> 	;DH = month (1-12)
   401                              <1> 	;DL = day (1-31)
   402 0000359D 66890D01D1FFFF      <1>     mov word [td1], cx
   403 000035A4 8815FDD0FFFF        <1>     mov byte [td3], dl
   404 000035AA 8835F8D0FFFF        <1>     mov byte [td4], dh
   405 000035B0 0FB6C0              <1>     movzx eax, al
   406 000035B3 89C3                <1>     mov ebx, eax
   407 000035B5 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   408 000035B7 01D8                <1>     add eax, ebx ;Make it 3 times 
   409 000035B9 488D1545D5FFFF      <1>     lea rdx, dayName
   410 000035C0 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   411 000035C4 B903000000          <1>     mov ecx, 3  ;Print three chars
   412 000035C9 BB01000000          <1>     mov ebx, 1  ;STDOUT
   413 000035CE B440                <1>     mov ah, 40h ;Write to handle
   414 000035D0 CD21                <1>     int 21h
   415 000035D2 B220                <1>     mov dl, " "
   416 000035D4 E803FFFFFF          <1>     call outChar
   417 000035D9 E8FEFEFFFF          <1>     call outChar
   418                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   419                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   420                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   421 000035DE 0FB705C0D0FFFF      <1>     movzx eax, word [td1]   ;Get this word
   422 000035E5 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   423 000035E8 0FB61DB9D0FFFF      <1>     movzx ebx, byte [td4]
   424 000035EF C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   425 000035F2 09D8                <1>     or eax, ebx ;Add this date to eax
   426 000035F4 0FB61DACD0FFFF      <1>     movzx ebx, byte [td3]
   427 000035FB 09D8                <1>     or eax, ebx
   428 000035FD BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   429 00003602 E81EFCFFFF          <1>     call printDate
   430                              <1>     return
    13                              <2> %%_ret:
    14 00003607 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> BCDtoHex:
   433                              <1> ;Converts a BCD value to a Hex byte
   434                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   435 00003608 51                  <1>     push rcx
   436 00003609 0FB6C0              <1>     movzx eax, al   ;Zero extend
   437 0000360C 89C1                <1>     mov ecx, eax    ;Save al in ecx
   438 0000360E 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   439 00003613 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   440 00003619 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   441                              <1> .bth:
   442 0000361C 050A000000          <1>     add eax, 10
   443 00003621 FFC9                <1>     dec ecx
   444 00003623 75F7                <1>     jnz .bth
   445 00003625 59                  <1>     pop rcx
   446 00003626 C3                  <1>     ret
   447                              <1> 
   448                              <1> hexToBCD:
   449                              <1> ;Converts a Hex byte into two BCD digits
   450                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   451 00003627 51                  <1>     push rcx
   452 00003628 0FB6C0              <1>     movzx eax, al   ;Zero extend
   453 0000362B 31C9                <1>     xor ecx, ecx
   454                              <1> .htb0:
   455 0000362D 3D0A000000          <1>     cmp eax, 10
   456 00003632 7209                <1>     jb .htb1
   457 00003634 2D0A000000          <1>     sub eax, 10
   458 00003639 FFC1                <1>     inc ecx
   459 0000363B EBF0                <1>     jmp short .htb0
   460                              <1> .htb1:
   461 0000363D C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   462 00003640 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   463 00003642 59                  <1>     pop rcx
   464 00003643 C3                  <1>     ret
   465                              <1> 
   466                              <1> printPackedBCD:
   467                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   468                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   469                              <1> ;Preserves all registers
   470 00003644 50                  <1>     push rax
   471 00003645 52                  <1>     push rdx
   472 00003646 88C4                <1>     mov ah, al
   473 00003648 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   474 0000364A 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   475 0000364D 7508                <1>     jnz .upperNybble
   476 0000364F B220                <1>     mov dl, " "
   477 00003651 B402                <1>     mov ah, 02h
   478 00003653 CD21                <1>     int 21h
   479 00003655 EB0E                <1>     jmp short .lowerNybble
   480                              <1> .upperNybble:
   481 00003657 50                  <1>     push rax
   482 00003658 C0EC04              <1>     shr ah, 4
   483 0000365B 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   484 0000365E 88E2                <1>     mov dl, ah
   485 00003660 B402                <1>     mov ah, 02h ;Print DL
   486 00003662 CD21                <1>     int 21h
   487 00003664 58                  <1>     pop rax
   488                              <1> .lowerNybble:
   489 00003665 0430                <1>     add al, "0"
   490 00003667 88C2                <1>     mov dl, al
   491 00003669 B402                <1>     mov ah, 02h ;Print DL
   492 0000366B CD21                <1>     int 21h
   493 0000366D 5A                  <1>     pop rdx
   494 0000366E 58                  <1>     pop rax
   495                              <1>     return
    13                              <2> %%_ret:
    14 0000366F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   496                              <1> 
   497                              <1> setDrive:
   498                              <1> ;Input: dl = 0 based Drive number to set to
   499                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   500                              <1> ;AX trashed.
   501 00003670 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   502 00003672 CD21                <1>     int 21h 
   503 00003674 E803000000          <1>     call getCurrentDrive
   504 00003679 38D0                <1>     cmp al, dl  ;Is this the same drive?
   505                              <1>     return
    13                              <2> %%_ret:
    14 0000367B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> getCurrentDrive:
   507                              <1> ;Returns the 0 based current drive in al
   508 0000367C B419                <1>     mov ah, 19h
   509 0000367E CD21                <1>     int 21h
   510                              <1>     return
    13                              <2> %%_ret:
    14 00003680 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> 
   512                              <1> strcpy:
   513                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   514                              <1> ;rsi -> Source
   515                              <1> ;rdi -> Destination
   516 00003681 51                  <1>     push rcx
   517 00003682 57                  <1>     push rdi
   518 00003683 4889F7              <1>     mov rdi, rsi
   519 00003686 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   520 0000368B 5F                  <1>     pop rdi
   521 0000368C F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   522 0000368E 59                  <1>     pop rcx
   523                              <1>     return
    13                              <2> %%_ret:
    14 0000368F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strcpy2:
   526                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   527                              <1> ;rsi -> Source
   528                              <1> ;rdi -> Destination
   529 00003690 56                  <1>     push rsi
   530 00003691 57                  <1>     push rdi
   531 00003692 E8EAFFFFFF          <1>     call strcpy 
   532 00003697 5F                  <1>     pop rdi
   533 00003698 5E                  <1>     pop rsi
   534                              <1>     return
    13                              <2> %%_ret:
    14 00003699 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> strlen:
   537                              <1> ;Gets the length of a ASCIIZ string
   538                              <1> ;Input: rdi = Source buffer
   539                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   540 0000369A 50                  <1>     push rax
   541 0000369B B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   542 000036A0 CD2F                <1>     int 2fh
   543 000036A2 58                  <1>     pop rax
   544                              <1>     return
    13                              <2> %%_ret:
    14 000036A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> 
   546                              <1> ucChar:
   547                              <1> ;Input: al = Char to uppercase
   548                              <1> ;Output: al = Adjusted char 
   549 000036A4 53                  <1>     push rbx
   550 000036A5 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   551 000036A8 50                  <1>     push rax    ;Push the char twice on the stack
   552 000036A9 50                  <1>     push rax
   553 000036AA B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   554 000036AF CD2F                <1>     int 2fh         ;Returns the processed char in al
   555 000036B1 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   556 000036B4 5B                  <1>     pop rbx
   557                              <1>     return
    13                              <2> %%_ret:
    14 000036B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> skipDelimiters:
   560                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   561                              <1> ; command delimiters but a subset thereof. 
   562                              <1> ;These are the same across all codepages.
   563                              <1> ;Input: rsi must point to the start of the data string
   564                              <1> ;Output: rsi points to the first non-delimiter char
   565 000036B6 50                  <1>     push rax
   566                              <1> .l1:
   567 000036B7 AC                  <1>     lodsb
   568 000036B8 E807000000          <1>     call isALdelimiter
   569 000036BD 74F8                <1>     jz .l1
   570                              <1> .exit:
   571 000036BF 58                  <1>     pop rax
   572 000036C0 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   573                              <1>     return
    13                              <2> %%_ret:
    14 000036C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> isALdelimiter:
   576                              <1> ;Returns: ZF=NZ if al is not a command separator 
   577                              <1> ;         ZF=ZE if al is a command separator
   578 000036C4 3C20                <1>     cmp al, " "
   579                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000036C6 74(C3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   580 000036C8 3C3B                <1>     cmp al, ";"
   581                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000036CA 74(C3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   582 000036CC 3C3D                <1>     cmp al, "="
   583                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000036CE 74(C3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   584 000036D0 3C2C                <1>     cmp al, ","
   585                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000036D2 74(C3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   586 000036D4 3C09                <1>     cmp al, TAB
   587                              <1>     return
    13                              <2> %%_ret:
    14 000036D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   588                              <1> 
   589                              <1> clearCommandState:
   590                              <1> ;Clears the command state
   591 000036D7 488D3DCAC9FFFF      <1>     lea rdi, cmdStatePtr
   592 000036DE B906000000          <1>     mov ecx, cmdStateL
   593 000036E3 31C0                <1>     xor eax, eax
   594 000036E5 F3AA                <1>     rep stosb
   595                              <1>     return
    13                              <2> %%_ret:
    14 000036E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   596                              <1> 
   597                              <1> clearCommandLineState:
   598                              <1> ;Clears the command line state after a 0Dh encountered
   599 000036E8 488D3DAEC9FFFF      <1>     lea rdi, cmdLineStatePtr
   600 000036EF B911000000          <1>     mov ecx, cmdLineStateL
   601 000036F4 31C0                <1>     xor eax, eax
   602 000036F6 F3AA                <1>     rep stosb
   603 000036F8 C7059CC9FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   603 00003701 FF                  <1>
   604 00003702 C70598C9FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   604 0000370B FF                  <1>
   605                              <1> ;Close all handles from 5->MAX
   606 0000370C 0FB70D14C9FFFF      <1>     movzx ecx, word [numHdls]
   607 00003713 BB05000000          <1>     mov ebx, 5
   608                              <1> .lp:
   609 00003718 B43E                <1>     mov ah, 3Eh ;File close
   610 0000371A CD21                <1>     int 21h
   611 0000371C FFC3                <1>     inc ebx ;Goto next file
   612 0000371E 39CB                <1>     cmp ebx, ecx
   613 00003720 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   614                              <1>     return
    13                              <2> %%_ret:
    14 00003722 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   615                              <1> 
   616                              <1> asciiFilenameToFCB:
   617                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   618                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   619                              <1> ;Also doesn't check if chars are valid
   620                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   621                              <1> ;Name is space padded.
   622                              <1> ;Input: rsi = ASCII string buffer
   623                              <1> ;       rdi = FCB name buffer
   624                              <1> ;Output: al = Char that terminated the source string 
   625 00003723 53                  <1>     push rbx    
   626 00003724 57                  <1>     push rdi
   627 00003725 B90B000000          <1>     mov ecx, 11
   628 0000372A B020                <1>     mov al, " "
   629 0000372C F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   630 0000372E 5F                  <1>     pop rdi
   631 0000372F 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   632                              <1>     ;Preprocess for Dir Searches
   633 00003732 803E2E              <1>     cmp byte [rsi], "."
   634 00003735 7509                <1>     jne .processName
   635 00003737 A4                  <1>     movsb   ;Store the first dot
   636 00003738 803E2E              <1>     cmp byte [rsi], "."
   637 0000373B 752C                <1>     jne .exitBadChar
   638 0000373D A4                  <1>     movsb
   639 0000373E EB29                <1>     jmp short .exitBadChar
   640                              <1> .processName:
   641 00003740 AC                  <1>     lodsb   ;Get the char in al
   642 00003741 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   643 00003743 7426                <1>     jz .exit
   644 00003745 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   645 00003747 7407                <1>     je .extSpace
   646 00003749 3C2E                <1>     cmp al, "."
   647 0000374B 740C                <1>     je .ext
   648 0000374D AA                  <1>     stosb   ;Store the char
   649 0000374E EBF0                <1>     jmp short .processName
   650                              <1> .extSpace:
   651                              <1> ;Now we scan for a period in the name
   652 00003750 AC                  <1>     lodsb   ;Get a char and increase rsi
   653 00003751 84C0                <1>     test al, al
   654 00003753 7416                <1>     jz .exit
   655 00003755 3C2E                <1>     cmp al, "."     ;If al is not a period...
   656 00003757 75F7                <1>     jne .extSpace   ; keep searching
   657                              <1> .ext:
   658 00003759 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   659                              <1> .processExt:
   660 0000375D AC                  <1>     lodsb
   661 0000375E 84C0                <1>     test al, al
   662 00003760 7409                <1>     jz .exit
   663 00003762 3C20                <1>     cmp al, " "
   664 00003764 7405                <1>     je .exit
   665 00003766 AA                  <1>     stosb
   666 00003767 EBF4                <1>     jmp short .processExt
   667                              <1> .exitBadChar:
   668 00003769 30C0                <1>     xor al, al  ;Return a null terminator
   669                              <1> .exit:
   670 0000376B 5B                  <1>     pop rbx
   671                              <1>     return
    13                              <2> %%_ret:
    14 0000376C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   672                              <1> 
   673                              <1> findLastPathComponant:
   674                              <1> ;Finds the last path componant of an ASCIIZ path string
   675                              <1> ;Input: rdi -> Head of the path to find last componant on
   676                              <1> ;Output: rdi -> Start of the last componant
   677 0000376D 50                  <1>     push rax
   678 0000376E 51                  <1>     push rcx
   679 0000376F 31C9                <1>     xor ecx, ecx
   680 00003771 FFC9                <1>     dec ecx
   681 00003773 31C0                <1>     xor eax, eax
   682 00003775 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   683 00003777 F7D1                <1>     not ecx     ;This gets the count of chars  
   684 00003779 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   685 0000377C 8A05A7C8FFFF        <1>     mov al, byte [pathSep]
   686 00003782 FD                  <1>     std
   687 00003783 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   688 00003785 FC                  <1>     cld
   689 00003786 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   690 00003788 48FFC7              <1>     inc rdi     ;Point at pathsep
   691                              <1> .exit:
   692 0000378B 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   693 0000378E 59                  <1>     pop rcx
   694 0000378F 58                  <1>     pop rax
   695                              <1>     return
    13                              <2> %%_ret:
    14 00003790 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   696                              <1> 
   697                              <1> FCBToAsciiz:
   698                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   699                              <1> ;Name is space padded too
   700                              <1> ;Input: rsi = FCB name buffer
   701                              <1> ;       rdi = ASCIIZ string buffer
   702 00003791 B908000000          <1>     mov ecx, 8
   703 00003796 F3A4                <1>     rep movsb   ;Move the name over
   704                              <1> .scanNameSpace:
   705 00003798 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   706 0000379C 750D                <1>     jne .ext
   707 0000379E 48FFCF              <1>     dec rdi
   708 000037A1 FFC1                <1>     inc ecx
   709 000037A3 81F908000000        <1>     cmp ecx, 8
   710 000037A9 72ED                <1>     jb .scanNameSpace
   711                              <1> .ext:
   712 000037AB 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   713 000037B0 7506                <1>     jne .validExt
   714 000037B2 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   715 000037B6 7415                <1>     je .exit
   716                              <1> .validExt:
   717 000037B8 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   718 000037BA AA                  <1>     stosb
   719 000037BB B903000000          <1>     mov ecx, 3
   720 000037C0 F3A4                <1>     rep movsb   ;Move the three extension chars over
   721                              <1> .scanExtSpace:
   722 000037C2 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   723 000037C6 7505                <1>     jne .exit
   724 000037C8 48FFCF              <1>     dec rdi
   725 000037CB EBF5                <1>     jmp short .scanExtSpace
   726                              <1> .exit:
   727 000037CD 31C0                <1>     xor eax, eax
   728 000037CF AA                  <1>     stosb   ;Store a null at the end
   729                              <1>     return
    13                              <2> %%_ret:
    14 000037D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   730                              <1> 
   731                              <1> cpDelimOrCtrlStringToBufz:
   732                              <1> ;Copy a delimited or control char terminated string to a buffer
   733                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   734                              <1> ;       rdi -> Buffer to store null terminated string in
   735                              <1> ;Output: rsi -> First char past string end
   736                              <1> ;       rdi -> One char past null terminator on string buffer
   737 000037D1 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   738                              <1> .lp:
   739 000037D4 AC                  <1>     lodsb
   740 000037D5 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   741 000037D7 760A                <1>     jbe .exit
   742 000037D9 E8E6FEFFFF          <1>     call isALdelimiter
   743 000037DE 7403                <1>     je .exit
   744 000037E0 AA                  <1>     stosb
   745 000037E1 EBF1                <1>     jmp short .lp
   746                              <1> .exit:
   747 000037E3 31C0                <1>     xor eax, eax
   748 000037E5 AA                  <1>     stosb   ;Store a null terminator
   749                              <1>     return
    13                              <2> %%_ret:
    14 000037E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   750                              <1> 
   751                              <1> 
   752                              <1> cpDelimPathToBufz:
   753                              <1> ;Copy a delimited path into buffer and null terminate.
   754                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   755                              <1> ;       rdi -> Buffer to store null terminated path in
   756                              <1> ;Output: rsi -> First char past pathname delimiter
   757                              <1> ;       rdi -> One char past null terminator on pathname buffer
   758 000037E7 53                  <1>     push rbx
   759 000037E8 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   760 000037EB C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   761                              <1> .lp:
   762 000037EE AC                  <1>     lodsb   ;Get the char
   763 000037EF 3C0D                <1>     cmp al, CR
   764 000037F1 7412                <1>     je .gotRedirPath
   765 000037F3 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   766 000037F8 740B                <1>     jz .gotRedirPath 
   767 000037FA 3A052AC8FFFF        <1>     cmp al, byte [switchChar]
   768 00003800 7403                <1>     je .gotRedirPath
   769 00003802 AA                  <1>     stosb   ;Store this char and loop next char
   770 00003803 EBE9                <1>     jmp short .lp
   771                              <1> .gotRedirPath:
   772 00003805 50                  <1>     push rax    ;Save the char on stack
   773 00003806 30C0                <1>     xor al, al  ;Get null terminator char
   774 00003808 4829FB              <1>     sub rbx, rdi
   775 0000380B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   776 00003812 7412                <1>     je .notColon
   777 00003814 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   778 0000381B 7409                <1>     je .notColon
   779 0000381D 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   780 00003821 7503                <1>     jne .notColon
   781 00003823 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   782                              <1> .notColon:
   783 00003826 AA                  <1>     stosb   ;Store the null terminator for the redir path
   784 00003827 58                  <1>     pop rax ;Get back the char in al
   785 00003828 5B                  <1>     pop rbx
   786                              <1>     return
    13                              <2> %%_ret:
    14 00003829 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   787                              <1> 
   788                              <1> buildCommandPath:
   789                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   790 0000382A 0FB60578C8FFFF      <1>     movzx eax, byte [arg1Off]
   791 00003831 4C8B05D7C7FFFF      <1>     mov r8, [pspPtr]
   792 00003838 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   793 0000383F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   794                              <1> copyArgumentToSearchSpec:
   795                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   796                              <1> ; and null terminates
   797 00003842 488D3D96CCFFFF      <1>     lea rdi, searchSpec
   798 00003849 E899FFFFFF          <1>     call cpDelimPathToBufz
   799                              <1>     return
    13                              <2> %%_ret:
    14 0000384E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   800                              <1> 
   801                              <1> scanForWildcards:
   802                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   803                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   804 0000384F 50                  <1>     push rax
   805 00003850 56                  <1>     push rsi
   806                              <1> .lp:
   807 00003851 AC                  <1>     lodsb
   808 00003852 3C3F                <1>     cmp al, "?"
   809 00003854 740A                <1>     je .exit
   810 00003856 3C2A                <1>     cmp al, "*"
   811 00003858 7406                <1>     je .exit
   812 0000385A 84C0                <1>     test al, al
   813 0000385C 75F3                <1>     jnz .lp
   814 0000385E FEC0                <1>     inc al  ;This will clear the ZF
   815                              <1> .exit:
   816 00003860 5E                  <1>     pop rsi
   817 00003861 58                  <1>     pop rax
   818                              <1>     return
    13                              <2> %%_ret:
    14 00003862 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   819                              <1> 
   820                              <1> printDecimalWord:
   821                              <1> ;Takes qword in rax and print it's decimal representation
   822                              <1> ;Takes the qword in eax and prints its decimal representation
   823 00003863 31C9                <1>     xor ecx, ecx
   824 00003865 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   825 00003867 85C0                <1>     test eax, eax
   826 00003869 750C                <1>     jnz .notZero
   827 0000386B B930000000          <1>     mov ecx, "0"
   828 00003870 BD01000000          <1>     mov ebp, 1  ;Print one digit
   829 00003875 EB3E                <1>     jmp short .dpfb2
   830                              <1> .notZero:
   831 00003877 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   832 00003879 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   833                              <1> .dpfb0:
   834 0000387E FFC5                <1>     inc ebp
   835 00003880 81FD08000000        <1>     cmp ebp, 8
   836 00003886 7206                <1>     jb .dpfb00
   837 00003888 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   838 0000388C EB04                <1>     jmp short .dpfb01
   839                              <1> .dpfb00:
   840 0000388E 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   841                              <1> .dpfb01:
   842 00003892 31D2                <1>     xor edx, edx
   843 00003894 48F7F6              <1>     div rsi
   844 00003897 80C230              <1>     add dl, '0'
   845 0000389A 80FA39              <1>     cmp dl, '9'
   846 0000389D 7603                <1>     jbe .dpfb1
   847 0000389F 80C207              <1>     add dl, 'A'-'0'-10
   848                              <1> .dpfb1:
   849 000038A2 81FD08000000        <1>     cmp ebp, 8
   850 000038A8 7204                <1>     jb .dpfb10
   851 000038AA 88D3                <1>     mov bl, dl ;Add the bottom bits
   852 000038AC EB02                <1>     jmp short .dpfb11
   853                              <1> .dpfb10:
   854 000038AE 88D1                <1>     mov cl, dl    ;Save remainder byte
   855                              <1> .dpfb11:
   856 000038B0 4885C0              <1>     test rax, rax
   857 000038B3 75C9                <1>     jnz .dpfb0
   858                              <1> .dpfb2:
   859 000038B5 81FD08000000        <1>     cmp ebp, 8
   860 000038BB 7208                <1>     jb .dpfb20
   861 000038BD 88DA                <1>     mov dl, bl
   862 000038BF 48C1EB08            <1>     shr rbx, 8
   863 000038C3 EB06                <1>     jmp short .dpfb21
   864                              <1> .dpfb20:
   865 000038C5 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   866 000038C7 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   867                              <1> .dpfb21:
   868 000038CB B402                <1>     mov ah, 02h
   869 000038CD CD21                <1>     int 21h
   870 000038CF FFCD                <1>     dec ebp
   871 000038D1 75E2                <1>     jnz .dpfb2
   872                              <1>     return
    13                              <2> %%_ret:
    14 000038D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   873                              <1> 
   874                              <1> getDecimalWord:
   875                              <1> ;Works on MAX A dword in eax
   876                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   877 000038D4 31C9                <1>     xor ecx, ecx
   878 000038D6 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   879 000038D8 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   880                              <1> .dpfb0:
   881 000038DD FFC5                <1>     inc ebp
   882 000038DF 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   883 000038E3 31D2                <1>     xor edx, edx
   884 000038E5 48F7F3              <1>     div rbx
   885 000038E8 80C230              <1>     add dl, '0'
   886 000038EB 80FA39              <1>     cmp dl, '9'
   887 000038EE 7603                <1>     jbe .dpfb1
   888 000038F0 80C207              <1>     add dl, 'A'-'0'-10
   889                              <1> .dpfb1:
   890 000038F3 88D1                <1>     mov cl, dl    ;Save remainder byte
   891 000038F5 4885C0              <1>     test rax, rax
   892 000038F8 75E3                <1>     jnz .dpfb0
   893                              <1>     return
    13                              <2> %%_ret:
    14 000038FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   894                              <1> 
   895                              <1> freezePC:
   896 000038FB 488D15A3D5FFFF      <1>     lea rdx, memBad1
   897 00003902 B409                <1>     mov ah, 09h
   898 00003904 CD21                <1>     int 21h
   899                              <1> .altEP:
   900 00003906 488D15C1D5FFFF      <1>     lea rdx, memBad3
   901 0000390D B409                <1>     mov ah, 09h
   902 0000390F CD21                <1>     int 21h
   903                              <1> .lp:
   904 00003911 F390                <1>     pause
   905 00003913 F4                  <1>     hlt
   906 00003914 EBFB                <1>     jmp short .lp
   907                              <1> 
   908                              <1> setDTA:
   909 00003916 50                  <1>     push rax
   910 00003917 52                  <1>     push rdx
   911 00003918 488D1546C8FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   912 0000391F B8001A0000          <1>     mov eax, 1A00h
   913 00003924 CD21                <1>     int 21h
   914 00003926 5A                  <1>     pop rdx
   915 00003927 58                  <1>     pop rax
   916                              <1>     return
    13                              <2> %%_ret:
    14 00003928 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   917                              <1> 
   918                              <1> getDTA:
   919 00003929 488D1535C8FFFF      <1>     lea rdx, cmdFFBlock
   920                              <1>     return
    13                              <2> %%_ret:
    14 00003930 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   921                              <1> 
   922                              <1> ;-------------------------------
   923                              <1> ; Environment utility functions
   924                              <1> ;-------------------------------
   925                              <1> 
   926                              <1> cmpEnvVar:
   927                              <1> ;Checks that we have found the environment variable we are looking for.
   928                              <1> ;Input: rsi -> Environment var to verify the name of
   929                              <1> ;       rdi -> Environment var name to compare against
   930                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   931 00003931 56                  <1>     push rsi
   932 00003932 57                  <1>     push rdi
   933 00003933 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   934                              <1> .lp:
   935 00003936 AC                  <1>     lodsb               ;Pick up from user string
   936 00003937 E868FDFFFF          <1>     call ucChar         ;Upper case it!
   937 0000393C 3807                <1>     cmp byte [rdi], al  
   938 0000393E 7509                <1>     jne .exit
   939 00003940 3C3D                <1>     cmp al, "="         ;Are we at the end?
   940 00003942 7405                <1>     je .exit
   941 00003944 48FFC7              <1>     inc rdi
   942 00003947 EBED                <1>     jmp short .lp
   943                              <1> .exit:
   944 00003949 5F                  <1>     pop rdi
   945 0000394A 5E                  <1>     pop rsi
   946                              <1>     return
    13                              <2> %%_ret:
    14 0000394B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   947                              <1> 
   948                              <1> checkEnvGoodAndGet:
   949                              <1> ;Gets the env ptr and checks that it is double null terminated.
   950                              <1> ;Output:
   951                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   952                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   953                              <1> ;           rsi -> Environment pointer
   954 0000394C 50                  <1>     push rax
   955 0000394D 51                  <1>     push rcx
   956 0000394E 57                  <1>     push rdi
   957 0000394F 4150                <1>     push r8
   958 00003951 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   959 00003955 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   960 00003958 741A                <1>     jz .badExit
   961 0000395A 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   962 0000395D C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   963                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   964 00003960 31C0                <1>     xor eax, eax
   965                              <1> .pathNulScan:
   966 00003962 F2AE                <1>     repne scasb
   967 00003964 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
   968 00003966 740C                <1>     jz .badExit
   969 00003968 3807                <1>     cmp byte [rdi], al  ;Is char two null?
   970 0000396A 75F6                <1>     jne .pathNulScan    ;If not, keep searching
   971 0000396C 31C0                <1>     xor eax, eax
   972 0000396E FFC0                <1>     inc eax ;Clear the ZF
   973 00003970 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
   974                              <1> .badExit:
   975 00003974 4158                <1>     pop r8
   976 00003976 5F                  <1>     pop rdi
   977 00003977 59                  <1>     pop rcx
   978 00003978 58                  <1>     pop rax
   979                              <1>     return
    13                              <2> %%_ret:
    14 00003979 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> 
   981                              <1> 
   982                              <1> findEnvSpace:
   983                              <1> ;Searches the environment for space, returns a pointer to the start of the 
   984                              <1> ; free space in the pointer and a count of free space in the environment.
   985                              <1> ;If count is zero, pointer is not to be used.
   986                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
   987 0000397A 31C9                <1>     xor ecx, ecx
   988 0000397C 31C0                <1>     xor eax, eax    ;Clear eax too
   989 0000397E 51                  <1>     push rcx
   990 0000397F E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
   991 00003984 59                  <1>     pop rcx
   992                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003985 74(79)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   993 00003987 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
   994 0000398B FFC9                <1>     dec ecx ;Make into a large counter
   995 0000398D 4889F7              <1>     mov rdi, rsi    
   996                              <1> .endsearch:
   997 00003990 F2AE                <1>     repne scasb ;Scan
   998 00003992 803F00              <1>     cmp byte [rdi], 0
   999 00003995 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1000                              <1>     ;Here we are at the end of the environment
  1001 00003997 F7D9                <1>     neg ecx
  1002 00003999 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1003 0000399B 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1004 0000399E 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1005 000039A1 29C8                <1>     sub eax, ecx
  1006 000039A3 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1007                              <1>     return
    13                              <2> %%_ret:
    14 000039A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1008                              <1> 
  1009                              <1> searchForEnvVar:
  1010                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1011                              <1> ;Input: rdi -> Var name to look for.
  1012                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1013 000039A6 57                  <1>     push rdi
  1014 000039A7 51                  <1>     push rcx
  1015 000039A8 52                  <1>     push rdx
  1016 000039A9 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1017 000039AD 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1018                              <1> .varLp:
  1019 000039B0 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1020 000039B3 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1021 000039B8 7416                <1>     je .varFound
  1022 000039BA 31C0                <1>     xor eax, eax        ;Search for a null
  1023 000039BC 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1024 000039BF B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1025 000039C4 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1026 000039C6 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1027 000039C8 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1028 000039CA 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1029 000039CD EBE1                <1>     jmp short .varLp    ;And scan again!
  1030                              <1> .varNotFound:
  1031 000039CF F9                  <1>     stc
  1032                              <1> .varFound:
  1033 000039D0 59                  <1>     pop rcx
  1034 000039D1 5A                  <1>     pop rdx
  1035 000039D2 5F                  <1>     pop rdi
  1036                              <1>     return
    13                              <2> %%_ret:
    14 000039D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1037                              <1> 
  1038                              <1> envFree:
  1039                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1040                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1041                              <1> ; free byte of the environment!
  1042                              <1> ;Input: rsi -> Variable to free.
  1043                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1044                              <1> ;        ecx = Number of free bytes in env
  1045 000039D4 4889F7              <1>     mov rdi, rsi
  1046 000039D7 31C0                <1>     xor eax, eax
  1047                              <1> .freeLp:
  1048 000039D9 803F00              <1>     cmp byte [rdi], 0
  1049 000039DC 7403                <1>     je .exitLp
  1050 000039DE AA                  <1>     stosb
  1051 000039DF EBF8                <1>     jmp short .freeLp
  1052                              <1> .exitLp:
  1053                              <1> ;rdi points to the terminating null of the var we just deleted
  1054                              <1> ;rsi points to the start of the free space
  1055 000039E1 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1056 000039E4 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1057 000039E9 7504                <1>     jne .prepPullup
  1058 000039EB 31C0                <1>     xor eax, eax
  1059 000039ED EB0E                <1>     jmp short .cleanEnv
  1060                              <1> .prepPullup:
  1061 000039EF 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1062                              <1> .pullUp:
  1063 000039F2 AC                  <1>     lodsb
  1064 000039F3 AA                  <1>     stosb
  1065 000039F4 84C0                <1>     test al, al ;Did we pick up a zero
  1066 000039F6 75FA                <1>     jne .pullUp ;If not, keep copying
  1067 000039F8 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1068 000039FB 75F5                <1>     jne .pullUp
  1069                              <1> ;We are at the end of the copy!
  1070                              <1> .cleanEnv:
  1071 000039FD AA                  <1>     stosb   ;Store the famous second null
  1072 000039FE 48FFCF              <1>     dec rdi ;without incrementing it!!
  1073 00003A01 E807000000          <1>     call getFreeSpace
  1074 00003A06 31C0                <1>     xor eax, eax
  1075 00003A08 51                  <1>     push rcx
  1076 00003A09 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1077 00003A0B 59                  <1>     pop rcx
  1078                              <1>     return
    13                              <2> %%_ret:
    14 00003A0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1079                              <1> 
  1080                              <1> getFreeSpace:
  1081                              <1> ;Output: ecx = Number of free bytes in the environment block
  1082 00003A0D 56                  <1>     push rsi
  1083 00003A0E 57                  <1>     push rdi
  1084 00003A0F E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1085 00003A14 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1086 00003A18 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1087 00003A1B E805000000          <1>     call getEnvSize ;Get total block size
  1088 00003A20 29F9                <1>     sub ecx, edi    ;Get difference!
  1089 00003A22 5F                  <1>     pop rdi
  1090 00003A23 5E                  <1>     pop rsi
  1091                              <1>     return
    13                              <2> %%_ret:
    14 00003A24 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1092                              <1> 
  1093                              <1> getEnvSize:
  1094                              <1> ;Gets the number of bytes in the environment allocation
  1095                              <1> ;Output: ecx = Number of bytes in the environment!
  1096 00003A25 53                  <1>     push rbx
  1097 00003A26 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1098 00003A2A 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1099 00003A2D C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1100 00003A30 5B                  <1>     pop rbx
  1101                              <1>     return
    13                              <2> %%_ret:
    14 00003A31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1102                              <1> 
  1103                              <1> getPtrToEndOfEnv:
  1104                              <1> ;Gets ptr to end of the environment
  1105                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1106 00003A32 50                  <1>     push rax
  1107 00003A33 51                  <1>     push rcx
  1108 00003A34 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1109 00003A38 31C0                <1>     xor eax, eax
  1110 00003A3A 31C9                <1>     xor ecx, ecx
  1111 00003A3C FFC9                <1>     dec ecx
  1112                              <1> .lp:
  1113 00003A3E F2AE                <1>     repne scasb
  1114 00003A40 3807                <1>     cmp byte [rdi], al
  1115 00003A42 75FA                <1>     jne .lp
  1116 00003A44 59                  <1>     pop rcx
  1117 00003A45 58                  <1>     pop rax
  1118                              <1>     return
    13                              <2> %%_ret:
    14 00003A46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1119                              <1> 
  1120                              <1> growEnvBlock:
  1121                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1122                              <1> ; newly allocated 160 byte block of the environment.
  1123                              <1> ;Returns:   CF=NC - Environment grown ok!
  1124                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1125                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1126 00003A47 50                  <1>     push rax
  1127 00003A48 53                  <1>     push rbx
  1128 00003A49 51                  <1>     push rcx
  1129 00003A4A 56                  <1>     push rsi
  1130 00003A4B 57                  <1>     push rdi
  1131 00003A4C E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1132 00003A51 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1133 00003A56 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1134 00003A5A 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1135 00003A5D 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1136 00003A63 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1137 00003A69 7321                <1>     jae .tooLarge
  1138                              <1>     ;Here ZF must be NZ.
  1139 00003A6B 4150                <1>     push r8
  1140 00003A6D 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1141 00003A71 B8004A0000          <1>     mov eax, 4A00h
  1142 00003A76 CD21                <1>     int 21h
  1143 00003A78 4158                <1>     pop r8
  1144 00003A7A 720A                <1>     jc .exit
  1145                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1146                              <1>     ; so we add 160 zeros to the count of bytes
  1147 00003A7C 81C1A0000000        <1>     add ecx, 0A0h
  1148 00003A82 31C0                <1>     xor eax, eax
  1149 00003A84 F3AA                <1>     rep stosb
  1150                              <1> .exit:
  1151 00003A86 5F                  <1>     pop rdi
  1152 00003A87 5E                  <1>     pop rsi
  1153 00003A88 59                  <1>     pop rcx
  1154 00003A89 5B                  <1>     pop rbx
  1155 00003A8A 58                  <1>     pop rax
  1156                              <1>     return
    13                              <2> %%_ret:
    14 00003A8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1157                              <1> .tooLarge:
  1158 00003A8C 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1159 00003A8F F9                  <1>     stc             ;Set CF
  1160 00003A90 EBF4                <1>     jmp short .exit
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00003A92 53                  <1>     push rbx
    25 00003A93 51                  <1>     push rcx
    26 00003A94 52                  <1>     push rdx
    27 00003A95 57                  <1>     push rdi
    28 00003A96 56                  <1>     push rsi
    29 00003A97 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00003A98 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003A9B 488D15A6CEFFFF      <1>     lea rdx, crlf
    33 00003AA2 E8C5F9FFFF          <1>     call printString
    34                              <1> 
    35 00003AA7 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00003AAD B90C000000          <1>     mov ecx, 0Ch
    37 00003AB2 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00003AB4 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00003AB7 480FB7FF            <1>     movzx rdi, di
    40 00003ABB 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00003ABE 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 00003AC2 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003AC5 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00003AC8 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 00003ACF 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 00003AD3 E894F9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00003AD8 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 00003ADF 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 00003AE6 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003AE9 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003AED E87AF9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 00003AF2 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00003AF5 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003AFB 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 00003B02 E865F9FFFF          <1>     call printString
    59 00003B07 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00003B09 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003B0C B402                <1>     mov ah, 02h ;Print char in dl
    62 00003B0E CD21                <1>     int 21h
    63                              <1> .userInput:
    64 00003B10 E850F9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 00003B15 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 00003B1C E84BF9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 00003B21 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 00003B24 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 00003B26 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 00003B2D E83AF9FFFF          <1>     call printString
    76 00003B32 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 00003B39 E82EF9FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 00003B3E F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 00003B41 7418                <1>     jz .userFail
    81 00003B43 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003B4A E81DF9FFFF          <1>     call printString
    83 00003B4F 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 00003B56 E811F9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 00003B5B F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003B5E 7418                <1>     jz .userMsgEnd
    88 00003B60 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 00003B67 E800F9FFFF          <1>     call printString
    90 00003B6C 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 00003B73 E8F4F8FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00003B78 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 00003B7F E8E8F8FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 00003B84 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 00003B86 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 00003B8D B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 00003B8F CD21                <1>     int 21h ;Get char in al
   100 00003B91 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 00003B93 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00003B95 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 00003B97 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 00003B98 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 00003B9A FFC1                <1>     inc ecx
   107 00003B9C 81F904000000        <1>     cmp ecx, 4
   108 00003BA2 75F3                <1>     jne .uip1
   109 00003BA4 E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 00003BA9 E8B7F8FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 00003BAE 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 00003BB0 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 00003BB2 7427                <1>     je .cehExit
   116 00003BB4 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00003BB6 740F                <1>     je .viIgnore
   118 00003BB8 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 00003BBA 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 00003BBC F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 00003BBF 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00003BC5 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00003BC7 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00003BCA 0F8440FFFFFF        <1>     jz .userInput
   127 00003BD0 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 00003BD2 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 00003BD5 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00003BDB 5E                  <1>     pop rsi
   133 00003BDC 5F                  <1>     pop rdi
   134 00003BDD 5A                  <1>     pop rdx
   135 00003BDE 59                  <1>     pop rcx
   136 00003BDF 5B                  <1>     pop rbx
   137 00003BE0 48CF                <1>     iretq
   138                              <1> .charError:
   139 00003BE2 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 00003BE7 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 00003BEE AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 00003BEF 88C2                <1>     mov dl, al  ;Move char into dl
   144 00003BF1 B402                <1>     mov ah, 02h
   145 00003BF3 CD21                <1>     int 21h ;Print char
   146 00003BF5 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 00003BF7 E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 00003BFC 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 00003C05 746563742024202020  <1>
   151 00003C0E 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 00003C17 6E6974202420202020  <1>
   152 00003C20 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 00003C29 202420202020202020  <1>
   153 00003C32 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 00003C3B 6F6D6D616E64202420  <1>
   154 00003C44 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 00003C4D 202020202020202020  <1>
   155 00003C56 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 00003C5F 737420242020202020  <1>
   156 00003C68 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 00003C71 202020202020202020  <1>
   157 00003C7A 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 00003C83 656469612024202020  <1>
   158 00003C8C 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 00003C95 7420466F756E642024  <1>
   159 00003C9E 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 00003CA7 706572202420202020  <1>
   160 00003CB0 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 00003CB9 6C7420242020202020  <1>
   161 00003CC2 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003CCB 742024202020202020  <1>
   162 00003CD4 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003CDD 61696C757265202420  <1>
   163                              <1> 
   164 00003CE6 64726976652024      <1> .drive      db "drive $"
   165 00003CED 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 00003CF6 64696E672024        <1>
   166 00003CFC 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 00003D05 74696E672024        <1>
   167 00003D0B 41626F727424        <1> .abortmsg   db "Abort$" 
   168 00003D11 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 00003D18 526574727924        <1> .retrymsg   db "Retry$"
   170 00003D1E 4661696C24          <1> .failmsg    db "Fail$"
   171 00003D23 2C2024              <1> .betweenMsg db ", $"
   172 00003D26 3F2024              <1> .endMsg     db "? $"
   173 00003D29 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 00003D2D F605F7C2FFFFFF      <1>     test byte [permaSwitch], -1
   177 00003D34 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 00003D36 50                  <1>     push rax
   180 00003D37 53                  <1>     push rbx
   181 00003D38 488B05D8C2FFFF      <1>     mov rax, qword [realParent]
   182 00003D3F 488B1DC9C2FFFF      <1>     mov rbx, qword [pspPtr]
   183 00003D46 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 00003D4A 5B                  <1>     pop rbx
   185 00003D4B 58                  <1>     pop rax
   186                              <1> .exit:
   187 00003D4C F9                  <1>     stc     ;Set CF to kill the task
   188 00003D4D C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D1508020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2C000000)    <1>     mov qword [parentInt22], rax
    21                              <1> 
    22 00000036 488D15(923A0000)    <1>     lea rdx, critErrorHandler
    23 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    24 00000041 B824250000          <1>     mov eax, 2524h
    25 00000046 CD21                <1>     int 21h
    26 00000048 488D15(2D3D0000)    <1>     lea rdx, int23h
    27 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    28 00000053 B823250000          <1>     mov eax, 2523h
    29 00000058 CD21                <1>     int 21h
    30 0000005A 488D15(552E0000)    <1>     lea rdx, launchChild.appRet
    31 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    32 00000065 B822250000          <1>     mov eax, 2522h
    33 0000006A CD21                <1>     int 21h
    34                              <1> ;Get a pointer to DOS Sysvars
    35 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    36 0000006E CD21                <1>     int 21h
    37 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    38                              <1> ;Call for simple internationalisation data
    39 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    40 0000007C CD21                <1>     int 21h
    41 0000007E 3CFF                <1>     cmp al, -1
    42 00000080 7412                <1>     je .skipSwitch
    43 00000082 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    44 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    45 0000008B 7507                <1>     jne .skipSwitch
    46 0000008D C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    47                              <1> .skipSwitch:
    48 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    49 00000099 488D15(34000000)    <1>     lea rdx, ctryData
    50 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    51                              <1> ;Now determine if this is the master copy of COMMAND.COM
    52                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    53 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    54 000000A7 CD21                <1>     int 21h
    55 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    56 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    57 000000B1 CD21                <1>     int 21h
    58 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    59 000000B6 7574                <1>     jne .skipMaster
    60                              <1> ;Ok so we are master command.com
    61                              <1> ;Now make myself the real parent
    62 000000B8 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    63 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    64                              <1> ;Set current Drive in COMSPEC
    65 000000C6 B800190000          <1>     mov eax, 1900h ;Get current Drive
    66 000000CB CD21                <1>     int 21h
    67 000000CD 0441                <1>     add al, "A"
    68 000000CF 8805(4E0F0000)      <1>     mov byte [comspecEvar.cspec], al
    69                              <1> ;Set Int 2Eh up
    70 000000D5 488D15(A0180000)    <1>     lea rdx, int2Eh
    71 000000DC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    72 000000E1 CD21                <1>     int 21h
    73                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    74                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    75 000000E3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    76 000000E8 B800480000          <1>     mov eax, 4800h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 0F821EFFFFFF        <1>     jc .exitBad
    79                              <1> ;Set master environment as mine
    80 000000F5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    81 000000F9 488D35(460F0000)    <1>     lea rsi, masterEnv
    82 00000100 4889C7              <1>     mov rdi, rax
    83 00000103 B91E000000          <1>     mov ecx, menv_len
    84 00000108 F3A4                <1>     rep movsb   ;Copy the chars over!
    85                              <1> 
    86 0000010A 488D15(48090000)    <1>     lea rdx, crlf
    87 00000111 B409                <1>     mov ah, 09h
    88 00000113 CD21                <1>     int 21h
    89 00000115 E8(93220000)        <1>     call time
    90 0000011A E8(2E220000)        <1>     call date
    91 0000011F 488D15(48090000)    <1>     lea rdx, crlf
    92 00000126 B409                <1>     mov ah, 09h
    93 00000128 CD21                <1>     int 21h
    94 0000012A EB2E                <1>     jmp short .printInit
    95                              <1> .skipMaster:    
    96                              <1> ;We now search for the master environment!!
    97                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    98                              <1>     ; parent. This is the previous master command interpreter! This means
    99                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
   100                              <1>     ; then set our environment ptr in the PSP to the master environment.
   101 0000012C 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   102 00000133 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   103 0000013B 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
   104 00000142 F2AE                <1>     repne scasb
   105 00000144 67E313              <1>     jecxz .printInit
   106 00000147 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   107 0000014A E8(A4360000)        <1>     call ucChar
   108 0000014F 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   109 00000151 7507                <1>     jne .printInit
   110 00000153 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   111                              <1> .printInit:
   112 0000015A 488D1D(503D0000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   113                              <1> ;Finish by printing INIT string.
   114 00000161 53                  <1>     push rbx
   115 00000162 488D153A000000      <1>     lea rdx, initString
   116 00000169 B409                <1>     mov ah, 09h
   117 0000016B CD21                <1>     int 21h ;Print init string
   118 0000016D E8(E52A0000)        <1>     call version.printVersionNumber
   119 00000172 488D1560000000      <1>     lea rdx, initString2
   120 00000179 B409                <1>     mov ah, 09h
   121 0000017B CD21                <1>     int 21h ;Print init string
   122 0000017D 5B                  <1>     pop rbx
   123                              <1>     ;Now we add the stack to the alloc and paragraph align
   124 0000017E 4881C340060000      <1>     add rbx, stackSize
   125 00000185 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   126 0000018C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   127 00000190 48C1E304            <1>     shl rbx, 4
   128 00000194 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   129 00000197 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   130 0000019E E9(640F0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   131                              <1> ;Loader Data here
   132                              <1> initString: 
   133 000001A3 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   133 000001AC 66696320436F6D7075- <1>
   133 000001B5 746572205265736561- <1>
   133 000001BE 726368285229205343- <1>
   133 000001C7 502F444F5328522920- <1>
   133 000001D0 56657273696F6E2024  <1>
   134                              <1> initString2:
   135 000001D9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   135 000001E2 202020284329436F70- <1>
   135 000001EB 797269676874205363- <1>
   135 000001F4 69656E746966696320- <1>
   135 000001FD 436F6D707574657220- <1>
   135 00000206 526573656172636820- <1>
   135 0000020F 323032342E0D0A24    <1>
   136 00000217 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   136 00000220 20444F532076657273- <1>
   136 00000229 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+4+2 passes

