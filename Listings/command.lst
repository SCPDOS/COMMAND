     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17 0000009D 00                  <1> inCritical  db 0    ;Up if processing a command.
    18 0000009E FF                  <1> echoFlg     db -1   ;Global Echo flag, starts up!
    19                              <1> 
    20                              <1> 
    21                              <1> cmdLineStatePtr:
    22 0000009F 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    23 000000A0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    24 000000A2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    25                              <1> ;These variables are valid for a SINGLE command in a command line
    26                              <1> ;Next two bytes, if set to -1, flags error
    27 000000A4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    28 000000A5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    29                              <1> ;                    If 2, we are redirecting output to a file, by appending
    30 000000A6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    31 000000A8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    32                              <1> 
    33                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    34 000000AA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    35 000000AB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    36 000000AC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    37                              <1> 
    38 000000AD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    39 000000AE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    40 000000AF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    41                              <1> 
    42 000000B0 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    43                              <1> cmdStateL equ $ - cmdStatePtr
    44                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    45                              <1> 
    46                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    47 000000B1 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    48 000000B2 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    49 000000BA 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    49 000000C3 000000000000000000- <1>
    49 000000CC 000000000000000000- <1>
    49 000000D5 000000000000000000- <1>
    49 000000DE 000000000000000000- <1>
    49 000000E7 000000000000000000- <1>
    49 000000F0 000000000000000000- <1>
    49 000000F9 000000000000000000- <1>
    49 00000102 00000000000000      <1>
    50 00000109 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    50 00000112 000000000000000000- <1>
    50 0000011B 000000000000000000- <1>
    50 00000124 000000000000000000- <1>
    50 0000012D 000000000000000000- <1>
    50 00000136 000000000000000000- <1>
    50 0000013F 000000000000000000- <1>
    50 00000148 000000000000000000- <1>
    50 00000151 00000000000000      <1>
    51                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 00000158 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 00000161 00000000000000      <1>
    56 00000168 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    56 00000171 000000000000000000- <1>
    56 0000017A 000000000000000000- <1>
    56 00000183 000000000000000000- <1>
    56 0000018C 00000000000000      <1>
    57                              <1> 
    58 00000193 000000000000000000- <1> launchBlock db execProg_size dup (0)
    58 0000019C 000000000000000000- <1>
    58 000001A5 000000000000000000- <1>
    58 000001AE 0000000000          <1>
    59                              <1> 
    60 000001B3 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    60 000001BC 000000000000000000- <1>
    60 000001C5 000000000000000000- <1>
    60 000001CE 000000000000000000- <1>
    60 000001D7 000000000000000000- <1>
    60 000001E0 000000000000000000- <1>
    60 000001E9 000000000000000000- <1>
    60 000001F2 000000000000000000- <1>
    60 000001FB 000000000000000000- <1>
    60 00000204 000000000000000000- <1>
    60 0000020D 000000000000000000- <1>
    60 00000216 000000000000000000- <1>
    60 0000021F 000000000000000000- <1>
    60 00000228 000000000000000000- <1>
    60 00000231 00000000            <1>
    61                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    62 00000235 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    62 0000023E 000000000000000000- <1>
    62 00000247 000000000000000000- <1>
    62 00000250 000000000000000000- <1>
    62 00000259 000000000000000000- <1>
    62 00000262 000000000000000000- <1>
    62 0000026B 000000000000000000- <1>
    62 00000274 000000000000000000- <1>
    62 0000027D 000000000000000000- <1>
    62 00000286 000000000000000000- <1>
    62 0000028F 000000000000000000- <1>
    62 00000298 000000000000000000- <1>
    62 000002A1 000000000000000000- <1>
    62 000002AA 000000000000000000- <1>
    62 000002B3 00000000            <1>
    63 000002B7 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    63 000002C0 000000000000000000- <1>
    63 000002C9 000000000000000000- <1>
    63 000002D2 000000000000000000- <1>
    63 000002DB 000000000000000000- <1>
    63 000002E4 000000000000000000- <1>
    63 000002ED 000000000000000000- <1>
    63 000002F6 000000000000000000- <1>
    63 000002FF 000000000000000000- <1>
    63 00000308 000000000000000000- <1>
    63 00000311 000000000000000000- <1>
    63 0000031A 000000000000000000- <1>
    63 00000323 000000000000000000- <1>
    63 0000032C 000000000000000000- <1>
    63 00000335 00000000            <1>
    64 00000339 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    64 00000342 000000000000000000- <1>
    64 0000034B 000000000000000000- <1>
    64 00000354 000000000000000000- <1>
    64 0000035D 000000000000000000- <1>
    64 00000366 000000000000000000- <1>
    64 0000036F 000000000000000000- <1>
    64 00000378 000000000000000000- <1>
    64 00000381 00000000000000      <1>
    65 00000388 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    65 00000391 0000000000          <1>
    66                              <1> 
    67 00000396 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    67 0000039F 000000000000000000- <1>
    67 000003A8 000000000000000000- <1>
    67 000003B1 000000000000000000- <1>
    67 000003BA 000000000000000000- <1>
    67 000003C3 000000000000000000- <1>
    67 000003CC 000000000000000000- <1>
    67 000003D5 000000000000000000- <1>
    67 000003DE 00000000000000      <1>
    68 000003E5 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    68 000003EE 000000000000000000- <1>
    68 000003F7 000000000000000000- <1>
    68 00000400 000000000000000000- <1>
    68 00000409 000000000000000000- <1>
    68 00000412 000000000000000000- <1>
    68 0000041B 000000000000000000- <1>
    68 00000424 000000000000000000- <1>
    68 0000042D 00000000000000      <1>
    69                              <1> 
    70                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    71 00000434 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    71 0000043D 000000000000000000- <1>
    71 00000446 000000000000000000- <1>
    71 0000044F 000000000000000000- <1>
    71 00000458 000000000000000000- <1>
    71 00000461 000000000000000000- <1>
    71 0000046A 000000000000000000- <1>
    71 00000473 000000000000000000- <1>
    71 0000047C 00000000000000      <1>
    72 00000483 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    72 0000048C 000000000000000000- <1>
    72 00000495 000000000000000000- <1>
    72 0000049E 000000000000000000- <1>
    72 000004A7 000000000000000000- <1>
    72 000004B0 000000000000000000- <1>
    72 000004B9 000000000000000000- <1>
    72 000004C2 000000000000000000- <1>
    72 000004CB 00000000000000      <1>
    73                              <1> 
    74 000004D2 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    75 000004DA 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    76                              <1> 
    77                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    78                              <1> ; a really long invalid DOS path for PATH to work properly.
    79 000004E2 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    79 000004EB 000000000000000000- <1>
    79 000004F4 000000000000000000- <1>
    79 000004FD 000000000000000000- <1>
    79 00000506 000000000000000000- <1>
    79 0000050F 000000000000000000- <1>
    79 00000518 000000000000000000- <1>
    79 00000521 000000000000000000- <1>
    79 0000052A 000000000000000000- <1>
    79 00000533 000000000000000000- <1>
    79 0000053C 000000000000000000- <1>
    79 00000545 000000000000000000- <1>
    79 0000054E 000000000000000000- <1>
    79 00000557 000000000000000000- <1>
    79 00000560 000000000000000000- <1>
    79 00000569 000000000000000000- <1>
    79 00000572 000000000000000000- <1>
    79 0000057B 000000000000000000- <1>
    79 00000584 000000000000000000- <1>
    79 0000058D 000000000000000000- <1>
    79 00000596 000000000000000000- <1>
    79 0000059F 000000000000000000- <1>
    79 000005A8 000000000000000000- <1>
    79 000005B1 000000000000000000- <1>
    79 000005BA 000000000000000000- <1>
    79 000005C3 000000000000000000- <1>
    79 000005CC 000000000000000000- <1>
    79 000005D5 000000000000000000- <1>
    79 000005DE 0000000000000000    <1>
    80                              <1> 
    81                              <1> ;Internal Function vars
    82                              <1> ;Dir Vars
    83 000005E6 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    84                              <1> ;                                   Bit[1] set => /P or /p specified
    85                              <1> ;                                   Bit[2] set => A file/path specified
    86 000005E7 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    87 000005E8 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
    88 000005EC 00                  <1> dirDrv      db 0    ;0 based drive number to use
    89 000005ED 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    89 000005F6 000000000000000000- <1>
    89 000005FF 000000000000000000- <1>
    89 00000608 000000000000000000- <1>
    89 00000611 000000000000000000- <1>
    89 0000061A 000000000000000000- <1>
    89 00000623 000000000000000000- <1>
    89 0000062C 000000000000000000- <1>
    89 00000635 000000000000000000- <1>
    89 0000063E 000000000000000000- <1>
    89 00000647 000000000000000000- <1>
    89 00000650 000000000000000000- <1>
    89 00000659 000000000000000000- <1>
    89 00000662 000000000000000000- <1>
    89 0000066B 00000000            <1>
    90 0000066F 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    90 00000678 3F3F3F3F3F3F3F      <1>
    91                              <1> dirWideType equ 1
    92                              <1> dirPageType equ 2
    93                              <1> dirFileType equ 4
    94                              <1> ;Volume Vars
    95                              <1> volFcb:
    96                              <1>     istruc exFcb
    97 0000067F FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    98 00000680 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    99 00000686 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   100 00000687 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   101 0000068F 3F3F3F              <1>     at exFcb.fileext,   db "???"
   102 00000692 00000000            <1>     at exFcb.curBlock,  dd 0
   103 00000696 00<rep 15h>         <1>     iend 
   104                              <1> 
   105                              <1> ;Time/Date vars
   106 000006AB 00                  <1> td1 db 0    ;Minutes/Year
   107 000006AC 00                  <1> td2 db 0    ;Hours/Zero
   108 000006AD 00                  <1> td3 db 0    ;Hundredths/Day
   109 000006AE 00                  <1> td4 db 0    ;Seconds/Month
   110                              <1> 
   111                              <1> ;Rename/Copy/Delete Buffers
   112                              <1> delPath:
   113 000006AF 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   113 000006B8 000000000000000000- <1>
   113 000006C1 000000000000000000- <1>
   113 000006CA 000000000000000000- <1>
   113 000006D3 000000000000000000- <1>
   113 000006DC 000000000000000000- <1>
   113 000006E5 000000000000000000- <1>
   113 000006EE 000000000000000000- <1>
   113 000006F7 000000000000000000- <1>
   113 00000700 000000000000000000- <1>
   113 00000709 000000000000000000- <1>
   113 00000712 000000000000000000- <1>
   113 0000071B 000000000000000000- <1>
   113 00000724 000000000000000000- <1>
   113 0000072D 00000000            <1>
   114 00000731 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   114 0000073A 000000000000000000- <1>
   114 00000743 000000000000000000- <1>
   114 0000074C 000000000000000000- <1>
   114 00000755 000000000000000000- <1>
   114 0000075E 000000000000000000- <1>
   114 00000767 000000000000000000- <1>
   114 00000770 000000000000000000- <1>
   114 00000779 000000000000000000- <1>
   114 00000782 000000000000000000- <1>
   114 0000078B 000000000000000000- <1>
   114 00000794 000000000000000000- <1>
   114 0000079D 000000000000000000- <1>
   114 000007A6 000000000000000000- <1>
   114 000007AF 00000000            <1>
   115 000007B3 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   116 000007BB 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   117 000007C3 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   117 000007CC 2020                <1>
   118                              <1> ;Copy vars
   119 000007CE FFFF                <1> sourceHdl   dw -1
   120 000007D0 FFFF                <1> destHdl     dw -1
   121 000007D2 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   122 000007D4 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time, if we cant alloc
   122 000007DD 000000000000000000- <1>
   122 000007E6 000000000000000000- <1>
   122 000007EF 000000000000000000- <1>
   122 000007F8 000000000000000000- <1>
   122 00000801 000000000000000000- <1>
   122 0000080A 000000000000000000- <1>
   122 00000813 000000000000000000- <1>
   122 0000081C 000000000000000000- <1>
   122 00000825 000000000000000000- <1>
   122 0000082E 000000000000000000- <1>
   122 00000837 000000000000000000- <1>
   122 00000840 000000000000000000- <1>
   122 00000849 000000000000000000- <1>
   122 00000852 0000                <1>
   123 00000854 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   124 0000085C 0000                <1> cpBufSz     dw 0    ;Copy Buffer size
   125 0000085E 00                  <1> cpyFlg      db 0    ;Copy state flag
   126                              <1> 
   127                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file. Else, binary
   128                              <1> ascDes      equ 2   ;Set if ascii write to file. Else, binary.
   129                              <1> catCpy      equ 4   ;Set if we are concatinating files. Default ASCII read.
   130                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   131                              <1> 
   132                              <1> ;Environment manipulation vars
   133 0000085F 0000                <1> envVarSz        dw 0    ;Env var size
   134 00000861 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000863 03444952            <1>     db 3, "DIR"
     8 00000867 1B1A                <1>     dw dir - startLbl
     9                              <1> 
    10 00000869 024344              <1>     db 2, "CD"
    11 0000086C FF1E                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000086E 054348444952        <1>     db 5, "CHDIR"
    14 00000874 FF1E                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000876 024D44              <1>     db 2, "MD"
    17 00000879 7A1F                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000087B 054D4B444952        <1>     db 5, "MKDIR"
    20 00000881 7A1F                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000883 025244              <1>     db 2, "RD"
    23 00000886 C31F                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000888 05524D444952        <1>     db 5, "RMDIR"
    26 0000088E C31F                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000890 0344454C            <1>     db 3, "DEL"
    29 00000894 4B22                <1>     dw erase - startLbl
    30                              <1> 
    31 00000896 054552415345        <1>     db 5, "ERASE"
    32 0000089C 4B22                <1>     dw erase - startLbl
    33                              <1> 
    34 0000089E 0444415445          <1>     db 4, "DATE"
    35 000008A3 8E23                <1>     dw date - startLbl
    36                              <1> 
    37 000008A5 0454494D45          <1>     db 4, "TIME"
    38 000008AA 3C25                <1>     dw time - startLbl
    39                              <1> 
    40 000008AC 04434F5059          <1>     db 4, "COPY"
    41 000008B1 AC20                <1>     dw copy - startLbl
    42                              <1> 
    43 000008B3 0443545459          <1>     db 4, "CTTY"
    44 000008B8 6526                <1>     dw ctty - startLbl
    45                              <1> 
    46 000008BA 03434C53            <1>     db 3, "CLS"
    47 000008BE 0027                <1>     dw cls - startLbl
    48                              <1> 
    49 000008C0 05425245414B        <1>     db 5, "BREAK"
    50 000008C6 7227                <1>     dw break - startLbl
    51                              <1> 
    52 000008C8 06564552494659      <1>     db 6, "VERIFY"
    53 000008CF F327                <1>     dw verify - startLbl
    54                              <1> 
    55 000008D1 0652454E414D45      <1>     db 6, "RENAME"
    56 000008D8 7028                <1>     dw rename - startLbl
    57                              <1> 
    58 000008DA 0352454E            <1>     db 3, "REN"
    59 000008DE 7028                <1>     dw rename - startLbl
    60                              <1>     
    61 000008E0 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000008E9 6D2C                <1>     dw truename - startLbl
    63                              <1> 
    64 000008EB 03564552            <1>     db 3, "VER"
    65 000008EF 532E                <1>     dw version - startLbl
    66                              <1> 
    67 000008F1 03564F4C            <1>     db 3, "VOL"
    68 000008F5 942D                <1>     dw volume - startLbl
    69                              <1> 
    70 000008F7 034D454D            <1>     db 3, "MEM"
    71 000008FB 972E                <1>     dw memory - startLbl
    72                              <1> 
    73 000008FD 0445584954          <1>     db 4, "EXIT"
    74 00000902 9430                <1>     dw exit - startLbl
    75                              <1> 
    76 00000904 0454595045          <1>     db 4, "TYPE"
    77 00000909 E12F                <1>     dw type - startLbl
    78                              <1> 
    79 0000090B 054C4142454C        <1>     db 5, "LABEL"
    80 00000911 BE2C                <1>     dw label - startLbl
    81                              <1> 
    82 00000913 0450415448          <1>     db 4, "PATH"
    83 00000918 EB33                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 0000091A 03534554            <1>     db 3, "SET"
    86 0000091E CC32                <1>     dw set - startLbl
    87                              <1> 
    88 00000920 0650524F4D5054      <1>     db 6, "PROMPT"
    89 00000927 CA34                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 00000929 054D4B4C424C        <1>     db 5, "MKLBL"
    92 0000092F E82C                <1>     dw mklbl - startLbl
    93                              <1> 
    94 00000931 05524D4C424C        <1>     db 5, "RMLBL"
    95 00000937 232D                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 00000939 05524E4C424C        <1>     db 5, "RNLBL"
    98 0000093F 5E2D                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 00000941 05544F554348        <1>     db 5, "TOUCH"
   101 00000947 602A                <1>     dw touch - startLbl
   102                              <1> 
   103 00000949 044A4F494E          <1>     db 4, "JOIN"
   104 0000094E C32A                <1>     dw join - startLbl
   105                              <1> 
   106 00000950 055355425354        <1>     db 5, "SUBST"
   107 00000956 862B                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109 00000958 0558434F5059        <1>     db 5, "XCOPY"
   110 0000095E 0D20                <1>     dw xcopy - startLbl
   111                              <1> 
   112 00000960 044543484F          <1>     db 4, "ECHO"
   113 00000965 6B35                <1>     dw echo - startLbl
   114 00000967 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000968 0D0A24              <1> crlf    db  CR,LF,"$"
     3 0000096B 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000970 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000979 696C65206D69737369- <1>
     4 00000982 6E670D0A24          <1>
     5 00000987 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000990 6469736B2077697468- <1>
     5 00000999 206261746368206669- <1>
     5 000009A2 6C65                <1>
     6 000009A4 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000009AD 737320616E79206B65- <1>
     6 000009B6 79207768656E207265- <1>
     6 000009BF 6164790D0A24        <1>
     7 000009C5 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000009CE 6E64206F722066696C- <1>
     7 000009D7 65206E616D650D0A24  <1>
     8 000009E0 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000009E9 2066696C65206E616D- <1>
     8 000009F2 65206F7220          <1>
     9 000009F7 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 00000A00 666F756E640D0A24    <1>
    10 00000A08 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    10 00000A11 656E74206469736B20- <1>
    10 00000A1A 73706163650D0A24    <1>
    11 00000A22 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000A2B 7669726F6E6D656E74- <1>
    11 00000A34 2073706163650D0A24  <1>
    12 00000A3D 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000A46 74696F6E206572726F- <1>
    12 00000A4F 720D0A24            <1>
    13 00000A53 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000A5C 6F7420626520636F70- <1>
    13 00000A65 696564206F6E746F20- <1>
    13 00000A6E 697473656C660D0A24  <1>
    14 00000A77 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000A80 662064657374696E61- <1>
    14 00000A89 74696F6E206C6F7374- <1>
    14 00000A92 206265666F72652063- <1>
    14 00000A9B 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000AA1 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000AAA 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000AB3 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000ABC 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000ABD 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000AC6 65650D0A24          <1>
    21 00000ACB 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000AD4 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000ADD 726976652073706563- <1>
    23 00000AE6 696669636174696F6E- <1>
    23 00000AEF 0D0A24              <1>
    24 00000AF2 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000AFB 6B6579207768656E20- <1>
    24 00000B04 7265616479202E202E- <1>
    24 00000B0D 202E2024            <1>
    25 00000B11 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000B1A 6172616D657465720D- <1>
    25 00000B23 0A24                <1>
    26                              <1> 
    27 00000B25 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000B2E 576564546875467269- <1>
    27 00000B37 536174              <1>
    28 00000B3A 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000B43 206461746524        <1>
    29 00000B49 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000B52 6174652069732024    <1>
    30 00000B5A 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000B63 657720646174652024  <1>
    31 00000B6C 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000B75 293A2024            <1>
    32 00000B79 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000B82 293A2024            <1>
    33 00000B86 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000B8F 293A2024            <1>
    34 00000B93 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000B9C 2074696D6524        <1>
    35 00000BA2 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000BAB 696D652069732024    <1>
    36 00000BB3 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000BBC 65772074696D653A20- <1>
    36 00000BC5 24                  <1>
    37                              <1> 
    38 00000BC6 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000BCF 7572652028592F4E29- <1>
    38 00000BD8 3F2024              <1>
    39                              <1> 
    40 00000BDB 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000BE4 56657273696F6E2024  <1>
    41                              <1> 
    42 00000BED 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000BF6 6E2064726976652024  <1>
    43 00000BFF 2069732024          <1> volOk   db " is $"
    44 00000C04 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000C0D 6162656C24          <1>
    45                              <1> 
    46 00000C12 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000C1B 69726563746F72790D- <1>
    46 00000C24 0A24                <1>
    47 00000C26 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000C2F 206372656174652064- <1>
    47 00000C38 69726563746F72790D- <1>
    47 00000C41 0A24                <1>
    48 00000C43 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000C4C 6174682C206E6F7420- <1>
    48 00000C55 6469726563746F7279- <1>
    48 00000C5E 2C0D0A              <1>
    49 00000C61 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000C6A 6F7279206E6F742065- <1>
    49 00000C73 6D7074790D0A24      <1>
    50 00000C7A 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000C83 79206F66202024      <1>
    51 00000C8A 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000C93 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000C9C 6E6965640D0A24      <1>
    53 00000CA3 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000CAC 72697665206973206E- <1>
    53 00000CB5 6F206C6F6E67657220- <1>
    53 00000CBE 76616C696424        <1>
    54                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    55 00000CC4 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000CCD 65766963650D0A24    <1>
    56 00000CD5 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000CDE 20666F756E640D0A24  <1>
    57 00000CE7 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000CF0 726F720D0A24        <1>
    58 00000CF6 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000CFF 6F74206265206E6573- <1>
    58 00000D08 7465640D0A24        <1>
    59 00000D0E 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000D17 6174652066696C6520- <1>
    59 00000D20 6572726F7220647572- <1>
    59 00000D29 696E6720706970650D- <1>
    59 00000D32 0A24                <1>
    60 00000D34 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000D3D 2062696E6172792072- <1>
    60 00000D46 656164732066726F6D- <1>
    60 00000D4F 206120646576696365- <1>
    60 00000D58 0D0A24              <1>
    61 00000D5B 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000D61 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000D66 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000D6F 24                  <1>
    64 00000D70 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000D79 2024                <1>
    65 00000D7B 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000D84 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000D8D 617468206F72206669- <1>
    66 00000D96 6C65206E616D650D0A- <1>
    66 00000D9F 24                  <1>
    67 00000DA0 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000DA9 756D626572206F6620- <1>
    67 00000DB2 706172616D65746572- <1>
    67 00000DBB 730D0A24            <1>
    68 00000DBF 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000DC8 74696E6720746F2064- <1>
    68 00000DD1 6576696365          <1>
    69 00000DD6 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000DDA 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000DE3 20202020202020546F- <1>
    71 00000DEC 74616C207379737465- <1>
    71 00000DF5 6D206D656D6F72793A- <1>
    71 00000DFE 2024                <1>
    72 00000E00 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000E09 20202020202020204D- <1>
    72 00000E12 656D6F727920757365- <1>
    72 00000E1B 6420627920444F533A- <1>
    72 00000E24 2024                <1>
    73 00000E26 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000E2F 656D6F727920757365- <1>
    73 00000E38 64206279206170706C- <1>
    73 00000E41 69636174696F6E733A- <1>
    73 00000E4A 2024                <1>
    74 00000E4C 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000E55 656D6F727920726573- <1>
    74 00000E5E 657276656420627920- <1>
    74 00000E67 68617264776172653A- <1>
    74 00000E70 2024                <1>
    75 00000E72 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000E7B 202020202020202020- <1>
    75 00000E84 2020202020204D656D- <1>
    75 00000E8D 6F727920667265653A- <1>
    75 00000E96 2024                <1>
    76 00000E98 20627974657324      <1> memByte db " bytes$"
    77 00000E9F 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000EA8 6F7420417373657274- <1>
    77 00000EB1 61696E20444F532045- <1>
    77 00000EBA 6E74727920506F696E- <1>
    77 00000EC3 7424                <1>
    78 00000EC5 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000ECE 416C6C6F636174696F- <1>
    78 00000ED7 6E204572726F7224    <1>
    79 00000EDF 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000EE8 4572726F7224        <1>
    80 00000EEE 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000EF7 68616C74656424      <1>
    81                              <1> 
    82 00000EFE 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000F07 206372656174652070- <1>
    82 00000F10 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000F15 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000F1E 6F6E206572726F720D- <1>
    84 00000F27 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000F28 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000F2C 2020202024          <1> fourSpc  db "    $"
    89 00000F31 20202024            <1> threeSpc db "   $"
    90 00000F35 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000F38 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000F41 696679204F4E206F72- <1>
    92 00000F4A 204F46460D0A24      <1>
    93                              <1> 
    94 00000F51 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    95 00000F59 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000F62 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000F66 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000F6E 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000F77 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000F7D 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000F84 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000F87 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000F8B C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000F8E B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000F90 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000F93 CD21                <1>     int 21h
    11                              <1> commandMain:
    12 00000F95 488B2569F0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    13 00000F9C FC                  <1>     cld ;Ensure stringops are done the right way
    14 00000F9D C6050FF2FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    15 00000FA4 C6058AF2FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    16 00000FAB C60505F3FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    17                              <1> .inputMain:         ;Only reset once per line!
    18 00000FB2 E8BA280000          <1>     call printCRLF  ;Command complete, indicate with new line!
    19 00000FB7 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    20 00000FBC CD21                <1>     int 21h
    21 00000FBE B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    22 00000FC3 BA01000000          <1>     mov edx, 1      ;Start new print job
    23 00000FC8 CD21                <1>     int 21h
    24                              <1> .inputGetAgain:
    25 00000FCA E80B2B0000          <1>     call clearCommandLineState  ;Cleans all handles 5->MAX
    26 00000FCF F605DBF0FFFFFF      <1>     test byte [batFlag], -1 ;If batch on, get the next line to execute
    27 00000FD6 0F852C090000        <1>     jnz batNextLine
    28                              <1> .inputGetCmdlineAgain:
    29 00000FDC E8F7270000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    30 00000FE1 488D15CBF1FFFF      <1>     lea rdx, inBuffer
    31 00000FE8 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    32 00000FED CD21                <1>     int 21h
    33 00000FEF E87D280000          <1>     call printCRLF  ;Note we have accepted input
    34                              <1> ;First check we had something typed in of length greater than 0
    35 00000FF4 803DB9F1FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    36 00000FFB 74DF                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    37                              <1>     ;Copy over the input text
    38 00000FFD 488D35AFF1FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    39                              <1> .batCopy:               ;Jump here to copy the batch input line 
    40 00001004 488D3D2AF2FFFF      <1>     lea rdi, cpyBuffer
    41 0000100B B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    42 00001010 F3A4                <1>     rep movsb
    43 00001012 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    44                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    45 00001017 488D359BF2FFFF      <1>     lea rsi, cmdBuffer + 2
    46 0000101E E8852A0000          <1>     call skipDelimiters
    47 00001023 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    48 00001026 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    49 00001028 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    50 0000102B 0F84D8030000        <1>     je hardSynErr
    51                              <1> .pipeLoop:
    52 00001031 4C8B05D7EFFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    53 00001038 E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    54                              <1>     ;ZF here indicates if we are at the end of the command or nots
    55 0000103D E813070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    56 00001042 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    57 00001047 E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    58                              <1> .okRet:                     ;Normal return point for processing
    59 0000104C E809050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    60 00001051 F60547F0FFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    61 00001058 0F8454FFFFFF        <1>     jz .inputMain
    62                              <1>     ;Now we pull the commandline forwards. 
    63 0000105E E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    64 00001063 488D3D4FF2FFFF      <1>     lea rdi, cmdBuffer + 2
    65 0000106A 4889F1              <1>     mov rcx, rsi
    66 0000106D 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    67 00001070 280D42F2FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    68 00001076 8A0D3CF2FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    69 0000107C FFC1                <1>     inc ecx     ;One more for the terminating char
    70 0000107E F3A4                <1>     rep movsb   ;Move the chars over    
    71 00001080 E8442A0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    72 00001085 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    73                              <1> 
    74                              <1> makeCmdBuffer:
    75                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    76                              <1> ; copy buffer. Called only once in a cycle.
    77                              <1> ;Throughout: CL has char count, CH has quote count
    78 00001087 488D35A9F1FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    79 0000108E 31C9                <1>     xor ecx, ecx
    80 00001090 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    81                              <1> .countQuotes:
    82 00001093 AC                  <1>     lodsb
    83 00001094 3C22                <1>     cmp al, '"'
    84 00001096 7507                <1>     jne .notQuoteToCount
    85 00001098 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    86 0000109A E9F4FFFFFF          <1>     jmp .countQuotes
    87                              <1> .notQuoteToCount:
    88 0000109F 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    89 000010A1 75F0                <1>     jne .countQuotes
    90 000010A3 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    91 000010A6 488D3D0CF2FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
    92                              <1> .getChar:
    93 000010AD AC                  <1>     lodsb           ;Get char in buffer, advance rsi
    94 000010AE 3C22                <1>     cmp al, '"'     ;Is char a quote?
    95 000010B0 750E                <1>     jne .notQuote
    96 000010B2 FECD                <1>     dec ch          ;We have a quote, now decrement
    97 000010B4 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
    98                              <1> .searchForClosingQuote:
    99                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   100 000010B6 AA                  <1>     stosb   ;Store char and inc rdi
   101 000010B7 FEC1                <1>     inc cl
   102 000010B9 AC                  <1>     lodsb   ;Get next char
   103 000010BA 3C22                <1>     cmp al, '"'
   104 000010BC 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   105 000010BE FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   106                              <1> .notQuote:
   107 000010C0 E82F060000          <1>     call peelRedir      ;Intervene redir if needed
   108 000010C5 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   109 000010C7 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   110 000010C9 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   111                              <1> .pipeHandle:
   112                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   113 000010CB 0F8438030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   114                              <1> .notRedir:
   115 000010D1 AA                  <1>     stosb       ;Store char and advance rdi
   116 000010D2 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   117 000010D4 7404                <1>     je .exit
   118 000010D6 FEC1                <1>     inc cl      ;Increment char count
   119 000010D8 EBD3                <1>     jmp short .getChar    ;If not, get next char
   120                              <1> .exit:
   121 000010DA 880DD8F1FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   122                              <1>     return
    13                              <2> %%_ret:
    14 000010E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> makeCmdString:
   125                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   126                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   127                              <1> ; Copies into the psp.
   128                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   129 000010E1 488D35D1F1FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   130 000010E8 31C9                <1>     xor ecx, ecx
   131 000010EA 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   132                              <1> .countQuotes:
   133 000010ED AC                  <1>     lodsb
   134 000010EE 3C22                <1>     cmp al, '"'
   135 000010F0 7507                <1>     jne .notQuoteToCount
   136 000010F2 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   137 000010F4 E9F4FFFFFF          <1>     jmp .countQuotes
   138                              <1> .notQuoteToCount:
   139 000010F9 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   140 000010FB 75F0                <1>     jne .countQuotes
   141 000010FD 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   142 00001100 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   143                              <1> .getChar:
   144 00001107 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   145 00001108 3C22                <1>     cmp al, '"'     ;Is char a quote?
   146 0000110A 750E                <1>     jne .notQuote
   147 0000110C FECD                <1>     dec ch          ;We have a quote, now decrement
   148 0000110E 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   149                              <1> .searchForClosingQuote:
   150                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   151 00001110 AA                  <1>     stosb   ;Store char and inc rdi
   152 00001111 FEC1                <1>     inc cl
   153 00001113 AC                  <1>     lodsb   ;Get next char
   154 00001114 3C22                <1>     cmp al, '"'
   155 00001116 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   156 00001118 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   157                              <1> .notQuote:
   158 0000111A 3C7C                <1>     cmp al, "|"
   159 0000111C 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   160 0000111E B00D                <1>     mov al, CR          ;Store the pipe char
   161 00001120 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   162                              <1> .notPipe:
   163 00001123 AA                  <1>     stosb       ;Store char and advance rdi
   164 00001124 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   165 00001126 7404                <1>     je .exit
   166 00001128 FEC1                <1>     inc cl      ;Increment char count
   167 0000112A EBDB                <1>     jmp short .getChar    ;If not, get next char
   168                              <1> .exit:
   169 0000112C 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   170 0000112F 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   171 00001136 803E0D              <1>     cmp byte [rsi], CR  
   172                              <1>     return
    13                              <2> %%_ret:
    14 00001139 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> analyseCmdline:
   175                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   176                              <1> ; processes the command name into the FCB.  
   177 0000113A C60547F2FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   178                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   179 00001141 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   180 00001148 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   181 0000114B 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   182 0000114F 8A05D5EEFFFF        <1>     mov al, byte [switchChar]
   183 00001155 F2AE                <1>     repne scasb                     ;Scan for the switch char
   184 00001157 7506                <1>     jne .noSwitchFnd
   185 00001159 F61551EFFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   186                              <1> .noSwitchFnd:
   187 0000115F E844290000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   188 00001164 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   189                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001167 74(39)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   190 00001169 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   191                              <1> .plp:
   192 0000116C 488D3DE5EFFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   193 00001173 B801290000          <1>     mov eax, 2901h
   194 00001178 CD21                <1>     int 21h
   195 0000117A 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   196 0000117C 0F8402010000        <1>     je .exitBadDrv
   197                              <1> .trailingDotLp:
   198                              <1> ;Reverse along trailing dots!
   199 00001182 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   200 00001186 7505                <1>     jne .noTrailingDots
   201 00001188 48FFCE              <1>     dec rsi
   202 0000118B EBF5                <1>     jmp short .trailingDotLp
   203                              <1> .noTrailingDots:
   204 0000118D 8A0596EEFFFF        <1>     mov al, byte [pathSep]  
   205 00001193 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   206 00001195 7525                <1>     jne .notPs
   207 00001197 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   208 0000119A AC                  <1>     lodsb   ;Get this char
   209 0000119B 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   210 0000119E 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   211 000011A0 7217                <1>     jb .delimfnd    ;Also a delimiter
   212 000011A2 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   213 000011A4 7413                <1>     je .delimfnd
   214 000011A6 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   215 000011A8 740F                <1>     je .delimfnd
   216 000011AA 3C2E                <1>     cmp al, byte "."
   217 000011AC 740B                <1>     je .delimfnd
   218 000011AE 3C22                <1>     cmp al, byte '"'
   219 000011B0 7407                <1>     je .delimfnd
   220 000011B2 E8FF280000          <1>     call isALdelimiter  ;Is this a delim char?
   221 000011B7 75B3                <1>     jne .plp            ;If not, we loop again
   222                              <1> .delimfnd:
   223 000011B9 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   224                              <1> .notPs:
   225                              <1> ;Now we have reached the end of the command, rsi points to the first char
   226                              <1> ; after the command, whether a delimiter or not.
   227 000011BC 4889F1              <1>     mov rcx, rsi
   228 000011BF 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   229 000011C2 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   230 000011C5 488D3D6DF1FFFF      <1>     lea rdi, cmdPathSpec
   231 000011CC F3A4                <1>     rep movsb
   232 000011CE 30C0                <1>     xor al, al
   233 000011D0 AA                  <1>     stosb   ;Store a terminating null
   234 000011D1 4887DE              <1>     xchg rbx, rsi
   235                              <1> ;Now we build FCBs for the arguments!
   236 000011D4 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   237 000011DB E893000000          <1>     call .skipAndCheckCR
   238 000011E0 745B                <1>     je .setupCmdVars
   239 000011E2 C605C1EEFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   240 000011E9 4889F0              <1>     mov rax, rsi
   241 000011EC 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   242 000011EF 8805B6EEFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   243 000011F5 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   244 000011F9 B801290000          <1>     mov eax, 2901h
   245 000011FE CD21                <1>     int 21h
   246 00001200 8805A6EEFFFF        <1>     mov byte [arg1FCBret], al
   247                              <1> .skipArg:
   248 00001206 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   249 00001207 3C0D                <1>     cmp al, CR
   250 00001209 7432                <1>     je .setupCmdVars
   251 0000120B E8A6280000          <1>     call isALdelimiter
   252 00001210 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   253 00001212 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   254 00001217 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   255 00001219 C6058DEEFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   256 00001220 4889F0              <1>     mov rax, rsi            
   257 00001223 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   258 00001226 880582EEFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   259 0000122C 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   260 00001230 B801290000          <1>     mov eax, 2901h
   261 00001235 CD21                <1>     int 21h
   262 00001237 880572EEFFFF        <1>     mov byte [arg2FCBret], al
   263                              <1> .setupCmdVars:
   264                              <1> ;Before returning, we copy the command name to cmdName 
   265 0000123D 488D3DF5F0FFFF      <1>     lea rdi, cmdPathSpec
   266 00001244 E816290000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   267 00001249 E83E280000          <1>     call strlen ;Get the length of the final path componant
   268 0000124E 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   269 00001254 7726                <1>     ja .exitBad     ;Return error
   270 00001256 4889FE              <1>     mov rsi, rdi
   271 00001259 488D3D28F1FFFF      <1>     lea rdi, cmdName
   272 00001260 FFC9                <1>     dec ecx ;Minus the terminating null
   273 00001262 880F                <1>     mov byte [rdi], cl ;Store the length here
   274 00001264 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   275                              <1> .cpCmdName:
   276 00001267 AC                  <1>     lodsb
   277 00001268 E829280000          <1>     call ucChar ;Uppercase the char
   278 0000126D AA                  <1>     stosb
   279 0000126E FFC9                <1>     dec ecx
   280 00001270 75F5                <1>     jnz .cpCmdName
   281                              <1>     return
    13                              <2> %%_ret:
    14 00001272 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> .skipAndCheckCR:
   283                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   284 00001273 E830280000          <1>     call skipDelimiters ;Go to the next char in the input line
   285 00001278 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   286                              <1>     return
    13                              <2> %%_ret:
    14 0000127B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   287                              <1> .exitBad:
   288 0000127C C60505F1FFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   289                              <1>     return
    13                              <2> %%_ret:
    14 00001283 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> .exitBadDrv:
   291 00001284 C605FDF0FFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   292 0000128B E849070000          <1>     call badDriveError
   293                              <1>     return
    13                              <2> %%_ret:
    14 00001290 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> doCommandLine:
   296                              <1>     ;The following check accounts for the end of a piped command
   297 00001291 803DF0F0FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   298 00001298 0F846B010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   299 0000129E 803DE3F0FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   300 000012A5 0F8467070000        <1>     je badCmdError
   301 000012AB 803DD6F0FFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   302                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012B2 74(90)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   303 000012B4 488D357EF0FFFF      <1>     lea rsi, cmdPathSpec
   304 000012BB 0FB71D77F0FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   305 000012C2 80FF3A              <1>     cmp bh, ":"
   306 000012C5 7520                <1>     jne .noDriveSpecified
   307 000012C7 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   308 000012C9 E8C8270000          <1>     call ucChar     ;Uppercase al
   309 000012CE 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   310                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   311 000012D0 803DB1F0FFFF02      <1>     cmp byte [cmdName], 2
   312 000012D7 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   313 000012D9 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   314 000012DB E882270000          <1>     call setDrive
   315                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012E0 74(90)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   316 000012E2 E9F2060000          <1>     jmp badDriveError
   317                              <1> .noDriveSpecified:
   318                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   319 000012E7 488D1DC9EFFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   320 000012EE 488D3593F0FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   321 000012F5 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   322 000012FA BAFFFF0000          <1>     mov edx, 0FFFFh
   323 000012FF B5FF                <1>     mov ch, -1
   324 00001301 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   325 00001303 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   326 00001308 BAFFFF0000          <1>     mov edx, 0FFFFh
   327 0000130D 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   328 0000130F CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   329                              <1>             ;        al = 0  if the command should be executed as usual
   330 00001311 84C0                <1>     test al, al
   331 00001313 7444                <1>     jz .executeInternal
   332                              <1>     ;Here we execute externally and return to the prompt
   333                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   334 00001315 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   335 0000131C 488D3565F0FFFF      <1>     lea rsi, cmdName        
   336 00001323 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   337 00001328 BAFFFF0000          <1>     mov edx, 0FFFFh
   338 0000132D B5FF                <1>     mov ch, -1
   339 0000132F CD2F                <1>     int 2Fh
   340 00001331 803D50F0FFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   341                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001338 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000133A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   343                              <1>     ; is an external command that is in the CD or in the PATH.
   344                              <1>     ;Should not be used for this purpose but it is here...
   345 0000133B E87E050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   346 00001340 488D3541F0FFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   347 00001347 AC                  <1>     lodsb                   ;Get the name length
   348 00001348 0FB6C8              <1>     movzx ecx, al
   349 0000134B 488D3DE7EFFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   350 00001352 F3A4                <1>     rep movsb   
   351 00001354 31C0                <1>     xor eax, eax
   352 00001356 AA                  <1>     stosb   ;Store null terminator
   353 00001357 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   354                              <1> .executeInternal:
   355 00001359 E860050000          <1>     call pullCommandline    ;Now pull the tail down
   356 0000135E 488D3DD4EFFFFF      <1>     lea rdi, cmdPathSpec
   357 00001365 E822270000          <1>     call strlen ;Get the length of the input command
   358 0000136A FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   359 0000136C 380D16F0FFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   360 00001372 0F85521D0000        <1>     jne launchChild     ;If not, a path was specified, exit!
   361                              <1> .executeInternal2:
   362                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   363 00001378 488D1DE4F4FFFF      <1>     lea rbx, functionTable
   364                              <1> .nextEntry:
   365 0000137F 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   366 00001382 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   367 00001385 0F843F1D0000        <1>     je launchChild      ;If so, check externally now
   368 0000138B 380DF7EFFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   369 00001391 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   370                              <1>     ;Here they have the same length so lets see if the name is the same
   371 00001393 56                  <1>     push rsi
   372                              <1>     ;ecx has the length to compare
   373 00001394 51                  <1>     push rcx
   374 00001395 488D7301            <1>     lea rsi, qword [rbx + 1]
   375 00001399 488D3DE9EFFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   376 000013A0 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   377 000013A2 59                  <1>     pop rcx
   378 000013A3 5E                  <1>     pop rsi
   379 000013A4 751E                <1>     jne .gotoNextEntry
   380                              <1>     ;Here it was found both strings are equal
   381 000013A6 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   382 000013AB 480FB71F            <1>     movzx rbx, word [rdi]
   383 000013AF 488D3D4AECFFFF      <1>     lea rdi, startLbl
   384 000013B6 4801FB              <1>     add rbx, rdi
   385 000013B9 C6054DECFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   386 000013C0 FFD3                <1>     call rbx        ;Call the internal function!
   387 000013C2 EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   388                              <1> .gotoNextEntry:
   389 000013C4 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   390 000013CB 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   391 000013CE EBAF                <1>     jmp short .nextEntry
   392                              <1> 
   393                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   394                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   395                              <1> ;Can depend on RSP here if the rsp ptr in the psp was not mangled (i.e. in an
   396                              <1> ; abort or CTRL+C call).
   397 000013D0 488B252EECFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   398 000013D7 E872290000          <1>     call resetIDTentries
   399 000013DC B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   400 000013E1 CD21                <1>     int 21h
   401 000013E3 66890523ECFFFF      <1>     mov word [returnCode], ax
   402 000013EA 84E4                <1>     test ah, ah     ;Regular exit
   403 000013EC 0F845AFCFFFF        <1>     jz commandMain.okRet
   404 000013F2 80FC03              <1>     cmp ah, 3       ;TSR exit
   405 000013F5 0F8451FCFFFF        <1>     je commandMain.okRet
   406                              <1>     ;Here we ask if we want to stop any batch processing, ret to 2Eh etc.
   407                              <1>     ;For now, do nothing
   408 000013FB 80FC01              <1>     cmp ah, 1       ;Was this Ctrl^C?
   409 000013FE 0F8491FBFFFF        <1>     je commandMain
   410 00001404 E98CFBFFFF          <1>     jmp commandMain  ;If we aborted, fully reset!
   411                              <1> 
   412                              <1> hardSynErr:
   413                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   414 00001409 E89E050000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   415 0000140E E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   416                              <1> redirFailure:
   417 00001413 488D15FBFAFFFF      <1>     lea rdx, redirErrMsg
   418 0000141A B913000000          <1>     mov ecx, redirErrMsgL
   419 0000141F EB0C                <1>     jmp short redirPipeFailureCommon
   420                              <1> pipeFailure:
   421 00001421 488D15D6FAFFFF      <1>     lea rdx, pipeErrMsg
   422 00001428 B917000000          <1>     mov ecx, pipeErrMsgL
   423                              <1> redirPipeFailureCommon:
   424                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   425                              <1> ;This routine tries to close whatever handles are not -1 and delete
   426                              <1> ; pipe files if the pipe count is not 0.
   427                              <1> ;It resets all variables and jumps to reset the stack!
   428 0000142D B800400000          <1>     mov eax, 4000h  ;Write handle
   429 00001432 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   430 00001437 CD21                <1>     int 21h
   431                              <1> .noPrint:
   432 00001439 0FB70566ECFFFF      <1>     movzx eax, word [redirSTDIN]
   433 00001440 0FB71559ECFFFF      <1>     movzx edx, word [pipeSTDIN]
   434 00001447 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   435 00001449 E8D1000000          <1>     call .closeAndReplace
   436 0000144E 0FB70553ECFFFF      <1>     movzx eax, word [redirSTDOUT]
   437 00001455 0FB71546ECFFFF      <1>     movzx edx, word [pipeSTDOUT]
   438 0000145C FFC3                <1>     inc ebx         ;Select STDOUT for closing
   439 0000145E E8BC000000          <1>     call .closeAndReplace
   440 00001463 66C70538ECFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   441 0000146C 0FB71D33ECFFFF      <1>     movzx ebx, word [redirSTDIN]
   442 00001473 E896000000          <1>     call .closeHandle
   443                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   444 00001478 66C70525ECFFFFFFFF  <1>     mov word [redirSTDIN], -1
   445 00001481 0FB71D20ECFFFF      <1>     movzx ebx, word [redirSTDOUT]
   446 00001488 E881000000          <1>     call .closeHandle
   447 0000148D 66C70512ECFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   448 00001496 0FB71D03ECFFFF      <1>     movzx ebx, word [pipeSTDIN]
   449 0000149D E86C000000          <1>     call .closeHandle
   450 000014A2 66C705F5EBFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   451 000014AB 0FB71DF0EBFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   452 000014B2 E857000000          <1>     call .closeHandle
   453 000014B7 66C705E2EBFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   454 000014C0 C605D8EBFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   455 000014C7 488D1566EFFFFF      <1>     lea rdx, qword [pipe1Filespec]
   456 000014CE 803A00              <1>     cmp byte [rdx], 0
   457 000014D1 7407                <1>     jz .checkOld
   458 000014D3 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   459 000014D8 CD21                <1>     int 21h
   460                              <1> .checkOld:
   461 000014DA 488D15A2EFFFFF      <1>     lea rdx, qword [pipe2Filespec]
   462 000014E1 803A00              <1>     cmp byte [rdx],0
   463 000014E4 7407                <1>     jz .pipeNamesComplete
   464 000014E6 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   465 000014EB CD21                <1>     int 21h
   466                              <1> .pipeNamesComplete:
   467 000014ED 31C0                <1>     xor eax, eax
   468                              <1>     ;Invalidate the pointers and the paths too
   469 000014EF 488905DCEFFFFF      <1>     mov qword [newPipe], rax
   470 000014F6 488905DDEFFFFF      <1>     mov qword [oldPipe], rax
   471 000014FD 890531EFFFFF        <1>     mov dword [pipe1Filespec], eax
   472 00001503 89057AEFFFFF        <1>     mov dword [pipe2Filespec], eax
   473                              <1> 
   474 00001509 E987FAFFFF          <1>     jmp commandMain ;Retake input from the command line
   475                              <1> .closeHandle:
   476 0000150E 81FBFFFFFFFF        <1>     cmp ebx, -1
   477                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001514 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001516 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 00001517 B8003E0000          <1>     mov eax, 3E00h
   479 0000151C CD21                <1>     int 21h
   480                              <1>     return
    13                              <2> %%_ret:
    14 0000151E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   481                              <1> .closeAndReplace:
   482                              <1> ;Input: ax = one possible handle, dx = second possible handle
   483                              <1> ;       bx = handle to close and copy ax/dx into
   484                              <1> ;Output: Handle intervened on. bx preserved
   485 0000151F C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   486 00001522 09D0                <1>     or eax, edx     ;Form packed
   487 00001524 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   488                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001529 74(1E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   489 0000152B E8DEFFFFFF          <1>     call .closeHandle
   490 00001530 663DFFFF            <1>     cmp ax, -1      
   491 00001534 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   492 00001538 53                  <1>     push rbx
   493 00001539 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   494 0000153C B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   495 00001541 CD21                <1>     int 21h
   496 00001543 5B                  <1>     pop rbx
   497                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001544 73(1E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   498                              <1>     ;Else we now try to force con to open!
   499 00001546 E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   500 0000154B B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   501 00001550 488D150BFAFFFF      <1>     lea rdx, conName
   502 00001557 CD21                <1>     int 21h
   503                              <1>     return
    13                              <2> %%_ret:
    14 00001559 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> advanceRedir:
   506                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   507                              <1> ;Close stdin redir then stdout redir. 
   508 0000155A F60543EBFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   509 00001561 0F8585000000        <1>     jnz .redirIn
   510 00001567 F60531EBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   511 0000156E 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   512 00001574 0FBF0525EBFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   513 0000157B 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   514 00001580 0F84EB000000        <1>     je .pipeOut              
   515                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   516 00001586 0FB71D13EBFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   517 0000158D 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   518 0000158F B800460000          <1>     mov eax, 4600h
   519 00001594 CD21                <1>     int 21h
   520 00001596 0F8285FEFFFF        <1>     jc pipeFailure
   521 0000159C B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   522 000015A1 CD21                <1>     int 21h
   523 000015A3 0F8278FEFFFF        <1>     jc pipeFailure
   524 000015A9 488B152AEFFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   525 000015B0 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   526 000015B5 CD21                <1>     int 21h
   527 000015B7 0F8264FEFFFF        <1>     jc pipeFailure
   528 000015BD C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   529 000015C0 66C705D7EAFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   530                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   531                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   532                              <1>     ;Else exit!
   533 000015C9 0FBF05D2EAFFFF      <1>     movsx eax, word [pipeSTDOUT]
   534 000015D0 3DFFFFFFFF          <1>     cmp eax, -1
   535 000015D5 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   536 000015DB C605BDEAFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   537 000015E2 F605BCEAFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   538 000015E9 753D                <1>     jnz .redirOut               ;Go for it if so!
   539                              <1>     return
    13                              <2> %%_ret:
    14 000015EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> .redirIn:
   541                              <1> ;Here we clean redirIn
   542 000015EC 0FB71DB3EAFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   543 000015F3 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   544 000015F5 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   545 000015FA CD21                <1>     int 21h
   546 000015FC 0F8211FEFFFF        <1>     jc redirFailure
   547 00001602 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   548 00001607 CD21                <1>     int 21h
   549 00001609 0F8204FEFFFF        <1>     jc redirFailure
   550 0000160F 66C7058EEAFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   551 00001618 C60585EAFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   552 0000161F F60579EAFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   553 00001626 7549                <1>     jnz .pipeOut
   554                              <1> .redirOut:
   555 00001628 F60576EAFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   556                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000162F 74(EB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   558 00001631 F60567EAFFFFFF      <1>     test byte [pipeFlag], -1
   559 00001638 7537                <1>     jnz short .pipeOut
   560 0000163A 0FB71D67EAFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   561 00001641 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   562 00001646 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   563 0000164B CD21                <1>     int 21h
   564 0000164D 0F82C0FDFFFF        <1>     jc redirFailure
   565 00001653 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   566 00001658 CD21                <1>     int 21h
   567 0000165A 0F82B3FDFFFF        <1>     jc redirFailure
   568 00001660 66C7053FEAFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   569 00001669 C60535EAFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   570                              <1>     return
    13                              <2> %%_ret:
    14 00001670 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> .pipeOut:
   572                              <1> ;Duplicate STDIN to save across pipe
   573 00001671 0FBF052AEAFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   574 00001678 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   575                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000167D 74(70)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   576 0000167F B800450000          <1>     mov eax, 4500h
   577 00001684 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   578 00001686 CD21                <1>     int 21h
   579 00001688 0F8293FDFFFF        <1>     jc pipeFailure
   580 0000168E 6689050BEAFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   581                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   582 00001695 B800460000          <1>     mov eax, 4600h
   583 0000169A 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   584 0000169C FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   585 0000169E CD21                <1>     int 21h
   586 000016A0 0F827BFDFFFF        <1>     jc pipeFailure
   587                              <1> ;Now return the original stdout to stdout
   588 000016A6 89D9                <1>     mov ecx, ebx
   589 000016A8 0FB71DF3E9FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   590 000016AF B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   591 000016B4 CD21                <1>     int 21h
   592 000016B6 0F8265FDFFFF        <1>     jc pipeFailure
   593                              <1> ;Now close the DUP'ed STDOUT
   594 000016BC B8003E0000          <1>     mov eax, 3E00h
   595 000016C1 CD21                <1>     int 21h
   596 000016C3 0F8258FDFFFF        <1>     jc pipeFailure
   597                              <1> ;Finally unwind STDIN to the beginning of the file
   598 000016C9 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   599 000016CE 31DB                <1>     xor ebx, ebx    ;STDIN handle
   600 000016D0 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   601 000016D2 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   602 000016D4 CD21                <1>     int 21h
   603 000016D6 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   604 000016DC 488B15EFEDFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   605 000016E3 488915F0EDFFFF      <1>     mov qword [oldPipe], rdx
   606 000016EA 66C705AFE9FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   607                              <1>     return
    13                              <2> %%_ret:
    14 000016F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> 
   610                              <1> peelRedir:
   611                              <1> ;Checks and sets up redir as appropriate
   612                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   613                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   614                              <1> ;Output: ZF=NZ => No redir
   615                              <1> ;        ZF=ZY => Redir
   616                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   617                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   618 000016F4 51                  <1>     push rcx
   619 000016F5 57                  <1>     push rdi
   620 000016F6 3C3C                <1>     cmp al, "<"
   621 000016F8 740C                <1>     je .inputRedir
   622 000016FA 3C3E                <1>     cmp al, ">"
   623 000016FC 7427                <1>     je .outputRedir
   624 000016FE 3C7C                <1>     cmp al, "|"
   625 00001700 7441                <1>     je .pipeSetup
   626 00001702 F8                  <1>     clc
   627                              <1> .redirExit:
   628 00001703 5F                  <1>     pop rdi
   629 00001704 59                  <1>     pop rcx
   630                              <1>     return
    13                              <2> %%_ret:
    14 00001705 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   631                              <1> .inputRedir:
   632 00001706 C60597E9FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   633 0000170D 488D3D82ECFFFF      <1>     lea rdi, rdrInFilespec
   634                              <1> .redirCommon:
   635 00001714 E88F230000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   636 00001719 E8BB240000          <1>     call cpDelimPathToBufz
   637 0000171E 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   638 00001721 30C0                <1>     xor al, al  ;Clear the ZF flag
   639 00001723 EBDE                <1>     jmp short .redirExit
   640                              <1> .outputRedir:
   641 00001725 C60579E9FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   642 0000172C 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   643 0000172F 7509                <1>     jne .notDouble
   644 00001731 FE056EE9FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   645 00001737 48FFC6              <1>     inc rsi ;Go past it too
   646                              <1> .notDouble:
   647 0000173A 488D3DA4ECFFFF      <1>     lea rdi, rdrOutFilespec
   648 00001741 EBD1                <1>     jmp short .redirCommon
   649                              <1> .pipeSetup:
   650 00001743 56                  <1>     push rsi    ;Save rsi pointing to char past |
   651 00001744 E85F230000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   652 00001749 803E7C              <1>     cmp byte [rsi], "|" 
   653 0000174C 7403                <1>     je .badFnd
   654 0000174E 803E0D              <1>     cmp byte [rsi], CR
   655                              <1> .badFnd:
   656 00001751 5E                  <1>     pop rsi
   657 00001752 F9                  <1>     stc
   658 00001753 EBAE                <1>     jmp short .redirExit
   659                              <1> 
   660                              <1> setupRedirandPipes:
   661                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   662                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   663 00001755 0F8484000000        <1>     jz .redirIn
   664 0000175B 488D15D2ECFFFF      <1>     lea rdx, pipe1Filespec
   665 00001762 803A00              <1>     cmp byte [rdx], 0
   666 00001765 7410                <1>     jz .pathFound
   667 00001767 488D1515EDFFFF      <1>     lea rdx, pipe2Filespec
   668 0000176E 803A00              <1>     cmp byte [rdx], 0
   669 00001771 0F85AAFCFFFF        <1>     jnz pipeFailure
   670                              <1> .pathFound:
   671 00001777 48891554EDFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   672 0000177E B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   673 00001783 BB01000000          <1>     mov ebx, 1
   674 00001788 CD21                <1>     int 21h
   675 0000178A 0F8291FCFFFF        <1>     jc pipeFailure
   676 00001790 6689050BE9FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   677 00001797 E8D2220000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   678 0000179C 0441                <1>     add al, "A"
   679 0000179E BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   680 000017A3 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   681 000017A5 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   682 000017A7 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   683 000017A9 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   684 000017AE CD21                <1>     int 21h
   685 000017B0 0F826BFCFFFF        <1>     jc pipeFailure
   686                              <1>     ;AX has the handle for this file now, this will become STDOUT
   687                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   688 000017B6 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   689 000017B9 B901000000          <1>     mov ecx, 1
   690 000017BE B800460000          <1>     mov eax, 4600h
   691 000017C3 CD21                <1>     int 21h
   692 000017C5 0F8256FCFFFF        <1>     jc pipeFailure
   693 000017CB B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   694 000017D0 CD21                <1>     int 21h
   695 000017D2 0F8249FCFFFF        <1>     jc pipeFailure
   696 000017D8 C605C0E8FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   697                              <1> .redirIn:
   698                              <1> ;Now check if any other redir needs to be setup
   699                              <1> ;Checks and sets up redir as appropriate.
   700                              <1>     ;Setup the redir here for STDIN
   701 000017DF F605BEE8FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   702 000017E6 7449                <1>     jz .redirOut
   703 000017E8 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   704 000017EA B800450000          <1>     mov eax, 4500h
   705 000017EF CD21                <1>     int 21h
   706 000017F1 0F821CFCFFFF        <1>     jc redirFailure
   707 000017F7 668905A8E8FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   708 000017FE 488D1591EBFFFF      <1>     lea rdx, rdrInFilespec
   709 00001805 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   710 0000180A CD21                <1>     int 21h
   711 0000180C 0F8201FCFFFF        <1>     jc redirFailure
   712 00001812 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   713 00001814 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   714 00001817 B800460000          <1>     mov eax, 4600h
   715 0000181C CD21                <1>     int 21h
   716 0000181E 0F82EFFBFFFF        <1>     jc redirFailure
   717 00001824 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   718 00001829 CD21                <1>     int 21h
   719 0000182B 0F82E2FBFFFF        <1>     jc redirFailure
   720                              <1> .redirOut:
   721 00001831 F6056DE8FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   722                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001838 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000183A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   723 0000183B 803D60E8FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   724                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001842 75(3A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   725                              <1>     ;Else setup the redir here for STDOUT
   726 00001844 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   727 00001849 B800450000          <1>     mov eax, 4500h
   728 0000184E CD21                <1>     int 21h
   729 00001850 0F82BDFBFFFF        <1>     jc redirFailure
   730 00001856 6689054BE8FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   731 0000185D 488D1581EBFFFF      <1>     lea rdx, rdrOutFilespec
   732 00001864 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   733 00001869 CD21                <1>     int 21h
   734 0000186B 730F                <1>     jnc .fileExists
   735 0000186D B8003C0000          <1>     mov eax, 3C00h
   736 00001872 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   737 00001874 CD21                <1>     int 21h
   738 00001876 0F8297FBFFFF        <1>     jc redirFailure
   739                              <1> .fileExists:
   740 0000187C B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   741 00001881 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   742 00001884 B800460000          <1>     mov eax, 4600h  ;DUP2
   743 00001889 CD21                <1>     int 21h
   744 0000188B 0F8282FBFFFF        <1>     jc redirFailure
   745 00001891 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   746 00001896 CD21                <1>     int 21h
   747 00001898 0F8275FBFFFF        <1>     jc redirFailure
   748 0000189E 803D00E8FFFF01      <1>     cmp byte [redirOut], 1
   749                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000018A5 74(3A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   750                              <1>     ;Here we move the file pointer to the end of the file
   751 000018A7 31D2                <1>     xor edx, edx    ;Low order 32 bits
   752 000018A9 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   753 000018AB BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   754 000018B0 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   755 000018B5 CD21                <1>     int 21h
   756 000018B7 0F8256FBFFFF        <1>     jc redirFailure
   757                              <1>     return
    13                              <2> %%_ret:
    14 000018BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> 
   759                              <1> 
   760                              <1> pullCommandline:
   761                              <1> ;This command pulls the command tail down, removing the whole launch command
   762 000018BE 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   763                              <1> ;Skip leading separators
   764                              <1> .pctSkipLeading:
   765 000018C5 AC                  <1>     lodsb   ;Get first char
   766 000018C6 E8EB210000          <1>     call isALdelimiter
   767 000018CB 74F8                <1>     je .pctSkipLeading
   768 000018CD 48FFCE              <1>     dec rsi
   769                              <1>     ;rsi points to the start of the command
   770 000018D0 488D3D62EAFFFF      <1>     lea rdi, cmdPathSpec
   771 000018D7 E8B0210000          <1>     call strlen ;Get the length of the command
   772 000018DC FFC9                <1>     dec ecx ;Minus the terminating null
   773 000018DE 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   774 000018E1 280DC4E7FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   775 000018E7 280DC1E7FFFF        <1>     sub byte [arg2Off], cl
   776 000018ED 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   777 000018EF 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   778                              <1> .pctPullChars:
   779 000018F6 AC                  <1>     lodsb
   780 000018F7 AA                  <1>     stosb
   781 000018F8 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   782 000018FA 7404                <1>     je .pctExit
   783 000018FC FFC1                <1>     inc ecx     ;Increment count
   784 000018FE EBF6                <1>     jmp short .pctPullChars 
   785                              <1> .pctExit:
   786 00001900 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   787                              <1>     return
    13                              <2> %%_ret:
    14 00001907 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   788                              <1> 
   789                              <1> batNextLine:
   790                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   791 00001908 488D1513000000      <1>     lea rdx, .l1
   792 0000190F B800090000          <1>     mov eax, 0900h
   793 00001914 CD21                <1>     int 21h
   794 00001916 C60594E7FFFF00      <1>     mov byte [batFlag], 0
   795 0000191D E973F6FFFF          <1>     jmp commandMain
   796 00001922 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   796 0000192B 652E2E2E2077616974- <1>
   796 00001934 2C20776861743F2048- <1>
   796 0000193D 6F772064696420796F- <1>
   796 00001946 7520646F2074686174- <1>
   796 0000194F 3F0D0A24            <1>
   797                              <1> 
   798                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   799                              <1> ;Input: rsi points to the count byte of a command line
   800 00001953 4150                <1>     push r8
   801 00001955 4151                <1>     push r9
   802 00001957 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   803 00001959 CD21                <1>     int 21h
   804 0000195B 52                  <1>     push rdx    ;Save on the stack
   805 0000195C 488D1D9DE5FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   806 00001963 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   807 00001965 CD21                <1>     int 21h
   808 00001967 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   809 0000196A 4989D9              <1>     mov r9, rbx
   810 0000196D 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   811 00001974 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   812 00001979 F348A5              <1>     rep movsq   ;Copy command line over
   813                              <1>     ;call doCommandLine
   814 0000197C 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   815 0000197D B450                <1>     mov ah, 50h ;Set Current PSP
   816 0000197F CD21                <1>     int 21h
   817 00001981 4159                <1>     pop r9
   818 00001983 4158                <1>     pop r8
   819 00001985 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001987 488D157AF0FFFF      <1>     lea rdx, noSpace
    10 0000198E 488D0D79F3FFFF      <1>     lea rcx, pipeErr
    11 00001995 F60503E7FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 0000199C 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 0000199E 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 000019A2 E866000000          <1>     call badCmn     ;Print the string
    15 000019A7 E98DFAFFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badSyntaxError:
    17 000019AC 488D1534F3FFFF      <1>     lea rdx, syntaxErr
    18 000019B3 EB58                <1>     jmp short badCmn
    19                              <1> badEnvSpaceError:
    20 000019B5 488D1566F0FFFF      <1>     lea rdx, noEnvSpace
    21 000019BC EB4F                <1>     jmp short badCmn
    22                              <1> badAccError:
    23 000019BE 488D15CEF2FFFF      <1>     lea rdx, accDenMsg
    24 000019C5 EB46                <1>     jmp short badCmn
    25                              <1> noSelfCopyError:
    26 000019C7 488D1585F0FFFF      <1>     lea rdx, noSelfCopy
    27 000019CE EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 000019D0 488D153AF1FFFF      <1>     lea rdx, badParm
    30 000019D7 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 000019D9 488D15F4F0FFFF      <1>     lea rdx, badDrv
    33 000019E0 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 000019E2 488D15B7F3FFFF      <1>     lea rdx, badArgs
    36 000019E9 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 000019EB 488D1592F3FFFF      <1>     lea rdx, badSpec
    39 000019F2 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 000019F4 488D15E5EFFFFF      <1>     lea rdx, dupName
    43 000019FB EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 000019FD 488D15F3EFFFFF      <1>     lea rdx, fnfMsg
    46 00001A04 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001A06 488D1505F2FFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001A0D E9661E0000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001A12 488D15ACEFFFFF      <1>     lea rdx, badCmd
    53 00001A19 EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001A1B C605C4EBFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001A22 C605BEEBFFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001A29 C705B5EBFFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001A32 00                  <1>
    59 00001A33 C605B3EBFFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001A3A 66C7059FEAFFFF0000  <1>     mov word [searchSpec], 0
    61 00001A43 488D3D25ECFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001A4A C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001A4D 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001A56 3F                  <1>
    64 00001A57 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001A5B C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001A62 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001A69 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001A6C E837200000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001A71 AC                  <1>     lodsb   ;Get this char
    72 00001A72 3C0D                <1>     cmp al, CR
    73 00001A74 744D                <1>     je .scanDone
    74 00001A76 3A05AEE5FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001A7C 7524                <1>     jne .notSwitch
    76 00001A7E AC                  <1>     lodsb   ;Get the next char
    77 00001A7F E812200000          <1>     call ucChar
    78 00001A84 3C57                <1>     cmp al, "W"
    79 00001A86 7509                <1>     jne .notWide
    80 00001A88 800D57EBFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001A8F EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001A91 3C50                <1>     cmp al, "P"
    84 00001A93 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001A99 800D46EBFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001AA0 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001AA2 F6053DEBFFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001AA9 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001AAF 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001AB2 E87D210000          <1>     call copyArgumentToSearchSpec   
    93 00001AB7 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001ABA 800D25EBFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001AC1 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001AC3 F6051CEBFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001ACA 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001ACC 488D350FEAFFFF      <1>     lea rsi, searchSpec
   101 00001AD3 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001AD7 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001AD9 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001ADE 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001AE2 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001AE7 CD21                <1>     int 21h
   108 00001AE9 3CFF                <1>     cmp al, -1
   109 00001AEB 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001AF1 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001AF6 84C0                <1>     test al, al
   113 00001AF8 740A                <1>     jz .currentDrv
   114 00001AFA FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001AFC 8805EAEAFFFF        <1>     mov byte [dirDrv], al
   116 00001B02 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001B04 E8651F0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001B09 8805DDEAFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001B0F 488D35CCE9FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001B16 488D3DD0EAFFFF      <1>     lea rdi, dirSrchDir
   124 00001B1D 0FB605C8EAFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001B24 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001B26 0441                <1>     add al, "A" ;Turn into a letter
   127 00001B28 B43A                <1>     mov ah, ":"
   128 00001B2A 66AB                <1>     stosw   ;Store X: into the search path
   129 00001B2C B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001B31 CD2F                <1>     int 2fh
   131 00001B33 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001B35 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001B3B 8A05E8E4FFFF        <1>     mov al, byte [pathSep]
   135 00001B41 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001B43 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001B45 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001B46 FEC2                <1>     inc dl  ;Increment by 1
   139 00001B48 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001B4B B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001B50 CD21                <1>     int 21h
   142 00001B52 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001B55 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001B57 3807                <1>     cmp byte [rdi], al
   149 00001B59 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001B5B 48FFC7              <1>     inc rdi
   151 00001B5E EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001B60 8A05C3E4FFFF        <1>     mov al, byte [pathSep]
   154 00001B66 3806                <1>     cmp byte [rsi], al
   155 00001B68 7412                <1>     je .copyPathLoop
   156 00001B6A B43A                <1>     mov ah, ":"
   157 00001B6C 86C4                <1>     xchg al, ah
   158 00001B6E 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001B72 7408                <1>     je .copyPathLoop
   160 00001B74 88E0                <1>     mov al, ah
   161 00001B76 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001B79 7401                <1>     je .copyPathLoop
   163 00001B7B AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001B7C AC                  <1>     lodsb
   166 00001B7D 3A05A6E4FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001B83 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001B85 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001B87 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001B89 48FFC6              <1>     inc rsi
   172 00001B8C EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001B8E 3C2E                <1>     cmp al, "."
   175 00001B90 7407                <1>     je .dots
   176                              <1> .store:
   177 00001B92 AA                  <1>     stosb
   178 00001B93 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001B95 7472                <1>     jz .exitPathCopy
   180 00001B97 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001B99 8A258AE4FFFF        <1>     mov ah, byte [pathSep]
   188 00001B9F 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001BA2 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001BA4 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001BA6 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00001BA9 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00001BAB 3A2578E4FFFF        <1>     cmp ah, byte [pathSep]
   195 00001BB1 7406                <1>     je .skipThisPathsep
   196 00001BB3 84E4                <1>     test ah, ah
   197 00001BB5 74C5                <1>     jz .copyPathLoop
   198 00001BB7 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00001BB9 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00001BBC EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00001BBE 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00001BC1 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00001BC3 3A2560E4FFFF        <1>     cmp ah, byte [pathSep]
   208 00001BC9 7408                <1>     je .tdOk
   209 00001BCB 84E4                <1>     test ah, ah
   210 00001BCD 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00001BD3 8A0550E4FFFF        <1>     mov al, byte byte [pathSep]
   213 00001BD9 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00001BDD 0F84EDFDFFFF        <1>     je badParamError
   215 00001BE3 4881EF02000000      <1>     sub rdi, 2
   216 00001BEA 31C9                <1>     xor ecx, ecx
   217 00001BEC FFC9                <1>     dec ecx
   218 00001BEE FD                  <1>     std
   219 00001BEF F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 00001BF1 FC                  <1>     cld
   221 00001BF2 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00001BF9 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00001BFB 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 00001C01 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00001C04 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00001C09 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00001C10 8A0513E4FFFF        <1>     mov al, byte [pathSep]
   230 00001C16 B43A                <1>     mov ah, ":"
   231 00001C18 86C4                <1>     xchg al, ah
   232 00001C1A 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00001C1E 7409                <1>     je .skipOverwrite
   234 00001C20 88E0                <1>     mov al, ah
   235 00001C22 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00001C24 7503                <1>     jne .skipOverwrite
   237 00001C26 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00001C29 488D35BDE9FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00001C30 4889F7              <1>     mov rdi, rsi
   241 00001C33 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00001C38 CD2F                <1>     int 2fh
   243 00001C3A E802200000          <1>     call scanForWildcards
   244 00001C3F 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00001C41 4889F2              <1>     mov rdx, rsi
   246 00001C44 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00001C48 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00001C4A E8E4200000          <1>     call setDTA ;Set the DTA
   250 00001C4F B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00001C54 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 00001C59 CD21                <1>     int 21h
   253 00001C5B 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00001C5D F60519E5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00001C64 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00001C66 31C0                <1>     xor eax, eax
   259 00001C68 31C9                <1>     xor ecx, ecx
   260 00001C6A FFC9                <1>     dec ecx
   261 00001C6C F2AE                <1>     repne scasb
   262 00001C6E 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00001C71 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00001C73 31C0                <1>     xor eax, eax
   268 00001C75 31C9                <1>     xor ecx, ecx
   269 00001C77 FFC9                <1>     dec ecx
   270 00001C79 F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00001C7B 8A05A8E3FFFF        <1>     mov al, byte [pathSep]
   273 00001C81 31C9                <1>     xor ecx, ecx
   274 00001C83 FFC9                <1>     dec ecx
   275 00001C85 FD                  <1>     std ;Search backwards
   276 00001C86 F2AE                <1>     repne scasb
   277 00001C88 FC                  <1>     cld ;Search forwards again
   278 00001C89 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 00001C8C 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00001C90 7503                <1>     jne .wcsp1
   281 00001C92 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00001C95 57                  <1>     push rdi
   285 00001C96 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00001C98 7503                <1>     jne .wcsp2
   287 00001C9A 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00001C9D 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00001CA0 488D3DC8E9FFFF      <1>     lea rdi, dirSrchFCB
   291 00001CA7 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00001CAC CD21                <1>     int 21h
   293 00001CAE 5F                  <1>     pop rdi
   294 00001CAF 31C0                <1>     xor eax, eax
   295 00001CB1 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 00001CB3 0FB60532E9FFFF      <1>     movzx eax, byte [dirDrv] 
   298 00001CBA E823110000          <1>     call volume.dirEP
   299 00001CBF 488D15B4EFFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 00001CC6 B409                <1>     mov ah, 09h
   301 00001CC8 CD21                <1>     int 21h
   302 00001CCA C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 00001CCD 488D1519E9FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 00001CD4 B409                <1>     mov ah, 09h
   305 00001CD6 CD21                <1>     int 21h
   306 00001CD8 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 00001CDB 488D1589ECFFFF      <1>     lea rdx, crlf2
   308 00001CE2 B409                <1>     mov ah, 09h
   309 00001CE4 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 00001CE6 8A053DE3FFFF        <1>     mov al, byte [pathSep]
   313 00001CEC 3847FF              <1>     cmp byte [rdi - 1], al
   314 00001CEF 7403                <1>     je .root
   315 00001CF1 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 00001CF4 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 00001CF7 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 00001CF8 488D3571E9FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 00001CFF E87F1E0000          <1>     call FCBToAsciiz    ;Terminates for free
   321 00001D04 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 00001D09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 00001D0A E824200000          <1>     call setDTA
   326 00001D0F B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00001D14 488D15D2E8FFFF      <1>     lea rdx, dirSrchDir
   328 00001D1B B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00001D20 CD21                <1>     int 21h
   330 00001D22 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00001D24 E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 00001D29 B44F                <1>     mov ah, 4Fh
   334 00001D2B CD21                <1>     int 21h
   335 00001D2D 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00001D2F F605B0E8FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00001D36 740B                <1>     jz .dirNoEndNewLine
   339 00001D38 488D1529ECFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00001D3F B409                <1>     mov ah, 09h
   341 00001D41 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00001D43 F7059BE8FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 00001D4C FF                  <1>
   345 00001D4D 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00001D4F 488D15A1ECFFFF      <1>     lea rdx, fnfMsg
   348 00001D56 E81D1B0000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 00001D5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 00001D5C 488D15C9F1FFFF      <1>     lea rdx, fourSpc
   352 00001D63 B409                <1>     mov ah, 09h
   353 00001D65 CD21                <1>     int 21h
   354 00001D67 B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 00001D69 CD21                <1>     int 21h
   356 00001D6B 8B0577E8FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 00001D71 E8DF1E0000          <1>     call printDecimalWord
   358 00001D76 488D1536EDFFFF      <1>     lea rdx, dirOk
   359 00001D7D B409                <1>     mov ah, 09h
   360 00001D7F CD21                <1>     int 21h
   361 00001D81 488D15A9F1FFFF      <1>     lea rdx, threeSpc
   362 00001D88 B409                <1>     mov ah, 09h
   363 00001D8A CD21                <1>     int 21h
   364 00001D8C B800360000          <1>     mov eax, 3600h ;Get disk info
   365 00001D91 8A1555E8FFFF        <1>     mov dl, byte [dirDrv]
   366 00001D97 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 00001D99 CD21                <1>     int 21h ;Get disk free space info
   368 00001D9B 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 00001D9E 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 00001DA1 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 00001DA3 F7E1                <1>     mul ecx ;Get bytes per cluster
   372 00001DA5 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 00001DA8 E8A81E0000          <1>     call printDecimalWord
   375 00001DAD 488D1509EDFFFF      <1>     lea rdx, bytesOk
   376 00001DB4 B409                <1>     mov ah, 09h
   377 00001DB6 CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 00001DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 00001DB9 F605BDE3FFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001DC0 75(B8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 00001DC2 488D35BDE3FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 00001DC9 488D3D88E3FFFF      <1>     lea rdi, cmdFcb
   388 00001DD0 E8401D0000          <1>     call asciiFilenameToFCB
   389 00001DD5 488D157CE3FFFF      <1>     lea rdx, cmdFcb
   390 00001DDC B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 00001DE1 BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 00001DE6 B440                <1>     mov ah, 40h ;Write handle
   393 00001DE8 CD21                <1>     int 21h
   394 00001DEA 52                  <1>     push rdx
   395 00001DEB B220                <1>     mov dl, " "
   396 00001DED B402                <1>     mov ah, 02h ;Print char
   397 00001DEF CD21                <1>     int 21h
   398 00001DF1 5A                  <1>     pop rdx
   399 00001DF2 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 00001DF9 B903000000          <1>     mov ecx, 3  ;Print three chars
   401 00001DFE BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 00001E03 B440                <1>     mov ah, 40h ;Write handle
   403 00001E05 CD21                <1>     int 21h
   404 00001E07 F605D8E7FFFF01      <1>     test byte [dirFlags], dirWideType
   405 00001E0E 0F85A8000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 00001E14 F60562E3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 00001E1B 7418                <1>     jz .dirPrintNotDir
   410 00001E1D 488D15A7ECFFFF      <1>     lea rdx, dirLbl
   411 00001E24 B409                <1>     mov ah, 09h
   412 00001E26 CD21                <1>     int 21h
   413 00001E28 488D1502F1FFFF      <1>     lea rdx, threeSpc
   414 00001E2F B409                <1>     mov ah, 09h
   415 00001E31 CD21                <1>     int 21h
   416 00001E33 EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 00001E35 B220                <1>     mov dl, " "
   420 00001E37 B402                <1>     mov ah, 02h
   421 00001E39 CD21                <1>     int 21h
   422 00001E3B 8B0541E3FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 00001E41 E8801E0000          <1>     call getDecimalWord
   424 00001E46 4889CB              <1>     mov rbx, rcx
   425 00001E49 51                  <1>     push rcx
   426 00001E4A 480FCB              <1>     bswap rbx
   427 00001E4D B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 00001E52 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 00001E54 7514                <1>     jne .dirPrintFileSize
   431 00001E56 B402                <1>     mov ah, 02h
   432 00001E58 B220                <1>     mov dl, " "
   433 00001E5A CD21                <1>     int 21h
   434 00001E5C 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 00001E60 FFC9                <1>     dec ecx
   436 00001E62 81F901000000        <1>     cmp ecx, 1
   437 00001E68 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 00001E6A 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 00001E6B 88DA                <1>     mov dl, bl
   442 00001E6D B402                <1>     mov ah, 02h
   443 00001E6F CD21                <1>     int 21h
   444 00001E71 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 00001E75 FFC9                <1>     dec ecx
   446 00001E77 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 00001E79 488D15B5F0FFFF      <1>     lea rdx, twoSpc
   448 00001E80 B409                <1>     mov ah, 09h
   449 00001E82 CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 00001E84 B220                <1>     mov dl, " "
   452 00001E86 B402                <1>     mov ah, 02h
   453 00001E88 CD21                <1>     int 21h
   454 00001E8A 0FB705EFE2FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 00001E91 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 00001E93 E890170000          <1>     call printDate
   457 00001E98 488D1596F0FFFF      <1>     lea rdx, twoSpc
   458 00001E9F B409                <1>     mov ah, 09h
   459 00001EA1 CD21                <1>     int 21h
   460 00001EA3 0FB705D4E2FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 00001EAA E89B180000          <1>     call printTime
   462 00001EAF 488D15B2EAFFFF      <1>     lea rdx, crlf
   463 00001EB6 B409                <1>     mov ah, 09h
   464 00001EB8 CD21                <1>     int 21h
   465 00001EBA EB0B                <1>     jmp short .dirPrintNameExit
   466                              <1> .widePrint:
   467                              <1> ;If /W, print name space ext space space space space
   468 00001EBC 488D1569F0FFFF      <1>     lea rdx, fourSpc
   469 00001EC3 B409                <1>     mov ah, 09h ;Print string
   470 00001EC5 CD21                <1>     int 21h
   471                              <1> .dirPrintNameExit:
   472 00001EC7 FF051BE7FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   473 00001ECD FE0514E7FFFF        <1>     inc byte [dirLineCtr]
   474 00001ED3 803D0DE7FFFF17      <1>     cmp byte [dirLineCtr], 23
   475                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001EDA 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001EDC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   476 00001EDD 488D150EECFFFF      <1>     lea rdx, pauseMes
   477 00001EE4 B409                <1>     mov ah, 09h
   478 00001EE6 CD21                <1>     int 21h
   479 00001EE8 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   480 00001EEA CD21                <1>     int 21h
   481 00001EEC C605F4E6FFFF00      <1>     mov byte [dirLineCtr], 0
   482 00001EF3 488D156EEAFFFF      <1>     lea rdx, crlf   ;Force new line
   483 00001EFA B409                <1>     mov ah, 09h
   484 00001EFC CD21                <1>     int 21h
   485                              <1>     return
    13                              <2> %%_ret:
    14 00001EFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> 
   487                              <1> chdir:
   488 00001EFF F605A4E1FFFFFF      <1>     test byte [arg1Flg], -1
   489 00001F06 754D                <1>     jnz .changeDir
   490                              <1>     ;Print CWD
   491                              <1> .printCWD:
   492 00001F08 E8E0190000          <1>     call putCWDInPrompt ;Exactly the same procedure
   493 00001F0D E85F190000          <1>     call printCRLF
   494                              <1>     return
    13                              <2> %%_ret:
    14 00001F12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> .printDiskCWD:
   496                              <1> ;Print CWD for a specified drive
   497 00001F13 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   498 00001F17 88D0                <1>     mov al, dl
   499 00001F19 0440                <1>     add al, "@" ;Get the UC letter
   500 00001F1B B43A                <1>     mov ah, ":"
   501 00001F1D 488D3DBEE5FFFF      <1>     lea rdi, searchSpec
   502 00001F24 66AB                <1>     stosw   ;Store X:, rdi+=2
   503 00001F26 8A05FDE0FFFF        <1>     mov al, byte [pathSep]
   504 00001F2C AA                  <1>     stosb   ;Store pathSep, inc rdi
   505 00001F2D B447                <1>     mov ah, 47h ;Get Current Working Directory
   506 00001F2F 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   507 00001F32 CD21                <1>     int 21h
   508 00001F34 E8531B0000          <1>     call strlen
   509 00001F39 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   510 00001F3F B440                <1>     mov ah, 40h ;Write to handle
   511 00001F41 BB01000000          <1>     mov ebx, 1  ;STDOUT
   512 00001F46 488D1595E5FFFF      <1>     lea rdx, searchSpec
   513 00001F4D CD21                <1>     int 21h
   514 00001F4F E81D190000          <1>     call printCRLF
   515                              <1>     return
    13                              <2> %%_ret:
    14 00001F54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> .changeDir:
   517 00001F55 8A0551E1FFFF        <1>     mov al, byte [arg1FCBret]
   518 00001F5B 3CFF                <1>     cmp al, -1 
   519 00001F5D 0F8476FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   520 00001F63 E8B41C0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   521 00001F68 488D1573E5FFFF      <1>     lea rdx, searchSpec
   522 00001F6F B43B                <1>     mov ah, 3Bh ;CHDIR
   523 00001F71 CD21                <1>     int 21h
   524 00001F73 0F828DFAFFFF        <1>     jc badDirError
   525                              <1>     return
    13                              <2> %%_ret:
    14 00001F79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> mkdir:
   528 00001F7A F60529E1FFFFFF      <1>     test byte [arg1Flg], -1
   529 00001F81 0F845BFAFFFF        <1>     jz badArgError
   530 00001F87 F6051FE1FFFFFF      <1>     test byte [arg2Flg], -1
   531 00001F8E 0F854EFAFFFF        <1>     jnz badArgError
   532                              <1>     ;We have exactly one argument
   533 00001F94 8A0512E1FFFF        <1>     mov al, byte [arg1FCBret]
   534 00001F9A 3CFF                <1>     cmp al, -1 
   535 00001F9C 0F8437FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   536 00001FA2 E8751C0000          <1>     call buildCommandPath
   537 00001FA7 488D1534E5FFFF      <1>     lea rdx, searchSpec
   538 00001FAE B800390000          <1>     mov eax, 3900h  ;MKDIR
   539 00001FB3 CD21                <1>     int 21h
   540                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001FB5 73(79)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   541                              <1> .badMake:   ;Else, bad make
   542 00001FB7 488D1568ECFFFF      <1>     lea rdx, badMD
   543 00001FBE E9B5180000          <1>     jmp printString
   544                              <1> 
   545                              <1> rmdir:
   546 00001FC3 F605E0E0FFFFFF      <1>     test byte [arg1Flg], -1
   547 00001FCA 0F8412FAFFFF        <1>     jz badArgError
   548 00001FD0 F605D6E0FFFFFF      <1>     test byte [arg2Flg], -1
   549 00001FD7 0F8505FAFFFF        <1>     jnz badArgError
   550                              <1>     ;We have exactly one argument
   551 00001FDD 8A05C9E0FFFF        <1>     mov al, byte [arg1FCBret]
   552 00001FE3 3CFF                <1>     cmp al, -1 
   553 00001FE5 0F84EEF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   554 00001FEB E82C1C0000          <1>     call buildCommandPath
   555 00001FF0 488D15EBE4FFFF      <1>     lea rdx, searchSpec
   556 00001FF7 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   557 00001FFC CD21                <1>     int 21h
   558                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001FFE 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002000 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   559                              <1> .badRemove:   ;Else, bad make
   560 00002001 488D153BECFFFF      <1>     lea rdx, badRD
   561 00002008 E96B180000          <1>     jmp printString
   562                              <1> 
   563                              <1> xcopy:  ;tmp command name until we get this ok
   564 0000200D 66C705B8E7FFFFFFFF  <1>     mov word [sourceHdl], -1
   565 00002016 66C705B1E7FFFFFFFF  <1>     mov word [destHdl], -1
   566 0000201F 66C705AAE7FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   567 00002028 C6052FE8FFFF00      <1>     mov byte [cpyFlg], 0
   568 0000202F 48C7051AE8FFFF0000- <1>     mov qword [cpBufPtr], 0         ;If this is ever null, error!
   568 00002038 0000                <1>
   569 0000203A 48C70517E8FFFF0000- <1>     mov qword [cpBufSz], 0          
   569 00002043 0000                <1>
   570 00002045 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   571 0000204C 4889F7              <1>     mov rdi, rsi                    ;Start scanning chars here
   572 0000204F 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   573 00002053 B02B                <1>     mov al, "+"                     ;Are we concatenating?
   574 00002055 F2AE                <1>     repne scasb
   575 00002057 7507                <1>     jne .noCat
   576 00002059 800DFEE7FFFF04      <1>     or byte [cpyFlg], catCpy        ;We are concatenating 
   577                              <1> .noCat:
   578                              <1> ;Now we get a disk buffer, of the size of the internal disk buffers. 
   579                              <1> ;If we cant get a disk buffer, use searchspec as an input buffer! 
   580                              <1> ;   (Can copy 256 chars at once)
   581 00002060 B800520000          <1>     mov eax, 5200h
   582 00002065 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   583 00002067 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   584 0000206B 89CB                <1>     mov ebx, ecx
   585 0000206D C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   586 00002070 B800480000          <1>     mov eax, 4800h
   587 00002075 CD21                <1>     int 21h
   588 00002077 730C                <1>     jnc .bufOk
   589 00002079 488D0562E4FFFF      <1>     lea rax, searchSpec
   590 00002080 B900010000          <1>     mov ecx, 256
   591                              <1> .bufOk:
   592 00002085 488905C8E7FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   593 0000208C 66890DC9E7FFFF      <1>     mov word [cpBufSz], cx      ;Save buffer size
   594                              <1> ;Now we search for the destination name. This is done by searching for a 
   595                              <1> ; delimiter that is followed by a non-+ and non-switchchar
   596                              <1> 
   597                              <1> .cpErr:
   598 00002093 4150                <1>     push r8
   599 00002095 4C8B05B8E7FFFF      <1>     mov r8, qword [cpBufPtr]
   600 0000209C B800490000          <1>     mov eax, 4900h
   601 000020A1 CD21                <1>     int 21h
   602 000020A3 4158                <1>     pop r8
   603 000020A5 0F826D1C0000        <1>     jc freezePC ;Bad ptr or bad mcb. Bad ptr shouldnt happen, badMCB big error
   604                              <1>     ;Other cleanup here
   605                              <1>     return
    13                              <2> %%_ret:
    14 000020AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   606                              <1> copy:
   607 000020AC F605F7DFFFFFFF      <1>     test byte [arg1Flg], -1
   608 000020B3 0F8429F9FFFF        <1>     jz badArgError
   609 000020B9 F605EDDFFFFFFF      <1>     test byte [arg2Flg], -1
   610 000020C0 0F841CF9FFFF        <1>     jz badArgError
   611 000020C6 0FB605DEDFFFFF      <1>     movzx eax, byte [arg1Off]
   612 000020CD 4C8B053BDFFFFF      <1>     mov r8, [pspPtr]
   613 000020D4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   614 000020DB 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   615 000020DE 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   616 000020E1 488D3DC7E5FFFF      <1>     lea rdi, srcSpec
   617 000020E8 E8EC1A0000          <1>     call cpDelimPathToBufz    
   618 000020ED 0FB605BADFFFFF      <1>     movzx eax, byte [arg2Off]
   619 000020F4 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   620 000020F7 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   621 000020FA 488D3D30E6FFFF      <1>     lea rdi, destSpec
   622 00002101 E8D31A0000          <1>     call cpDelimPathToBufz   
   623                              <1> ;Before we open, we check if the two filenames are equal
   624                              <1> ; If so, crap out.
   625 00002106 488D35A2E5FFFF      <1>     lea rsi, srcSpec
   626 0000210D 488D3D1DE6FFFF      <1>     lea rdi, destSpec
   627 00002114 B81E120000          <1>     mov eax, 121Eh
   628 00002119 CD2F                <1>     int 2Fh
   629 0000211B 0F84D0000000        <1>     jz .sameFilename
   630                              <1>     ;Open source with read permission
   631                              <1>     ;Open destination with write permission
   632 00002121 488D1587E5FFFF      <1>     lea rdx, srcSpec
   633 00002128 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   634 0000212D CD21                <1>     int 21h
   635 0000212F 0F829BF8FFFF        <1>     jc badParamError
   636 00002135 66890592E6FFFF      <1>     mov word [sourceHdl], ax
   637                              <1> 
   638 0000213C 0FB7D8              <1>     movzx ebx, ax   ;For bx
   639 0000213F B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   640 00002144 CD21                <1>     int 21h
   641 00002146 66891585E6FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   642                              <1> 
   643 0000214D 488D15DDE5FFFF      <1>     lea rdx, destSpec
   644 00002154 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   645 00002159 31C9                <1>     xor ecx, ecx    ;No file attributes
   646 0000215B CD21                <1>     int 21h
   647 0000215D 0F82B5000000        <1>     jc .badExit
   648 00002163 66890566E6FFFF      <1>     mov word [destHdl], ax
   649 0000216A 31F6                <1>     xor esi, esi
   650 0000216C 488D1561E6FFFF      <1>     lea rdx, copyBuffer
   651                              <1> .copyLoop:
   652 00002173 B980000000          <1>     mov ecx, 128
   653 00002178 0FB71D4FE6FFFF      <1>     movzx ebx, word [sourceHdl]
   654 0000217F B43F                <1>     mov ah, 3Fh ;Read
   655 00002181 CD21                <1>     int 21h
   656 00002183 0F828F000000        <1>     jc .badExit
   657 00002189 85C0                <1>     test eax, eax
   658 0000218B 7437                <1>     jz .okExit
   659 0000218D 01C6                <1>     add esi, eax
   660 0000218F 89C1                <1>     mov ecx, eax
   661 00002191 0FB71D38E6FFFF      <1>     movzx ebx, word [destHdl]
   662 00002198 B440                <1>     mov ah, 40h ;Write
   663 0000219A CD21                <1>     int 21h
   664 0000219C 727A                <1>     jc .badExit
   665 0000219E 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   666 000021A3 74CE                <1>     je .copyLoop
   667                              <1>     ;If not char dev, exit
   668 000021A5 66F70524E6FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   669 000021AE 7414                <1>     jz .okExit
   670                              <1>     ;Is handle in cooked or binary mode?
   671 000021B0 66F70519E6FFFF2000  <1>     test word [srcHdlInfo], 20h
   672 000021B9 7509                <1>     jnz .okExit
   673                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   674 000021BB 09C0                <1>     or eax, eax ;Clear upper bits in eax
   675 000021BD 807C02FD1A          <1>     cmp byte [rdx + rax - 3], EOF ;Was char before CRLF a EOF?
   676 000021C2 75AF                <1>     jne .copyLoop   ;Jump if not
   677                              <1> .okExit:
   678 000021C4 E832000000          <1>     call .leaveCopyClose
   679 000021C9 488D1598E7FFFF      <1>     lea rdx, crlf
   680 000021D0 B409                <1>     mov ah, 09h
   681 000021D2 CD21                <1>     int 21h
   682 000021D4 488D1551EDFFFF      <1>     lea rdx, fourSpc
   683 000021DB B409                <1>     mov ah, 09h
   684 000021DD CD21                <1>     int 21h
   685 000021DF B402                <1>     mov ah, 02h
   686 000021E1 B231                <1>     mov dl, "1" ;1 File(s) copied
   687 000021E3 CD21                <1>     int 21h
   688 000021E5 488D15B5E8FFFF      <1>     lea rdx, copyOk
   689 000021EC B409                <1>     mov ah, 09h
   690 000021EE CD21                <1>     int 21h
   691                              <1>     return
    13                              <2> %%_ret:
    14 000021F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   692                              <1> .sameFilename:
   693 000021F1 E805000000          <1>     call .leaveCopyClose ;Close the handles
   694 000021F6 E9CCF7FFFF          <1>     jmp noSelfCopyError
   695                              <1> .leaveCopyClose:
   696 000021FB 668B1DCCE5FFFF      <1>     mov bx, word [sourceHdl]
   697 00002202 B8003E0000          <1>     mov eax, 3E00h
   698 00002207 CD21                <1>     int 21h
   699 00002209 668B1DC0E5FFFF      <1>     mov bx, word [destHdl]
   700 00002210 B8003E0000          <1>     mov eax, 3E00h
   701 00002215 CD21                <1>     int 21h
   702                              <1>     return
    13                              <2> %%_ret:
    14 00002217 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   703                              <1> .badExit:
   704                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   705 00002218 668B1DAFE5FFFF      <1>     mov bx, word [sourceHdl]
   706 0000221F 6681FBFFFF          <1>     cmp bx, -1
   707 00002224 7407                <1>     je .skipSource
   708 00002226 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   709 0000222B CD21                <1>     int 21h
   710                              <1> .skipSource:
   711 0000222D 668B1D9CE5FFFF      <1>     mov bx, word [destHdl]
   712 00002234 6681FBFFFF          <1>     cmp bx, -1
   713 00002239 0F8491F7FFFF        <1>     je badParamError
   714 0000223F B8003E0000          <1>     mov eax, 3E00h
   715 00002244 CD21                <1>     int 21h
   716 00002246 E985F7FFFF          <1>     jmp badParamError
   717                              <1> 
   718                              <1> erase:
   719 0000224B F60558DEFFFFFF      <1>     test byte [arg1Flg], -1
   720 00002252 0F848AF7FFFF        <1>     jz badArgError
   721 00002258 E8D61A0000          <1>     call setDTA     ;Start by resetting the DTA
   722 0000225D E8BA190000          <1>     call buildCommandPath   ;Get the relative path to the file
   723                              <1> .dirLp:
   724 00002262 488D3D79E2FFFF      <1>     lea rdi, searchSpec
   725 00002269 E8F1180000          <1>     call findLastPathComponant
   726 0000226E 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   727 00002271 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   728 00002275 B03F                <1>     mov al, "?"
   729                              <1>     ;Store question marks in the name field
   730 00002277 57                  <1>     push rdi
   731 00002278 48FFC7              <1>     inc rdi ;Goto the first char
   732 0000227B B90B000000          <1>     mov ecx, 11
   733 00002280 F3AA                <1>     rep stosb
   734 00002282 5F                  <1>     pop rdi
   735 00002283 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   736 00002286 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   737 0000228B CD21                <1>     int 21h
   738 0000228D 3C01                <1>     cmp al, 1
   739 0000228F 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   740                              <1>     ;Else, we now copy back the search pattern over the last componant!
   741                              <1>     ;No dirs to handle in here
   742 00002295 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   743 00002299 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   744 0000229C E8E2180000          <1>     call FCBToAsciiz    ;Null terminates for free
   745                              <1>     ;Count the number of ?'s, if 11, we print the message
   746 000022A1 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   747 000022A5 31C9                <1>     xor ecx, ecx
   748                              <1> .wcScan:
   749 000022A7 AC                  <1>     lodsb
   750 000022A8 3C3F                <1>     cmp al, "?"
   751 000022AA 7534                <1>     jne .endCount
   752 000022AC FFC1                <1>     inc ecx
   753 000022AE 81F90B000000        <1>     cmp ecx, 11
   754 000022B4 75F1                <1>     jne .wcScan
   755                              <1> .ynmsg:
   756 000022B6 488D1509E9FFFF      <1>     lea rdx, ynMes
   757 000022BD E8B6150000          <1>     call printString
   758 000022C2 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   759 000022C4 CD21                <1>     int 21h ;Get char in al
   760 000022C6 E8CB170000          <1>     call ucChar ;Uppercase the char
   761 000022CB 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   762 000022CD 740C                <1>     je .endCount1
   763 000022CF 3C4E                <1>     cmp al, "N"
   764                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000022D1 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000022D3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   765 000022D4 E898150000          <1>     call printCRLF      ;Else, tell me what you want!!!
   766 000022D9 EBDB                <1>     jmp short .ynmsg    
   767                              <1> .endCount1:
   768 000022DB E891150000          <1>     call printCRLF
   769                              <1> .endCount:
   770                              <1>     ;Now we copy our search template pathstring to delPath
   771 000022E0 488D3DC8E3FFFF      <1>     lea rdi, delPath
   772 000022E7 488D35F4E1FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   773 000022EE E88F170000          <1>     call strcpy2         ;Copy the string over to delPath
   774                              <1> .findFile:
   775                              <1>     ;Now we find first/find next our way through the files
   776 000022F3 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   777 000022F6 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   778 000022F8 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   779 000022FD CD21                <1>     int 21h
   780 000022FF 0F82F8F6FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   781                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   782 00002305 E855180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   783 0000230A 488D3575DEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   784                              <1> .delNextFile:
   785                              <1> ;rsi and rdi dont move here
   786 00002311 E86C170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   787 00002316 488D1592E3FFFF      <1>     lea rdx, delPath
   788 0000231D B800410000          <1>     mov eax, 4100h  ;Delete File 
   789 00002322 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   790 00002324 488D15B7E1FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   791 0000232B B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   792 00002330 CD21                <1>     int 21h
   793 00002332 73DD                <1>     jnc .delNextFile    
   794 00002334 F8                  <1>     clc ;Clear carry to indicate success
   795                              <1>     return
    13                              <2> %%_ret:
    14 00002335 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .noWildcard:
   797                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   798                              <1>     ; a \*.*<NUL> over the null terminator
   799 00002336 488D15A5E1FFFF      <1>     lea rdx, searchSpec
   800 0000233D B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   801 00002342 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   802 00002347 CD21                <1>     int 21h
   803 00002349 0F82AEF6FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   804 0000234F F60527DEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   805 00002356 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   806                              <1>     ;Else, we are dealing with a dir
   807 00002358 4889D7              <1>     mov rdi, rdx
   808 0000235B 31C9                <1>     xor ecx, ecx
   809 0000235D FFC9                <1>     dec ecx
   810 0000235F F2AE                <1>     repne scasb ;Go to the end of the line!
   811 00002361 48FFCF              <1>     dec rdi
   812 00002364 0FB605BEDCFFFF      <1>     movzx eax, byte [pathSep]
   813 0000236B AA                  <1>     stosb
   814 0000236C B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   815 00002371 AB                  <1>     stosd
   816 00002372 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   817                              <1> .delMain:   ;Call with rdx -> buffer!
   818 00002377 B800410000          <1>     mov eax, 4100h  ;Delete File 
   819 0000237C CD21                <1>     int 21h
   820                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000237E 73(35)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   821 00002380 3C05                <1>     cmp al, errAccDen
   822 00002382 0F8436F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   823 00002388 E95EF6FFFF          <1>     jmp badFileError
   824                              <1>     return
    13                              <2> %%_ret:
    14 0000238D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> 
   826                              <1> date:
   827 0000238E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   828 00002395 E80E170000          <1>     call skipDelimiters
   829 0000239A 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
   830 0000239D 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
   831                              <1>     ;Else, we do interactive mode!
   832 0000239F 488D15A3E7FFFF      <1>     lea rdx, curDate
   833 000023A6 B409                <1>     mov ah, 09h
   834 000023A8 CD21                <1>     int 21h
   835 000023AA E8F8150000          <1>     call printFmtDate
   836                              <1> .noCur:
   837 000023AF 488D15A4E7FFFF      <1>     lea rdx, newDate
   838 000023B6 B409                <1>     mov ah, 09h
   839 000023B8 CD21                <1>     int 21h
   840 000023BA 488D15B8E7FFFF      <1>     lea rdx, ukDate
   841 000023C1 488D05A4E7FFFF      <1>     lea rax, usDate
   842 000023C8 488D1DB7E7FFFF      <1>     lea rbx, jpDate
   843 000023CF 803D5EDCFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   844 000023D6 480F47D3            <1>     cmova rdx, rbx
   845 000023DA 480F42D0            <1>     cmovb rdx, rax
   846 000023DE B409                <1>     mov ah, 09h
   847 000023E0 CD21                <1>     int 21h
   848                              <1> 
   849 000023E2 488D154CDEFFFF      <1>     lea rdx, cpyBuffer
   850 000023E9 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   851 000023EC B40A                <1>     mov ah, 0Ah
   852 000023EE CD21                <1>     int 21h
   853 000023F0 52                  <1>     push rdx
   854 000023F1 E87B140000          <1>     call printCRLF
   855 000023F6 5A                  <1>     pop rdx
   856 000023F7 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   857                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000023FB 74(8D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   858                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
   859 000023FD 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
   860                              <1> .goDate:
   861 00002401 31C0                <1>     xor eax, eax    
   862 00002403 803D2ADCFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   863 0000240A 727B                <1>     jb .us
   864 0000240C 0F87B7000000        <1>     ja .jpn
   865                              <1>     ;Here for UK style dates
   866 00002412 E8D6180000          <1>     call getByte
   867 00002417 725D                <1>     jc .badDate
   868 00002419 88058EE2FFFF        <1>     mov byte [td3], al  ;Store the day
   869 0000241F E80C010000          <1>     call .validSep
   870 00002424 7550                <1>     jne .badDate
   871 00002426 E8C2180000          <1>     call getByte
   872 0000242B 7249                <1>     jc .badDate
   873 0000242D 88057BE2FFFF        <1>     mov byte [td4], al  ;Store month
   874 00002433 E8F8000000          <1>     call .validSep
   875 00002438 753C                <1>     jne .badDate
   876 0000243A E8BA180000          <1>     call getNum
   877 0000243F E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
   878 00002444 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
   879 00002449 732B                <1>     jae .badDate
   880 0000244B 66890559E2FFFF      <1>     mov word [td1], ax  ;Store the word directly
   881                              <1> .writeDate:
   882 00002452 E851160000          <1>     call skipDelimiters
   883 00002457 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
   884 0000245A 751A                <1>     jne .badDate
   885 0000245C 0FB70D48E2FFFF      <1>     movzx ecx, word [td1]   ;Get the year
   886 00002463 668B1543E2FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
   887 0000246A B8002B0000          <1>     mov eax, 2B00h
   888 0000246F CD21                <1>     int 21h
   889 00002471 84C0                <1>     test al, al
   890                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002473 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002475 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   891                              <1> .badDate:
   892 00002476 488D15BDE6FFFF      <1>     lea rdx, badDate
   893 0000247D E8F6130000          <1>     call printString
   894 00002482 E928FFFFFF          <1>     jmp date.noCur
   895                              <1> .us:
   896 00002487 E861180000          <1>     call getByte
   897 0000248C 72E8                <1>     jc .badDate
   898 0000248E 88051AE2FFFF        <1>     mov byte [td4], al  ;Store the month
   899 00002494 E897000000          <1>     call .validSep
   900 00002499 75DB                <1>     jne .badDate
   901 0000249B E84D180000          <1>     call getByte
   902 000024A0 72D4                <1>     jc .badDate
   903 000024A2 880505E2FFFF        <1>     mov byte [td3], al  ;Store day
   904 000024A8 E883000000          <1>     call .validSep
   905 000024AD 75C7                <1>     jne .badDate
   906 000024AF E845180000          <1>     call getNum
   907 000024B4 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
   908 000024B9 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
   909 000024BE 73B6                <1>     jae .badDate
   910 000024C0 668905E4E1FFFF      <1>     mov word [td1], ax  ;Store the word directly
   911                              <1> .writeHop:
   912 000024C7 EB89                <1>     jmp short .writeDate
   913                              <1> .jpn:
   914 000024C9 E82B180000          <1>     call getNum
   915 000024CE E840000000          <1>     call .doYear    ;Adjusts the year if necessary
   916 000024D3 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
   917 000024D8 739C                <1>     jae .badDate
   918 000024DA 668905CAE1FFFF      <1>     mov word [td1], ax  ;Store the word directly
   919 000024E1 E84A000000          <1>     call .validSep
   920 000024E6 758E                <1>     jne .badDate
   921 000024E8 E800180000          <1>     call getByte
   922 000024ED 7287                <1>     jc .badDate
   923 000024EF 8805B8E1FFFF        <1>     mov byte [td3], al  ;Store the day
   924 000024F5 E836000000          <1>     call .validSep
   925 000024FA 0F8576FFFFFF        <1>     jne .badDate
   926 00002500 E8E8170000          <1>     call getByte
   927 00002505 0F826BFFFFFF        <1>     jc .badDate
   928 0000250B 88059DE1FFFF        <1>     mov byte [td4], al  ;Store month
   929 00002511 EBB4                <1>     jmp short .writeHop
   930                              <1> .doYear:
   931 00002513 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
   932                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002518 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000251A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   933                              <1> ;If the user specifies 80-99 it means 1980-1999
   934                              <1> ;If the user specifies 00-79 it means 2000-2079
   935 0000251B BBD0070000          <1>     mov ebx, 2000
   936 00002520 B96C070000          <1>     mov ecx, 1900
   937 00002525 3D50000000          <1>     cmp eax, 80     
   938 0000252A 0F42CB              <1>     cmovb ecx, ebx
   939 0000252D 01C8                <1>     add eax, ecx
   940                              <1>     return
    13                              <2> %%_ret:
    14 0000252F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   941                              <1> .validSep:
   942 00002530 AC                  <1>     lodsb           ;Get the char and return
   943 00002531 3C2E                <1>     cmp al, "."
   944                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002533 74(2F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   945 00002535 3C2F                <1>     cmp al, "/"
   946                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002537 74(2F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   947 00002539 3C2D                <1>     cmp al, "-"
   948                              <1>     return
    13                              <2> %%_ret:
    14 0000253B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   949                              <1> 
   950                              <1> time:
   951 0000253C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   952 00002543 E860150000          <1>     call skipDelimiters
   953 00002548 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
   954 0000254B 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
   955 0000254D 488D154EE6FFFF      <1>     lea rdx, curTime
   956 00002554 B409                <1>     mov ah, 09h
   957 00002556 CD21                <1>     int 21h
   958 00002558 E8E1130000          <1>     call printFmtTime
   959                              <1> .noCur:
   960 0000255D 488D154FE6FFFF      <1>     lea rdx, newTime
   961 00002564 B409                <1>     mov ah, 09h
   962 00002566 CD21                <1>     int 21h
   963                              <1> 
   964 00002568 488D1544DCFFFF      <1>     lea rdx, inBuffer
   965 0000256F C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   966 00002572 B40A                <1>     mov ah, 0Ah
   967 00002574 CD21                <1>     int 21h
   968 00002576 52                  <1>     push rdx
   969 00002577 488D15EAE3FFFF      <1>     lea rdx, crlf
   970 0000257E B409                <1>     mov ah, 09h
   971 00002580 CD21                <1>     int 21h
   972 00002582 5A                  <1>     pop rdx
   973 00002583 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   974                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002587 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   975 00002589 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
   976                              <1> .goTime:
   977 0000258D C70514E1FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
   977 00002596 00                  <1>
   978 00002597 31C0                <1>     xor eax, eax   
   979 00002599 E84F170000          <1>     call getByte
   980 0000259E 0F8294000000        <1>     jc .badTime         ;Get the number in eax
   981 000025A4 880502E1FFFF        <1>     mov byte [td2], al  ;Save hours
   982 000025AA E89A000000          <1>     call .validsep
   983 000025AF 0F8583000000        <1>     jne .badTime
   984 000025B5 E833170000          <1>     call getByte
   985 000025BA 727C                <1>     jc .badTime
   986 000025BC 8805E9E0FFFF        <1>     mov byte [td1], al  ;Save minutes
   987 000025C2 E882000000          <1>     call .validsep
   988 000025C7 740F                <1>     je .goSec
   989 000025C9 48FFCE              <1>     dec rsi ;Go back a char
   990 000025CC E8D7140000          <1>     call skipDelimiters ;Skip any delimiters
   991 000025D1 803E0D              <1>     cmp byte [rsi], CR
   992 000025D4 743E                <1>     je .setTime
   993 000025D6 EB60                <1>     jmp short .badTime
   994                              <1> .goSec:
   995 000025D8 E878000000          <1>     call .checkNum
   996 000025DD 7259                <1>     jc .badTime
   997 000025DF E809170000          <1>     call getByte
   998 000025E4 7252                <1>     jc .badTime
   999 000025E6 8805C2E0FFFF        <1>     mov byte [td4], al  ;Save seconds
  1000 000025EC AC                  <1>     lodsb       ;Move rsi forwards
  1001 000025ED 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1002 000025EF 740F                <1>     je .goMsec
  1003 000025F1 48FFCE              <1>     dec rsi ;Go back a char
  1004 000025F4 E8AF140000          <1>     call skipDelimiters ;Skip any delimiters
  1005 000025F9 803E0D              <1>     cmp byte [rsi], CR
  1006 000025FC 7416                <1>     je .setTime
  1007 000025FE EB38                <1>     jmp short .badTime
  1008                              <1> .goMsec:
  1009 00002600 E850000000          <1>     call .checkNum
  1010 00002605 7231                <1>     jc .badTime
  1011 00002607 E8E1160000          <1>     call getByte
  1012 0000260C 722A                <1>     jc .badTime
  1013 0000260E 880599E0FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1014                              <1> .setTime:
  1015 00002614 E88F140000          <1>     call skipDelimiters
  1016 00002619 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1017 0000261C 751A                <1>     jne .badTime
  1018 0000261E 0FB70D86E0FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1019 00002625 0FB71581E0FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1020 0000262C B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1021 00002631 CD21                <1>     int 21h
  1022 00002633 A8FF                <1>     test al, -1
  1023                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002635 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002637 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1024                              <1> .badTime:
  1025 00002638 488D1554E5FFFF      <1>     lea rdx, badTime
  1026 0000263F E834120000          <1>     call printString
  1027 00002644 E914FFFFFF          <1>     jmp time.noCur
  1028                              <1> .validsep:
  1029 00002649 AC                  <1>     lodsb
  1030 0000264A 3A05F1D9FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1031                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002650 74(37)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1032 00002652 3C2E                <1>     cmp al, "."
  1033                              <1>     return
    13                              <2> %%_ret:
    14 00002654 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1034                              <1> .checkNum:
  1035 00002655 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1036 00002656 48FFCE              <1>     dec rsi
  1037 00002659 3C30                <1>     cmp al, "0"
  1038 0000265B 7206                <1>     jb .cnbad
  1039 0000265D 3C39                <1>     cmp al, "9"
  1040 0000265F 7702                <1>     ja .cnbad
  1041 00002661 F8                  <1>     clc
  1042                              <1>     return
    13                              <2> %%_ret:
    14 00002662 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1043                              <1> .cnbad:
  1044 00002663 F9                  <1>     stc
  1045                              <1>     return
    13                              <2> %%_ret:
    14 00002664 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1046                              <1> ctty:
  1047 00002665 F6053EDAFFFFFF      <1>     test byte [arg1Flg], -1
  1048 0000266C 0F8470F3FFFF        <1>     jz badArgError
  1049 00002672 F60534DAFFFFFF      <1>     test byte [arg2Flg], -1
  1050 00002679 0F8563F3FFFF        <1>     jnz badArgError
  1051 0000267F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1052 00002686 0FB6051EDAFFFF      <1>     movzx eax, byte [arg1Off]
  1053 0000268D 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1054 00002690 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1055 00002694 750F                <1>     jne .noDrive
  1056 00002696 0FB6050FDAFFFF      <1>     movzx eax, byte [arg1FCBret]
  1057 0000269D 3CFF                <1>     cmp al, -1
  1058 0000269F 0F8434F3FFFF        <1>     je badDriveError
  1059                              <1> .noDrive:
  1060                              <1>     ;Now we open the provided file
  1061 000026A5 E88A150000          <1>     call copyArgumentToSearchSpec
  1062 000026AA 488D1531DEFFFF      <1>     lea rdx, searchSpec
  1063 000026B1 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1064 000026B6 CD21                <1>     int 21h
  1065 000026B8 0F822DF3FFFF        <1>     jc badFileError
  1066 000026BE 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1067 000026C1 B800440000          <1>     mov eax, 4400h  ;Get device word
  1068 000026C6 CD21                <1>     int 21h
  1069 000026C8 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1070 000026CB 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1071                              <1>     ;Now we set this handle to be STDIO
  1072 000026CD 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1073 000026D0 30F6                <1>     xor dh, dh
  1074 000026D2 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1075 000026D7 CD21                <1>     int 21h
  1076                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1077 000026D9 31C9                <1>     xor ecx, ecx    ;STDIN
  1078 000026DB B446                <1>     mov ah, 46h
  1079 000026DD CD21                <1>     int 21h
  1080 000026DF FFC1                <1>     inc ecx         ;STDOUT
  1081 000026E1 B446                <1>     mov ah, 46h
  1082 000026E3 CD21                <1>     int 21h
  1083 000026E5 FFC1                <1>     inc ecx         ;STDERR
  1084 000026E7 B446                <1>     mov ah, 46h
  1085 000026E9 CD21                <1>     int 21h
  1086 000026EB B43E                <1>     mov ah, 3Eh ;Now we close the original handle
  1087 000026ED CD21                <1>     int 21h
  1088                              <1>     return
    13                              <2> %%_ret:
    14 000026EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1089                              <1> .badCharDev:
  1090 000026F0 488D15CDE5FFFF      <1>     lea rdx, badDev
  1091 000026F7 B409                <1>     mov ah, 09h
  1092 000026F9 CD21                <1>     int 21h
  1093 000026FB B43E                <1>     mov ah, 3Eh ;Close opened handle
  1094 000026FD CD21                <1>     int 21h
  1095                              <1>     return
    13                              <2> %%_ret:
    14 000026FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1096                              <1> 
  1097                              <1> cls:  
  1098 00002700 B800440000          <1>     mov eax, 4400h  ;Get device info
  1099 00002705 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1100 0000270A CD21                <1>     int 21h         ;in dx
  1101 0000270C F7C280000000        <1>     test edx, devCharDev
  1102 00002712 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1103 00002714 F7C210000000        <1>     test edx, charDevFastOut
  1104 0000271A 743E                <1>     jz .doAnsi
  1105                              <1>     ;Test if Int 29h uses Int 30h
  1106                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1107                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1108 0000271C B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1109 00002721 CD21                <1>     int 21h
  1110                              <1> .biosCheck:
  1111 00002723 66813BCD30          <1>     cmp word [rbx], 30CDh
  1112 00002728 740C                <1>     je .biosConfirmed
  1113 0000272A 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1114 0000272F 7429                <1>     je .doAnsi
  1115 00002731 48FFC3              <1>     inc rbx
  1116 00002734 EBED                <1>     jmp short .biosCheck
  1117                              <1> .biosConfirmed:
  1118                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1119 00002736 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1120 00002738 31DB                <1>     xor ebx, ebx
  1121 0000273A CD30                <1>     int 30h
  1122 0000273C B40F                <1>     mov ah, 0Fh ;Get screen mode
  1123 0000273E CD30                <1>     int 30h
  1124 00002740 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1125 00002743 FECA                <1>     dec dl
  1126 00002745 B619                <1>     mov dh, 25  ;Number of rows is standard
  1127 00002747 31C0                <1>     xor eax, eax
  1128 00002749 89C1                <1>     mov ecx, eax
  1129 0000274B B707                <1>     mov bh, 7   ;Screen attributes
  1130 0000274D B406                <1>     mov ah, 6   ;Scroll
  1131 0000274F CD30                <1>     int 30h
  1132 00002751 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1133 00002753 B700                <1>     mov bh, 0   ;Page 0
  1134 00002755 B402                <1>     mov ah, 2
  1135 00002757 CD30                <1>     int 30h
  1136                              <1>     return
    13                              <2> %%_ret:
    14 00002759 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> .doAnsi:
  1138                              <1> ;4 chars in the ansi routine
  1139                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1140                              <1> ; understand ANSI codes
  1141 0000275A 488D35C7E7FFFF      <1>     lea rsi, ansiCls
  1142 00002761 B904000000          <1>     mov ecx, 4
  1143 00002766 B406                <1>     mov ah, 06h ;Raw char output
  1144                              <1> .ansiLp:
  1145 00002768 AC                  <1>     lodsb   ;Get the char in 
  1146 00002769 88C2                <1>     mov dl, al
  1147 0000276B CD21                <1>     int 21h
  1148 0000276D FFC9                <1>     dec ecx
  1149 0000276F 75F7                <1>     jnz .ansiLp
  1150                              <1>     return
    13                              <2> %%_ret:
    14 00002771 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1151                              <1> 
  1152                              <1> break:
  1153 00002772 F60531D9FFFFFF      <1>     test byte [arg1Flg], -1
  1154 00002779 752D                <1>     jnz .argumentProvided
  1155                              <1>     ;Here we just get the status of break
  1156 0000277B B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1157 00002780 CD21                <1>     int 21h
  1158 00002782 88D3                <1>     mov bl, dl
  1159 00002784 488D15DBE5FFFF      <1>     lea rdx, breakIs
  1160 0000278B B409                <1>     mov ah, 09h
  1161 0000278D CD21                <1>     int 21h
  1162 0000278F 488D15CBE5FFFF      <1>     lea rdx, onMes
  1163 00002796 488D0DBEE5FFFF      <1>     lea rcx, offMes
  1164 0000279D 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1165 0000279F 480F44D1            <1>     cmovz rdx, rcx
  1166 000027A3 B409                <1>     mov ah, 09h
  1167 000027A5 CD21                <1>     int 21h
  1168                              <1>     return
    13                              <2> %%_ret:
    14 000027A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1169                              <1> .argumentProvided:
  1170 000027A8 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1171 000027AC AD                  <1>     lodsd   ;Read the word
  1172 000027AD 89C3                <1>     mov ebx, eax
  1173 000027AF 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1174 000027B4 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1175 000027B7 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1176 000027BC 7416                <1>     je .maybeOn
  1177 000027BE 663D4F46            <1>     cmp ax, "OF"
  1178 000027C2 7523                <1>     jne .badOnOff
  1179 000027C4 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1180 000027C9 6681FB4620          <1>     cmp bx, "F "
  1181 000027CE 7517                <1>     jne .badOnOff
  1182                              <1>     ;Set off
  1183 000027D0 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1184 000027D2 EB0B                <1>     jmp short .setBreak
  1185                              <1> .maybeOn:
  1186 000027D4 663D4F4E            <1>     cmp ax, "ON"
  1187 000027D8 750D                <1>     jne .badOnOff
  1188                              <1>     ;Set on
  1189 000027DA BA01000000          <1>     mov edx, 1
  1190                              <1> .setBreak:
  1191 000027DF B801330000          <1>     mov eax, 3301h  ;Set break
  1192 000027E4 CD21                <1>     int 21h
  1193                              <1>     return
    13                              <2> %%_ret:
    14 000027E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1194                              <1> .badOnOff:
  1195 000027E7 488D154AE7FFFF      <1>     lea rdx, badOnOff
  1196 000027EE B409                <1>     mov ah, 09h
  1197 000027F0 CD21                <1>     int 21h
  1198                              <1>     return
    13                              <2> %%_ret:
    14 000027F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1199                              <1> 
  1200                              <1> verify:
  1201 000027F3 F605B0D8FFFFFF      <1>     test byte [arg1Flg], -1
  1202 000027FA 752D                <1>     jnz .argumentProvided
  1203                              <1>     ;Here we just get the status of break
  1204 000027FC B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1205 00002801 CD21                <1>     int 21h
  1206 00002803 88C3                <1>     mov bl, al
  1207 00002805 488D1564E5FFFF      <1>     lea rdx, verifyIs
  1208 0000280C B409                <1>     mov ah, 09h
  1209 0000280E CD21                <1>     int 21h
  1210 00002810 488D154AE5FFFF      <1>     lea rdx, onMes
  1211 00002817 488D0D3DE5FFFF      <1>     lea rcx, offMes
  1212 0000281E 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1213 00002820 480F44D1            <1>     cmovz rdx, rcx
  1214 00002824 B409                <1>     mov ah, 09h
  1215 00002826 CD21                <1>     int 21h
  1216                              <1>     return
    13                              <2> %%_ret:
    14 00002828 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1217                              <1> .argumentProvided:
  1218 00002829 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1219 0000282D AD                  <1>     lodsd   ;Read the word
  1220 0000282E 89C3                <1>     mov ebx, eax
  1221 00002830 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1222 00002835 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1223 00002838 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1224 0000283D 7416                <1>     je .maybeOn
  1225 0000283F 663D4F46            <1>     cmp ax, "OF"
  1226 00002843 751F                <1>     jne .badOnOff
  1227 00002845 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1228 0000284A 6681FB4620          <1>     cmp bx, "F "
  1229 0000284F 7513                <1>     jne .badOnOff
  1230                              <1>     ;Set off
  1231 00002851 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1232 00002853 EB0A                <1>     jmp short .setVerify
  1233                              <1> .maybeOn:
  1234 00002855 663D4F4E            <1>     cmp ax, "ON"
  1235 00002859 7509                <1>     jne .badOnOff
  1236                              <1>     ;Set on
  1237 0000285B 31C0                <1>     xor eax, eax
  1238 0000285D FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1239                              <1> .setVerify:
  1240 0000285F B42E                <1>     mov ah, 2Eh  ;Set Verify
  1241 00002861 CD21                <1>     int 21h
  1242                              <1>     return
    13                              <2> %%_ret:
    14 00002863 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1243                              <1> .badOnOff:
  1244 00002864 488D15CDE6FFFF      <1>     lea rdx, badOnOff
  1245 0000286B B409                <1>     mov ah, 09h
  1246 0000286D CD21                <1>     int 21h
  1247                              <1>     return
    13                              <2> %%_ret:
    14 0000286F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1248                              <1> 
  1249                              <1> rename:
  1250 00002870 F60533D8FFFFFF      <1>     test byte [arg1Flg], -1
  1251 00002877 0F8465F1FFFF        <1>     jz badArgError
  1252 0000287D F60529D8FFFFFF      <1>     test byte [arg2Flg], -1
  1253 00002884 0F8458F1FFFF        <1>     jz badArgError    
  1254                              <1>     ;Initialise the variables!
  1255 0000288A 488D351EDEFFFF      <1>     lea rsi, srcSpec
  1256 00002891 4889351BDFFFFF      <1>     mov qword [srcPtr], rsi
  1257 00002898 488D3592DEFFFF      <1>     lea rsi, destSpec
  1258 0000289F 48893515DFFFFF      <1>     mov qword [destPtr], rsi
  1259                              <1>     ;Check the second path is just a filename!
  1260 000028A6 0FB60501D8FFFF      <1>     movzx eax, byte [arg2Off]
  1261 000028AD 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1262 000028B4 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1263 000028B7 488D3D24DCFFFF      <1>     lea rdi, searchSpec
  1264 000028BE 57                  <1>     push rdi
  1265 000028BF E815130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1266 000028C4 5F                  <1>     pop rdi
  1267 000028C5 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1268 000028C9 0F8413F1FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1269 000028CF 4889FE              <1>     mov rsi, rdi
  1270                              <1> .destScan:
  1271 000028D2 AC                  <1>     lodsb   ;Get the char
  1272 000028D3 3A0550D7FFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1273 000028D9 0F8403F1FFFF        <1>     je badArgError
  1274 000028DF 84C0                <1>     test al, al
  1275 000028E1 75EF                <1>     jnz .destScan
  1276                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1277 000028E3 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1278 000028E7 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1278 000028F0 3F                  <1>
  1279 000028F1 B903000000          <1>     mov ecx, 3  ;24 bytes
  1280 000028F6 F348AB              <1>     rep stosq
  1281 000028F9 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1282 000028FA 488D35E1DBFFFF      <1>     lea rsi, searchSpec
  1283 00002901 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1284 00002905 B80D290000          <1>     mov eax, 290Dh
  1285 0000290A CD21                <1>     int 21h     
  1286 0000290C 50                  <1>     push rax    ;Save the WC signature
  1287 0000290D E80A130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1288 00002912 488D3DC9DBFFFF      <1>     lea rdi, searchSpec
  1289 00002919 E841120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1290 0000291E 4889FE              <1>     mov rsi, rdi
  1291 00002921 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1292 00002924 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1293 00002928 B80D290000          <1>     mov eax, 290Dh
  1294 0000292D CD21                <1>     int 21h
  1295 0000292F 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1296 00002930 88CC                <1>     mov ah, cl
  1297 00002932 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1298 00002935 0F84EC000000        <1>     jz .noWC
  1299 0000293B 488D35A0DBFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1300                              <1>     ;Now we check if we have a path to actually handle
  1301 00002942 4839F3              <1>     cmp rbx, rsi
  1302 00002945 7444                <1>     je .noPath
  1303 00002947 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1304 0000294B 488D3590DBFFFF      <1>     lea rsi, searchSpec
  1305 00002952 488D3D56DDFFFF      <1>     lea rdi, srcSpec
  1306 00002959 56                  <1>     push rsi
  1307 0000295A E814110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1308 0000295F 5E                  <1>     pop rsi
  1309 00002960 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1310 00002963 8A05C0D6FFFF        <1>     mov al, byte [pathSep]
  1311 00002969 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1312 0000296A 48893D42DEFFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1313 00002971 488D3DB9DDFFFF      <1>     lea rdi, destSpec
  1314 00002978 E8F6100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1315 0000297D 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1316 00002980 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1317 00002981 48893D33DEFFFF      <1>     mov qword [destPtr], rdi
  1318 00002988 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1319                              <1> .noPath:
  1320                              <1>     ;Now we have where to copy the files to, we can start our work!
  1321 0000298B E8A3130000          <1>     call setDTA
  1322 00002990 488D154BDBFFFF      <1>     lea rdx, searchSpec
  1323 00002997 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1324 00002999 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1325 0000299E CD21                <1>     int 21h
  1326 000029A0 0F824EF0FFFF        <1>     jc badDupFnf    ;If no file was found!
  1327                              <1> .wcLoop:
  1328                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1329 000029A6 488D35D9D7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1330 000029AD 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1331 000029B1 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1332 000029B6 CD21                <1>     int 21h 
  1333                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1334 000029B8 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1335 000029BC 488D3D00DEFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1336 000029C3 57                  <1>     push rdi
  1337 000029C4 48A5                <1>     movsq
  1338 000029C6 66A5                <1>     movsw
  1339 000029C8 A4                  <1>     movsb
  1340 000029C9 5F                  <1>     pop rdi
  1341 000029CA 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1342 000029CE B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1343                              <1> .wcNameMake:
  1344 000029D3 AC                  <1>     lodsb   ;Get the char from the source string
  1345 000029D4 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1346 000029D7 7502                <1>     jne .noStore    ;Dont store the char there
  1347 000029D9 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1348                              <1> .noStore:
  1349 000029DB 48FFC7              <1>     inc rdi ;Goto next char position
  1350 000029DE FFC9                <1>     dec ecx
  1351 000029E0 75F1                <1>     jnz .wcNameMake
  1352                              <1> ;renName now has the FCB name for the file we wish to make!
  1353                              <1> ;Now make the two paths!
  1354 000029E2 488D359DD7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1355 000029E9 488B3DC3DDFFFF      <1>     mov rdi, qword [srcPtr]
  1356 000029F0 E87E100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1357 000029F5 488D35C7DDFFFF      <1>     lea rsi, renName
  1358 000029FC 488B3DB8DDFFFF      <1>     mov rdi, qword [destPtr]
  1359 00002A03 E87B110000          <1>     call FCBToAsciiz
  1360 00002A08 488D15A0DCFFFF      <1>     lea rdx, srcSpec
  1361 00002A0F 488D3D1BDDFFFF      <1>     lea rdi, destSpec
  1362 00002A16 B800560000          <1>     mov eax, 5600h
  1363 00002A1B CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1364 00002A1D B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1365 00002A22 CD21                <1>     int 21h
  1366 00002A24 7380                <1>     jnc .wcLoop     ;And process it too!
  1367                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00002A26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1368                              <1> .noWC:
  1369 00002A27 E8F0110000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1370 00002A2C 0FB6057BD6FFFF      <1>     movzx eax, byte [arg2Off]
  1371 00002A33 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1372 00002A3A 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1373 00002A3D 488D3DEDDCFFFF      <1>     lea rdi, destSpec
  1374 00002A44 57                  <1>     push rdi
  1375 00002A45 E88F110000          <1>     call cpDelimPathToBufz
  1376 00002A4A 5F                  <1>     pop rdi
  1377 00002A4B 488D1590DAFFFF      <1>     lea rdx, searchSpec
  1378 00002A52 B800560000          <1>     mov eax, 5600h
  1379 00002A57 CD21                <1>     int 21h
  1380                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A59 73(26)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1381 00002A5B E994EFFFFF          <1>     jmp badDupFnf   ;Always just return this
  1382                              <1> 
  1383                              <1> 
  1384                              <1> touch:
  1385                              <1> ;Temporarily used to create files
  1386 00002A60 F60543D6FFFFFF      <1>     test byte [arg1Flg], -1
  1387 00002A67 0F8475EFFFFF        <1>     jz badArgError
  1388 00002A6D E8AA110000          <1>     call buildCommandPath
  1389 00002A72 488D1569DAFFFF      <1>     lea rdx, searchSpec
  1390 00002A79 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1391 00002A7E 31C9                <1>     xor ecx, ecx
  1392 00002A80 CD21                <1>     int 21h
  1393 00002A82 721D                <1>     jc .touch1
  1394                              <1> .touchClose:
  1395 00002A84 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1396 00002A87 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1397 00002A8C CD2F                <1>     int 2fh
  1398 00002A8E 89C1                <1>     mov ecx, eax    ;Move the time here
  1399 00002A90 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1400 00002A92 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1401 00002A97 CD21                <1>     int 21h
  1402 00002A99 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1403 00002A9E CD21                <1>     int 21h
  1404                              <1>     return
    13                              <2> %%_ret:
    14 00002AA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1405                              <1> .touch1:
  1406 00002AA1 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1407 00002AA3 7509                <1>     jne .touchError ;If not, this is a proper error!
  1408 00002AA5 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1409 00002AAA CD21                <1>     int 21h
  1410 00002AAC 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1411                              <1> .touchError:
  1412 00002AAE 3C03                <1>     cmp al, errPnf
  1413 00002AB0 0F842CEFFFFF        <1>     je badArgError
  1414 00002AB6 3C02                <1>     cmp al, errFnf
  1415 00002AB8 0F843FEFFFFF        <1>     je badFnf
  1416 00002ABE E9FBEEFFFF          <1>     jmp badAccError
  1417                              <1>     
  1418                              <1> 
  1419                              <1> join:
  1420                              <1> ;Mock join command, to test join. Make an external command.
  1421                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1422 00002AC3 F605AF000000FF      <1>     test byte [.joinOn], -1
  1423 00002ACA 743D                <1>     jz .okJoin
  1424                              <1> .joindisable:
  1425 00002ACC B800520000          <1>     mov eax, 5200h  
  1426 00002AD1 CD21                <1>     int 21h
  1427                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1428 00002AD3 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1429 00002AD8 CD2A                <1>     int 2Ah
  1430 00002ADA 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1431 00002ADE 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1432 00002AE2 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1433 00002AE8 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1434 00002AEB C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1435 00002AEF FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1436 00002AF2 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1437 00002AF7 CD2A                <1>     int 2Ah
  1438 00002AF9 C6057900000000      <1>     mov byte [.joinOn], 0
  1439 00002B00 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1440 00002B07 EB45                <1>     jmp short .joinExit
  1441                              <1> .okJoin:
  1442 00002B09 C60569000000FF      <1>     mov byte [.joinOn], -1
  1443 00002B10 B800520000          <1>     mov eax, 5200h  
  1444 00002B15 CD21                <1>     int 21h
  1445 00002B17 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1446 00002B1B 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1447                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1448 00002B1F B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1449 00002B24 CD2A                <1>     int 2Ah
  1450 00002B26 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1451 00002B2C 4889DF              <1>     mov rdi, rbx
  1452 00002B2F 488D3544000000      <1>     lea rsi, .joinPath
  1453 00002B36 B90C000000          <1>     mov ecx, .joinPathL
  1454 00002B3B F3A4                <1>     rep movsb   ;Copy chars over
  1455 00002B3D FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1456 00002B40 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1457 00002B45 CD2A                <1>     int 2Ah
  1458 00002B47 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1459                              <1> .joinExit:
  1460 00002B4E B800090000          <1>     mov eax, 0900h
  1461 00002B53 CD21                <1>     int 21h
  1462                              <1>     return
    13                              <2> %%_ret:
    14 00002B55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1463 00002B56 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1463 00002B5F 61626C65640D0A24    <1>
  1464 00002B67 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1464 00002B70 7361626C65640D0A24  <1>
  1465 00002B79 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1466 00002B7A 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1466 00002B83 535400              <1>
  1467                              <1> .joinPathL  equ $ - .joinPath 
  1468                              <1> 
  1469                              <1> subst:
  1470                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1471                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1472 00002B86 F605D3000000FF      <1>     test byte [.substOn], -1
  1473 00002B8D 7443                <1>     jz .okSubst
  1474                              <1> .substdisable:
  1475 00002B8F B800520000          <1>     mov eax, 5200h  
  1476 00002B94 CD21                <1>     int 21h
  1477                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1478 00002B96 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1479 00002B9B CD2A                <1>     int 2Ah
  1480 00002B9D 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1481 00002BA1 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1482 00002BA8 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1483 00002BAE C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1484 00002BB1 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1485 00002BB5 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1486 00002BBB B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1487 00002BC0 CD2A                <1>     int 2Ah
  1488 00002BC2 C6059700000000      <1>     mov byte [.substOn], 0
  1489 00002BC9 488D157D000000      <1>     lea rdx, .substDisableMsg
  1490 00002BD0 EB61                <1>     jmp short .substExit
  1491                              <1> .okSubst:
  1492 00002BD2 C60587000000FF      <1>     mov byte [.substOn], -1
  1493 00002BD9 B800520000          <1>     mov eax, 5200h  
  1494 00002BDE CD21                <1>     int 21h
  1495 00002BE0 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1496 00002BE5 CD2A                <1>     int 2Ah
  1497 00002BE7 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1498 00002BEB 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1499 00002BF2 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1500 00002BF6 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1501 00002BFD 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1502 00002C01 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1503                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1504 00002C08 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1505 00002C0E 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1506 00002C14 4889DF              <1>     mov rdi, rbx
  1507 00002C17 488D3543000000      <1>     lea rsi, .substPath
  1508 00002C1E B90C000000          <1>     mov ecx, .substPathL
  1509 00002C23 F3A4                <1>     rep movsb   ;Copy chars over
  1510 00002C25 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1511 00002C2A CD2A                <1>     int 2Ah
  1512 00002C2C 488D1508000000      <1>     lea rdx, .substEnableMsg
  1513                              <1> .substExit:
  1514 00002C33 B800090000          <1>     mov eax, 0900h
  1515 00002C38 CD21                <1>     int 21h
  1516                              <1>     return
    13                              <2> %%_ret:
    14 00002C3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1517 00002C3B 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1517 00002C44 6E61626C65640D0A24  <1>
  1518 00002C4D 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1518 00002C56 697361626C65640D0A- <1>
  1518 00002C5F 24                  <1>
  1519 00002C60 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1520 00002C61 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1520 00002C6A 535400              <1>
  1521                              <1> .substPathL  equ $ - .substPath 
  1522                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1523                              <1> truename:
  1524 00002C6D F60536D4FFFFFF      <1>     test byte [arg1Flg], -1
  1525 00002C74 0F8468EDFFFF        <1>     jz badArgError
  1526 00002C7A E89D0F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1527 00002C7F 488D355CD8FFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1528 00002C86 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1529 00002C89 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1530 00002C8E CD21                <1>     int 21h
  1531 00002C90 730D                <1>     jnc .writePath
  1532 00002C92 3C02                <1>     cmp al, errFnf
  1533 00002C94 0F8451EDFFFF        <1>     je badFileError
  1534 00002C9A E931EDFFFF          <1>     jmp badParamError
  1535                              <1> .writePath:
  1536 00002C9F 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1537 00002CA2 B9FFFFFFFF          <1>     mov ecx, -1
  1538 00002CA7 30C0                <1>     xor al, al
  1539 00002CA9 F2AE                <1>     repne scasb     ;Get the new len
  1540 00002CAB F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1541 00002CAD FFC9                <1>     dec ecx
  1542 00002CAF BB01000000          <1>     mov ebx, 01
  1543 00002CB4 B440                <1>     mov ah, 40h
  1544 00002CB6 CD21                <1>     int 21h
  1545 00002CB8 E8B40B0000          <1>     call printCRLF
  1546                              <1>     return
    13                              <2> %%_ret:
    14 00002CBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1547                              <1> 
  1548                              <1> label:
  1549                              <1> ;Displays/Changes/Deletes the file label
  1550 00002CBE 488D1508000000      <1>     lea rdx, .l1
  1551 00002CC5 B800090000          <1>     mov eax, 0900h
  1552 00002CCA CD21                <1>     int 21h
  1553                              <1>     return
    13                              <2> %%_ret:
    14 00002CCC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1554 00002CCD 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1554 00002CD6 6E20756E696D706C65- <1>
  1554 00002CDF 6D656E7465640D0A24  <1>
  1555                              <1> 
  1556                              <1> mklbl:
  1557                              <1>     ;lea rdx, .l1
  1558                              <1>     ;mov cx, 08h ;Make a label
  1559                              <1>     ;mov eax, 3C00h
  1560                              <1>     ;int 21h
  1561                              <1> 
  1562                              <1>     ;mov ebx, eax
  1563                              <1>     ;mov eax, 3E00h  ;Close the handle
  1564                              <1>     ;int 21h
  1565                              <1>     ;return
  1566                              <1> 
  1567                              <1> ;.l1: db "TESTLABEL",0
  1568 00002CE8 488D1508000000      <1>     lea rdx, .l1
  1569 00002CEF B800160000          <1>     mov eax, 1600h  ;Create FCB
  1570 00002CF4 CD21                <1>     int 21h
  1571                              <1>     return
    13                              <2> %%_ret:
    14 00002CF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1572                              <1> .l1:
  1573                              <1>     istruc exFcb
  1574 00002CF7 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1575 00002CF8 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1576 00002CFE 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1577 00002CFF 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1578 00002D07 4C2020              <1>     at exFcb.fileext,   db "L  "
  1579 00002D0A 00000000            <1>     at exFcb.curBlock,  dd 0
  1580 00002D0E 00<rep 15h>         <1>     iend 
  1581                              <1> rmlbl:
  1582 00002D23 488D1508000000      <1>     lea rdx, .l1
  1583 00002D2A B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1584 00002D2F CD21                <1>     int 21h
  1585                              <1>     return
    13                              <2> %%_ret:
    14 00002D31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1586                              <1> .l1:    ;FCB to volume label
  1587                              <1>     istruc exFcb
  1588 00002D32 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1589 00002D33 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1590 00002D39 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1591 00002D3A 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1592 00002D42 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1593 00002D45 00000000            <1>     at exFcb.curBlock,  dd 0
  1594 00002D49 00<rep 15h>         <1>     iend 
  1595                              <1> 
  1596                              <1> rnlbl:
  1597 00002D5E 488D1508000000      <1>     lea rdx, .l1
  1598 00002D65 B800170000          <1>     mov eax, 1700h
  1599 00002D6A CD21                <1>     int 21h
  1600                              <1>     return
    13                              <2> %%_ret:
    14 00002D6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1601                              <1> .l1:
  1602                              <1>     istruc exRenFcb
  1603 00002D6D FF                  <1>     at exRenFcb.extSig,     db -1
  1604 00002D6E 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1605 00002D74 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1606 00002D75 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1607 00002D7D 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1608 00002D80 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1608 00002D89 4C414245            <1>
  1609 00002D8D 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1610 00002D90 00<rep 4h>          <1>     iend
  1611                              <1> volume:
  1612                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1613 00002D94 F60512D3FFFFFF      <1>     test byte [arg2Flg], -1
  1614 00002D9B 0F8541ECFFFF        <1>     jnz badArgError
  1615 00002DA1 F60502D3FFFFFF      <1>     test byte [arg1Flg], -1
  1616 00002DA8 7507                <1>     jnz .notCurrentDrive
  1617 00002DAA E8BF0C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1618 00002DAF EB31                <1>     jmp short .dirEP
  1619                              <1> .notCurrentDrive:
  1620 00002DB1 E8660E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1621 00002DB6 488D3525D7FFFF      <1>     lea rsi, searchSpec
  1622 00002DBD E8E60C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1623 00002DC2 66AD                <1>     lodsw                   ;Get this word
  1624 00002DC4 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1625 00002DC7 0F8515ECFFFF        <1>     jne badArgError
  1626 00002DCD 8A05D9D2FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1627 00002DD3 A8FF                <1>     test al, -1
  1628 00002DD5 0F85FEEBFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1629 00002DDB 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1630 00002DE0 FFC8                <1>     dec eax ;Convert to 0 based number
  1631                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1632 00002DE2 E84C0F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1633 00002DE7 488D1591D8FFFF      <1>     lea rdx, volFcb
  1634 00002DEE FFC0                <1>     inc eax ;Get 1 based drive number
  1635 00002DF0 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1636 00002DF2 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1637 00002DF5 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1638 00002DFA CD21                <1>     int 21h
  1639 00002DFC 50                  <1>     push rax
  1640                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1641 00002DFD 488D1564DBFFFF      <1>     lea rdx, crlf
  1642 00002E04 B409                <1>     mov ah, 09h
  1643 00002E06 CD21                <1>     int 21h
  1644 00002E08 488D15DEDDFFFF      <1>     lea rdx, volMes
  1645 00002E0F B409                <1>     mov ah, 09h
  1646 00002E11 CD21                <1>     int 21h
  1647 00002E13 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1648 00002E15 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1649 00002E18 B402                <1>     mov ah, 02h
  1650 00002E1A CD21                <1>     int 21h
  1651 00002E1C 58                  <1>     pop rax
  1652 00002E1D 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1653 00002E1F 7409                <1>     jz .volIDOk
  1654 00002E21 488D15DCDDFFFF      <1>     lea rdx, volNo
  1655 00002E28 EB19                <1>     jmp short .volEndPrint
  1656                              <1> .volIDOk:
  1657 00002E2A 488D15CEDDFFFF      <1>     lea rdx, volOk
  1658 00002E31 B409                <1>     mov ah, 09h
  1659 00002E33 CD21                <1>     int 21h
  1660 00002E35 C6053FD3FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1661 00002E3C 488D152DD3FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1662                              <1> .volEndPrint:
  1663 00002E43 B409                <1>     mov ah, 09h
  1664 00002E45 CD21                <1>     int 21h
  1665 00002E47 488D151ADBFFFF      <1>     lea rdx, crlf
  1666 00002E4E B409                <1>     mov ah, 09h
  1667 00002E50 CD21                <1>     int 21h
  1668                              <1>     return
    13                              <2> %%_ret:
    14 00002E52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1669                              <1> 
  1670                              <1> version:
  1671 00002E53 488D150EDBFFFF      <1>     lea rdx, crlf
  1672 00002E5A B409                <1>     mov ah, 09h
  1673 00002E5C CD21                <1>     int 21h
  1674 00002E5E 488D1576DDFFFF      <1>     lea rdx, dosVer
  1675 00002E65 B409                <1>     mov ah, 09h
  1676 00002E67 CD21                <1>     int 21h
  1677 00002E69 E80C000000          <1>     call .printVersionNumber
  1678 00002E6E 488D15F3DAFFFF      <1>     lea rdx, crlf
  1679 00002E75 B409                <1>     mov ah, 09h
  1680 00002E77 CD21                <1>     int 21h
  1681                              <1>     return
    13                              <2> %%_ret:
    14 00002E79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1682                              <1> .printVersionNumber:
  1683 00002E7A B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1684 00002E7C CD21                <1>     int 21h
  1685 00002E7E 50                  <1>     push rax
  1686 00002E7F 0FB6C0              <1>     movzx eax, al
  1687 00002E82 E8CE0D0000          <1>     call printDecimalWord
  1688 00002E87 B22E                <1>     mov dl, "."
  1689 00002E89 B402                <1>     mov ah, 02h
  1690 00002E8B CD21                <1>     int 21h
  1691 00002E8D 58                  <1>     pop rax
  1692 00002E8E 0FB6C4              <1>     movzx eax, ah
  1693 00002E91 E8BF0D0000          <1>     call printDecimalWord
  1694                              <1>     return
    13                              <2> %%_ret:
    14 00002E96 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1695                              <1> 
  1696                              <1> 
  1697                              <1> memory:
  1698 00002E97 488B1D81D1FFFF      <1>     mov rbx, qword [sysVars]
  1699 00002E9E 4885DB              <1>     test rbx, rbx
  1700 00002EA1 7510                <1>     jnz .sysvarsOK
  1701 00002EA3 488D15F5DFFFFF      <1>     lea rdx, memBad0
  1702 00002EAA B409                <1>     mov ah, 09h
  1703 00002EAC CD21                <1>     int 21h
  1704 00002EAE E9700E0000          <1>     jmp freezePC.altEP
  1705                              <1> .sysvarsOK:
  1706                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1707                              <1>     ; and rcx to store Application memory
  1708 00002EB3 31F6                <1>     xor esi, esi
  1709 00002EB5 31FF                <1>     xor edi, edi
  1710 00002EB7 31ED                <1>     xor ebp, ebp
  1711 00002EB9 31C9                <1>     xor ecx, ecx
  1712 00002EBB 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1713 00002EBF 488B1B              <1>     mov rbx, qword [rbx]
  1714                              <1> .memLp:
  1715 00002EC2 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1716 00002EC5 7409                <1>     je .validMCB
  1717 00002EC7 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1718 00002ECA 0F8501010000        <1>     jne .badMCBFound
  1719                              <1> .validMCB:
  1720 00002ED0 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1721 00002ED3 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1722 00002ED7 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1723 00002EDF 7505                <1>     jne .notDOS
  1724 00002EE1 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1725 00002EE4 EB21                <1>     jmp short .gotoNext
  1726                              <1> .notDOS:
  1727 00002EE6 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1728 00002EEE 7505                <1>     jne .notFree
  1729 00002EF0 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1730 00002EF3 EB12                <1>     jmp short .gotoNext
  1731                              <1> .notFree:
  1732 00002EF5 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1733 00002EFD 7505                <1>     jne .notHole
  1734 00002EFF 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1735 00002F02 EB03                <1>     jmp short .gotoNext
  1736                              <1> .notHole:
  1737 00002F04 4801C1              <1>     add rcx, rax    ;Add to Application count
  1738                              <1> .gotoNext:
  1739 00002F07 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1740 00002F0A 7407                <1>     je .endOfWalk
  1741 00002F0C 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1742 00002F11 EBAF                <1>     jmp short .memLp
  1743                              <1> .endOfWalk:
  1744                              <1>     
  1745 00002F13 488D15E6DEFFFF      <1>     lea rdx, memDOS
  1746 00002F1A B409                <1>     mov ah, 09h
  1747 00002F1C CD21                <1>     int 21h
  1748 00002F1E 4889F0              <1>     mov rax, rsi
  1749 00002F21 E89D000000          <1>     call .mcbPrintAmount
  1750 00002F26 488D156BDFFFFF      <1>     lea rdx, memByte
  1751 00002F2D B409                <1>     mov ah, 09h
  1752 00002F2F CD21                <1>     int 21h
  1753                              <1> 
  1754 00002F31 4885ED              <1>     test rbp, rbp
  1755 00002F34 741E                <1>     jz .skipHole
  1756 00002F36 488D150FDFFFFF      <1>     lea rdx, memHole
  1757 00002F3D B409                <1>     mov ah, 09h
  1758 00002F3F CD21                <1>     int 21h
  1759 00002F41 4889E8              <1>     mov rax, rbp
  1760 00002F44 E87A000000          <1>     call .mcbPrintAmount
  1761 00002F49 488D1548DFFFFF      <1>     lea rdx, memByte
  1762 00002F50 B409                <1>     mov ah, 09h
  1763 00002F52 CD21                <1>     int 21h
  1764                              <1> .skipHole:
  1765                              <1> 
  1766 00002F54 488D15CBDEFFFF      <1>     lea rdx, memApp
  1767 00002F5B B409                <1>     mov ah, 09h
  1768 00002F5D CD21                <1>     int 21h
  1769 00002F5F 4889C8              <1>     mov rax, rcx
  1770 00002F62 E85C000000          <1>     call .mcbPrintAmount
  1771 00002F67 488D152ADFFFFF      <1>     lea rdx, memByte
  1772 00002F6E B409                <1>     mov ah, 09h
  1773 00002F70 CD21                <1>     int 21h
  1774                              <1> 
  1775 00002F72 488D15F9DEFFFF      <1>     lea rdx, memFree
  1776 00002F79 B409                <1>     mov ah, 09h
  1777 00002F7B CD21                <1>     int 21h
  1778 00002F7D 4889F8              <1>     mov rax, rdi
  1779 00002F80 E83E000000          <1>     call .mcbPrintAmount
  1780 00002F85 488D150CDFFFFF      <1>     lea rdx, memByte
  1781 00002F8C B409                <1>     mov ah, 09h
  1782 00002F8E CD21                <1>     int 21h
  1783                              <1> 
  1784 00002F90 488D1543DEFFFF      <1>     lea rdx, memSys
  1785 00002F97 B409                <1>     mov ah, 09h
  1786 00002F99 CD21                <1>     int 21h
  1787 00002F9B 4889F0              <1>     mov rax, rsi
  1788 00002F9E 4801F8              <1>     add rax, rdi
  1789 00002FA1 4801C8              <1>     add rax, rcx
  1790 00002FA4 4801E8              <1>     add rax, rbp
  1791 00002FA7 E817000000          <1>     call .mcbPrintAmount
  1792 00002FAC 488D15E5DEFFFF      <1>     lea rdx, memByte
  1793 00002FB3 B409                <1>     mov ah, 09h
  1794 00002FB5 CD21                <1>     int 21h
  1795                              <1> 
  1796 00002FB7 488D15AAD9FFFF      <1>     lea rdx, crlf
  1797 00002FBE B409                <1>     mov ah, 09h
  1798 00002FC0 CD21                <1>     int 21h
  1799                              <1>     return
    13                              <2> %%_ret:
    14 00002FC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1800                              <1> 
  1801                              <1> .mcbPrintAmount:
  1802 00002FC3 51                  <1>     push rcx
  1803 00002FC4 56                  <1>     push rsi
  1804 00002FC5 57                  <1>     push rdi
  1805 00002FC6 55                  <1>     push rbp
  1806 00002FC7 E8890C0000          <1>     call printDecimalWord
  1807 00002FCC 5D                  <1>     pop rbp
  1808 00002FCD 5F                  <1>     pop rdi
  1809 00002FCE 5E                  <1>     pop rsi
  1810 00002FCF 59                  <1>     pop rcx
  1811                              <1>     return
    13                              <2> %%_ret:
    14 00002FD0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1812                              <1> .badMCBFound:
  1813 00002FD1 488D1507DFFFFF      <1>     lea rdx, memBad2
  1814 00002FD8 B409                <1>     mov ah, 09h
  1815 00002FDA CD21                <1>     int 21h
  1816 00002FDC E9420D0000          <1>     jmp freezePC.altEP
  1817                              <1> 
  1818                              <1> type:
  1819 00002FE1 F605C2D0FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1820 00002FE8 0F84F4E9FFFF        <1>     jz badArgError
  1821 00002FEE F605B8D0FFFFFF      <1>     test byte [arg2Flg], -1
  1822 00002FF5 0F85E7E9FFFF        <1>     jnz badArgError         ;If this set, error
  1823 00002FFB 4C8B050DD0FFFF      <1>     mov r8, [pspPtr]
  1824 00003002 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1825 00003009 0FB6059BD0FFFF      <1>     movzx eax, byte [arg1Off]
  1826 00003010 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1827 00003013 803E0D              <1>     cmp byte [rsi], CR
  1828 00003016 0F84C6E9FFFF        <1>     je badArgError
  1829 0000301C 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1830 00003020 750F                <1>     jne .noDrive
  1831 00003022 0FB60583D0FFFF      <1>     movzx eax, byte [arg1FCBret]
  1832 00003029 3CFF                <1>     cmp al, -1
  1833 0000302B 0F84A8E9FFFF        <1>     je badDriveError
  1834                              <1> .noDrive:
  1835                              <1>     ;Now we open the provided file
  1836 00003031 E8E60B0000          <1>     call buildCommandPath
  1837 00003036 488D15A5D4FFFF      <1>     lea rdx, searchSpec
  1838 0000303D B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1839 00003042 CD21                <1>     int 21h
  1840 00003044 0F82A1E9FFFF        <1>     jc badFileError
  1841 0000304A 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1842 00003051 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1843                              <1> .lp:
  1844 00003054 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1845 00003059 B43F                <1>     mov ah, 3Fh ;Read handle
  1846 0000305B CD21                <1>     int 21h
  1847 0000305D 89C1                <1>     mov ecx, eax
  1848 0000305F 67E317              <1>     jecxz .exit
  1849 00003062 53                  <1>     push rbx    ;Save the original in handle
  1850 00003063 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1851 00003068 B440                <1>     mov ah, 40h
  1852 0000306A CD21                <1>     int 21h
  1853 0000306C 5B                  <1>     pop rbx ;Get back the original read handle
  1854 0000306D 720F                <1>     jc .exitBad
  1855 0000306F 39C8                <1>     cmp eax, ecx
  1856 00003071 74E1                <1>     je .lp
  1857 00003073 FFC9                <1>     dec ecx ;One less for a ^Z
  1858 00003075 39C8                <1>     cmp eax, ecx
  1859 00003077 7505                <1>     jne .exitBad
  1860                              <1> .exit:
  1861 00003079 B43E                <1>     mov ah, 3Eh ;Close handle
  1862 0000307B CD21                <1>     int 21h
  1863                              <1>     return
    13                              <2> %%_ret:
    14 0000307D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1864                              <1> .exitBad:
  1865                              <1>     ;If it is a char device, don't print an error
  1866 0000307E B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  1867 00003083 BB01000000          <1>     mov ebx, 1
  1868 00003088 CD21                <1>     int 21h
  1869 0000308A F6C280              <1>     test dl, devCharDev
  1870                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000308D 75(7D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1871 0000308F E9F3E8FFFF          <1>     jmp badDiskFull
  1872                              <1> 
  1873                              <1> exit:
  1874 00003094 F60590CFFFFFFF      <1>     test byte [permaSwitch], -1
  1875                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000309B 75(7D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1876 0000309D 488B0573CFFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1877 000030A4 483DFFFFFFFF        <1>     cmp rax, -1
  1878                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000030AA 74(7D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1879 000030AC 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1880                              <1> 
  1881 000030B0 488B1575CFFFFF      <1>     mov rdx, qword [parentInt22]
  1882 000030B7 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1883 000030BB B822250000          <1>     mov eax, 2522h
  1884 000030C0 CD21                <1>     int 21h
  1885                              <1> 
  1886 000030C2 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1887 000030C7 CD21                <1>     int 21h
  1888                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 000030C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1889                              <1> 
  1890                              <1> launchChild:
  1891                              <1>     ;We execute an external command here.
  1892                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1893                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1894                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1895                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1896                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1897 000030CA E8640C0000          <1>     call setDTA         
  1898                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1899 000030CF 488D3D63D2FFFF      <1>     lea rdi, cmdPathSpec
  1900 000030D6 4889FE              <1>     mov rsi, rdi
  1901 000030D9 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  1902 000030DE CD2F                <1>     int 2fh
  1903 000030E0 E87A0A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1904 000030E5 4889FE              <1>     mov rsi, rdi    ;Source here
  1905 000030E8 488D3D69D0FFFF      <1>     lea rdi, cmdFcb
  1906 000030EF B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1907 000030F4 CD21                <1>     int 21h
  1908 000030F6 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1909 000030F8 0F8514E9FFFF        <1>     jnz badCmdError
  1910 000030FE 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1911                              <1> .pathLoop:
  1912 00003101 488D3559D0FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1913 00003108 488D3D4ADEFFFF      <1>     lea rdi, extStr
  1914 0000310F BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1915                              <1> .extLp:
  1916 00003114 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1917 00003115 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1918 0000311A F3A6                <1>     rep cmpsb   ;Compare the two strings
  1919 0000311C 5E                  <1>     pop rsi
  1920 0000311D 85C9                <1>     test ecx, ecx
  1921 0000311F 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1922 00003121 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1923 00003124 FFCA                <1>     dec edx         ;Else one less extension type to check
  1924 00003126 75EC                <1>     jnz .extLp
  1925                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1926                              <1>     ;If not, error.
  1927 00003128 B903000000          <1>     mov ecx, 3
  1928 0000312D 4889F7              <1>     mov rdi, rsi
  1929 00003130 B020                <1>     mov al, SPC
  1930 00003132 F3AE                <1>     rep scasb   
  1931 00003134 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1932 00003136 0F85D6E8FFFF        <1>     jnz badCmdError    ;If not, error!
  1933                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1934 0000313C 488D3516DEFFFF      <1>     lea rsi, extStr
  1935 00003143 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1936                              <1> .extSrchLp:
  1937 00003148 488D3D12D0FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1938 0000314F B903000000          <1>     mov ecx, 3
  1939 00003154 F3A4                <1>     rep movsb   ;Copy the extension over!
  1940 00003156 E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1941 0000315B 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1942 0000315D FFCB                <1>     dec ebx                 ;Decrement extension counter
  1943 0000315F 75E7                <1>     jnz .extSrchLp
  1944                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1945                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1946                              <1> ; by setting the fcb extension back to all spaces.
  1947 00003161 488D3DF9CFFFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1948 00003168 B903000000          <1>     mov ecx, 3
  1949 0000316D B020                <1>     mov al, SPC
  1950 0000316F F3AA                <1>     rep stosb   ;Store back the empty extension!
  1951 00003171 EB70                <1>     jmp short .pathHandle
  1952                              <1> .extFnd:
  1953                              <1> ;Here if the file had the right extension.
  1954 00003173 E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1955 00003178 7269                <1>     jc .pathHandle
  1956                              <1> .extSrchFnd:
  1957                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1958                              <1> ; a BAT. If it is, separate handling!
  1959 0000317A 803DE0CFFFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1960 00003181 0F84B3030000        <1>     je batLaunch
  1961 00003187 488D1D05D0FFFF      <1>     lea rbx, launchBlock
  1962 0000318E 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1963 00003192 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1964 00003195 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1965 0000319C 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1966 000031A0 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1967 000031A4 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1968 000031A8 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1969 000031AC 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1970 000031B0 488D1582D1FFFF      <1>     lea rdx, cmdPathSpec
  1971 000031B7 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1972 000031BC CD21                <1>     int 21h
  1973                              <1> ;If the program failed to start, verify why!
  1974 000031BE B800590000          <1>     mov eax, 5900h      ;Get extended error
  1975 000031C3 31DB                <1>     xor ebx, ebx
  1976 000031C5 CD21                <1>     int 21h
  1977 000031C7 6689053FCEFFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  1978 000031CE 3C05                <1>     cmp al, errAccDen   ;Access denied?
  1979 000031D0 0F84E8E7FFFF        <1>     je badAccError
  1980 000031D6 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  1981 000031D8 0F843A0B0000        <1>     je freezePC
  1982 000031DE E92FE8FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  1983                              <1> .pathHandle:        
  1984                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  1985                              <1> ;al has error code!
  1986 000031E3 4885ED              <1>     test rbp, rbp
  1987 000031E6 0F85A3000000        <1>     jnz .pathReentry
  1988                              <1> ;Now check if the command we recieved included an absolute path.
  1989                              <1> ;If so, we don't do path substitution and just fail at this point
  1990 000031EC 488D3546D1FFFF      <1>     lea rsi, cmdPathSpec
  1991 000031F3 66AD                <1>     lodsw   ;Get the first two chars
  1992 000031F5 3A052ECEFFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1993 000031FB 0F8411E8FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1994 00003201 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1995 00003203 7412                <1>     je .pathGetEnv
  1996 00003205 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1997 00003208 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1998 0000320A AC                  <1>     lodsb   ;Get the third char
  1999 0000320B 3A0518CEFFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2000 00003211 0F84FBE7FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2001                              <1> .pathGetEnv:
  2002                              <1> ;Now get a pointer to the environment and search for PATH=
  2003                              <1> ;We only take the final portion of the path and add it to each path componant
  2004                              <1> ;This agrees with DOS 3.3
  2005 00003217 E8840B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2006 0000321C 0F84F0E7FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2007                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2008                              <1>     ;Now we know we dont have to keep track of chars!!
  2009 00003222 488D3D54DDFFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2010 00003229 E8CC0B0000          <1>     call searchForEnvVar
  2011 0000322E 0F82DEE7FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2012 00003234 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2013 00003237 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2014                              <1> .pathRejoin:
  2015 0000323E 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2016 00003241 0F84CBE7FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2017 00003247 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2018 0000324A 488D3D91D2FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2019                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2020                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2021                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2022                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2023 00003251 E86D090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2024 00003256 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2025 00003259 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2026 0000325C 48FFCF              <1>     dec rdi ;Point to the null terminator
  2027 0000325F 8A05C4CDFFFF        <1>     mov al, byte [pathSep]
  2028 00003265 3847FF              <1>     cmp byte [rdi - 1], al
  2029 00003268 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2030 0000326A AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2031                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2032 0000326B 488D35E7CEFFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2033 00003272 E80C090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2034 00003277 488D3564D2FFFF      <1>     lea rsi, searchSpec 
  2035 0000327E 488D3DB4D0FFFF      <1>     lea rdi, cmdPathSpec
  2036 00003285 E8E9070000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2037 0000328A E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2038                              <1> .pathReentry:
  2039 0000328F 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2040 00003293 0F8479E7FFFF        <1>     je badCmdError
  2041                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2042                              <1> ;Not really a big deal...
  2043                              <1>     ;cmp al, errBadDrv
  2044                              <1>     ;jne .pathDrvOk
  2045                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2046                              <1>     ;mov eax, 0900h
  2047                              <1>     ;int 21h
  2048                              <1> ;.pathDrvOk:
  2049 00003299 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2050 0000329C 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2051 0000329F EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2052                              <1> 
  2053                              <1> .prepAndSearch:
  2054                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2055                              <1> ;cmdPathSpec and null terminates. 
  2056                              <1> ;Input: cmdFcb name + ext setup. 
  2057                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2058                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2059 000032A1 51                  <1>     push rcx
  2060 000032A2 56                  <1>     push rsi
  2061 000032A3 57                  <1>     push rdi
  2062 000032A4 488D3D8ED0FFFF      <1>     lea rdi, cmdPathSpec 
  2063 000032AB 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2064 000032AE E8AC080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2065 000032B3 488D359FCEFFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2066 000032BA E8C4080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2067 000032BF B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2068 000032C4 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2069 000032C6 CD21                <1>     int 21h
  2070 000032C8 5F                  <1>     pop rdi
  2071 000032C9 5E                  <1>     pop rsi
  2072 000032CA 59                  <1>     pop rcx
  2073                              <1>     return
    13                              <2> %%_ret:
    14 000032CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2074                              <1> 
  2075                              <1> set:
  2076 000032CC F605D7CDFFFFFF      <1>     test byte [arg1Flg], -1
  2077 000032D3 7539                <1>     jnz .editEnv
  2078                              <1>     ;Here we just print the environment.
  2079 000032D5 E8C60A0000          <1>     call checkEnvGoodAndGet 
  2080 000032DA 0F84D5E6FFFF        <1>     jz badEnvSpaceError
  2081                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2082 000032E0 4889F7              <1>     mov rdi, rsi
  2083 000032E3 4889F2              <1>     mov rdx, rsi
  2084                              <1> .findLp:
  2085 000032E6 B9FFFFFFFF          <1>     mov ecx, -1
  2086 000032EB 31C0                <1>     xor eax, eax
  2087                              <1> .scanLp:
  2088 000032ED F2AE                <1>     repne scasb
  2089 000032EF 75FC                <1>     jne .scanLp
  2090 000032F1 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2091                              <1>     ;Else, we now print this environment variable and CRLF it
  2092                              <1>     ;rdx points to the start of the string aleady
  2093                              <1>     ;ecx has the bytes to print
  2094 000032F3 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2095 000032F8 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2096 000032FD CD21                <1>     int 21h
  2097 000032FF E86D050000          <1>     call printCRLF
  2098 00003304 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2099                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003307 74(CB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2100 00003309 4889FA              <1>     mov rdx, rdi   
  2101 0000330C EBD8                <1>     jmp short .findLp
  2102                              <1> .editEnv:
  2103 0000330E E88D0A0000          <1>     call checkEnvGoodAndGet
  2104 00003313 0F849CE6FFFF        <1>     jz badEnvSpaceError
  2105 00003319 0FB6058BCDFFFF      <1>     movzx eax, byte [arg1Off]
  2106 00003320 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2107 00003327 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2108                              <1> .altEp:
  2109 0000332A 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2110 0000332D B00D                <1>     mov al, CR              ;Search for the CR
  2111 0000332F 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2112 00003337 89CB                <1>     mov ebx, ecx            ;Save this count 
  2113 00003339 53                  <1>     push rbx                ;Save this count on the stack too!
  2114 0000333A F2AE                <1>     repne scasb             ;Now get the length of this env string
  2115 0000333C 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2116 0000333E 66891D1AD5FFFF      <1>     mov word [envVarSz], bx ;Store the count
  2117 00003345 59                  <1>     pop rcx                 ;Get the char count back!
  2118 00003346 89CB                <1>     mov ebx, ecx            
  2119 00003348 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2120 0000334B B03D                <1>     mov al, "="             ;Scan for an equals sign
  2121 0000334D F2AE                <1>     repne scasb
  2122 0000334F 0F8557E6FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2123 00003355 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2124 00003357 66891D03D5FFFF      <1>     mov word [envVarNamSz], bx
  2125 0000335E 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2126 00003361 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2127 00003363 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2128 00003364 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2129 00003367 E88E0A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2130 0000336C 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2131 0000336E E8B50A0000          <1>     call envFree            ;Free the var in rsi
  2132                              <1> .editNewEnv:
  2133 00003373 E8E90A0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2134 00003378 E8090B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2135 0000337D 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2136 0000337E 31C0                <1>     xor eax, eax            ;Prepare null length!
  2137 00003380 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2138 00003386 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2139 00003389 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2140 0000338B FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2141 0000338D 663B0DCBD4FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2142 00003394 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2143                              <1> .reallocTry:
  2144                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2145                              <1>     ; we proceed with the environment size.
  2146 00003396 E8000B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2147 0000339B 7319                <1>     jnc .reallocOk
  2148 0000339D 0F8412E6FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2149                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2150                              <1>     ; partially the variable into the env. If so we do that. If the name
  2151                              <1>     ; cannot fit, we don't bother
  2152                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2153 000033A3 663B0DB7D4FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2154                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000033AA 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000033AC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2155 000033AD E803E6FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2156 000033B2 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2157 000033B4 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2158                              <1> .reallocOk:
  2159                              <1>     ;Here we have all the space to just copy the full path
  2160 000033B6 0FB70DA2D4FFFF      <1>     movzx ecx, word [envVarSz]
  2161                              <1> .nameCp:
  2162                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2163                              <1> ;Always enough memory for name= here
  2164 000033BD AC                  <1>     lodsb
  2165 000033BE E8D3060000          <1>     call ucChar
  2166 000033C3 AA                  <1>     stosb
  2167 000033C4 66FFC9              <1>     dec cx      ;Always decrement this count
  2168 000033C7 3C3D                <1>     cmp al, "="
  2169 000033C9 75F2                <1>     jne .nameCp
  2170                              <1> .exitNameCp:
  2171 000033CB AC                  <1>     lodsb
  2172 000033CC 3C0D                <1>     cmp al, CR
  2173 000033CE 7405                <1>     je .exitCp
  2174 000033D0 AA                  <1>     stosb
  2175 000033D1 FFC9                <1>     dec ecx
  2176 000033D3 75F6                <1>     jnz .exitNameCp
  2177                              <1> .exitCp:
  2178 000033D5 31C0                <1>     xor eax, eax
  2179 000033D7 66AB                <1>     stosw   ;Store the final null word
  2180                              <1>     return
    13                              <2> %%_ret:
    14 000033D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2181                              <1> .delEnvVar:
  2182                              <1>     ;rsi -> Start of the envvar name in user buffer
  2183 000033DA 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2184 000033DD E8180A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2185 000033E2 7205                <1>     jc .delEnvVarSkip
  2186 000033E4 E83F0A0000          <1>     call envFree    ;Free the env var at rsi
  2187                              <1> .delEnvVarSkip:
  2188 000033E9 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2189                              <1>     return
    13                              <2> %%_ret:
    14 000033EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2190                              <1> 
  2191                              <1> pathEdit:
  2192                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2193                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2194                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2195                              <1> ; end there. Error with too many arguments error!
  2196                              <1> ;If after the equals sign there is nothing, we just print the path!
  2197                              <1> ;Gotta process the command line ourselves first
  2198 000033EB E8B0090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2199 000033F0 0F84BFE5FFFF        <1>     jz badEnvSpaceError
  2200                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2201 000033F6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2202 000033FD E8AD000000          <1>     call .skipPathDelimiters
  2203 00003402 3C0D                <1>     cmp al, CR
  2204 00003404 7466                <1>     je .printPath
  2205                              <1> ;Else use the set command to setup the path in the searchSpec.
  2206 00003406 56                  <1>     push rsi    ;Save the first char of the command line string
  2207 00003407 488D356FDBFFFF      <1>     lea rsi, pathEVar
  2208 0000340E 488D3DCDD0FFFF      <1>     lea rdi, searchSpec
  2209 00003415 E859060000          <1>     call strcpy
  2210 0000341A 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2211 0000341D 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2212 0000341E 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2213                              <1> .cpLp:
  2214 00003420 AC                  <1>     lodsb
  2215 00003421 3C0D                <1>     cmp al, CR
  2216 00003423 7411                <1>     je .cpLpExit
  2217 00003425 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2218 0000342A 740A                <1>     je .cpLpExit
  2219 0000342C E865060000          <1>     call ucChar ;Uppercase the char
  2220 00003431 AA                  <1>     stosb       ;Store it
  2221 00003432 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2222 00003434 EBEA                <1>     jmp short .cpLp
  2223                              <1> .cpLpExit:
  2224                              <1>     ;Remove trailing semicolons
  2225 00003436 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2226 0000343A 7507                <1>     jne .cpLpNoIntervene
  2227 0000343C FFC9                <1>     dec ecx     ;Reduce the count by one
  2228 0000343E 48FFCF              <1>     dec rdi     ;Go back a char
  2229 00003441 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2230                              <1> .cpLpNoIntervene:
  2231 00003443 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2232 00003445 AA                  <1>     stosb       ;Store it!
  2233 00003446 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2234 0000344C 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2235 00003453 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2236 00003455 488D3586D0FFFF      <1>     lea rsi, searchSpec
  2237 0000345C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2238 00003463 57                  <1>     push rdi
  2239 00003464 F3A4                <1>     rep movsb
  2240 00003466 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2241 00003467 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2242                              <1> .printPath:
  2243 0000346C 488D3D0ADBFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2244 00003473 E882090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2245 00003478 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2246 0000347A 4889F7              <1>     mov rdi, rsi        
  2247 0000347D E80A060000          <1>     call strlen         ;Get the length of the path in rdi
  2248 00003482 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2249 00003488 7411                <1>     je .noPathPrnt      ;Print no path!
  2250 0000348A FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2251 0000348C 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2252 0000348F BB01000000          <1>     mov ebx, 1          ;STDOUT
  2253 00003494 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2254 00003499 EB0C                <1>     jmp short .pathExit
  2255                              <1> .noPathPrnt:
  2256 0000349B 488D15E8D7FFFF      <1>     lea rdx, noPath
  2257 000034A2 B800090000          <1>     mov eax, 0900h
  2258                              <1> .pathExit:
  2259 000034A7 CD21                <1>     int 21h
  2260 000034A9 E8C3030000          <1>     call printCRLF      ;Print a crlf at the end
  2261                              <1>     return
    13                              <2> %%_ret:
    14 000034AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2262                              <1> .skipPathDelimiters:
  2263                              <1> ;Input: rsi -> Start of string to parse
  2264                              <1> ;Output: rsi -> First non-delimiter char of string
  2265                              <1> ;        al = First non delim char
  2266 000034AF AC                  <1>     lodsb
  2267 000034B0 E806000000          <1>     call .isALPathDelimiter
  2268 000034B5 74F8                <1>     je .skipPathDelimiters
  2269 000034B7 48FFCE              <1>     dec rsi
  2270                              <1>     return
    13                              <2> %%_ret:
    14 000034BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2271                              <1> .isALPathDelimiter:
  2272                              <1> ;Same as before without semicolon
  2273 000034BB 3C20                <1>     cmp al, SPC
  2274                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034BD 74(BA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2275 000034BF 3C09                <1>     cmp al, TAB
  2276                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034C1 74(BA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2277 000034C3 3C2C                <1>     cmp al, ","
  2278                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034C5 74(BA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2279 000034C7 3C3D                <1>     cmp al, "="
  2280                              <1>     return
    13                              <2> %%_ret:
    14 000034C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2281                              <1> 
  2282                              <1> prompt:
  2283 000034CA E8D1080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2284 000034CF 0F84E0E4FFFF        <1>     jz badEnvSpaceError
  2285                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2286 000034D5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2287 000034DC E8C7050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2288 000034E1 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2289 000034E4 742C                <1>     je .reset   ;Reset if so
  2290 000034E6 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2291 000034E7 488D3563DAFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2292 000034EE 488D3DEDCFFFFF      <1>     lea rdi, searchSpec
  2293 000034F5 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2294 000034FA F3A4                <1>     rep movsb
  2295 000034FC 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2296 000034FD 31C9                <1>     xor ecx, ecx    ;Get char count
  2297                              <1> .cp:    ;Now copy the user string over
  2298 000034FF AC                  <1>     lodsb
  2299 00003500 AA                  <1>     stosb 
  2300 00003501 3C0D                <1>     cmp al, CR
  2301 00003503 7404                <1>     je .cpOk
  2302 00003505 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2303 00003507 EBF6                <1>     jmp short .cp
  2304                              <1> .cpOk:
  2305 00003509 488D35D2CFFFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2306 00003510 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2307                              <1> .reset:
  2308                              <1> ;Delete the environment variable!
  2309 00003512 488D3538DAFFFF      <1>     lea rsi, promptEVar 
  2310 00003519 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2311                              <1> .goSet:
  2312 0000351B 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2313 00003521 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2314 00003528 FFC1                <1>     inc ecx     ;Include CR in copy
  2315 0000352A 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2316 00003531 57                  <1>     push rdi
  2317 00003532 F3A4                <1>     rep movsb
  2318 00003534 5E                  <1>     pop rsi
  2319 00003535 E9F0FDFFFF          <1>     jmp set.altEp
  2320                              <1> 
  2321                              <1> batLaunch:
  2322                              <1> ;Preps and launches a batch file!
  2323 0000353A 488D1505000000      <1>     lea rdx, .batMsg
  2324 00003541 E932030000          <1>     jmp printString
  2325 00003546 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  2325 0000354F 70726F636573736F72- <1>
  2325 00003558 206E6F7420696D706C- <1>
  2325 00003561 656D656E7465640D0A- <1>
  2325 0000356A 24                  <1>
  2326                              <1> 
  2327                              <1> echo:
  2328 0000356B F60538CBFFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2329 00003572 752A                <1>     jnz .argGiven
  2330 00003574 488D1500D8FFFF      <1>     lea rdx, echoIs
  2331 0000357B E8F8020000          <1>     call printString
  2332 00003580 488D15DAD7FFFF      <1>     lea rdx, onMes
  2333 00003587 488D0DCDD7FFFF      <1>     lea rcx, offMes
  2334 0000358E F60509CBFFFFFF      <1>     test byte [echoFlg], -1
  2335 00003595 480F44D1            <1>     cmovz rdx, rcx
  2336 00003599 E9DA020000          <1>     jmp printString
  2337                              <1> .argGiven:
  2338 0000359E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2339 000035A5 0FB605FFCAFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2340 000035AC 4801C6              <1>     add rsi, rax
  2341 000035AF AC                  <1>     lodsb   ;Get this char
  2342 000035B0 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2343 000035B3 E8DE040000          <1>     call ucChar
  2344 000035B8 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2345 000035BA 755A                <1>     jne .directEcho
  2346 000035BC 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2347 000035BF E8D2040000          <1>     call ucChar
  2348 000035C4 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2349 000035C6 751B                <1>     jne .checkOff
  2350 000035C8 56                  <1>     push rsi
  2351 000035C9 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2352 000035D0 E8D3040000          <1>     call skipDelimiters
  2353 000035D5 803E0D              <1>     cmp byte [rsi], CR
  2354 000035D8 5E                  <1>     pop rsi
  2355 000035D9 753B                <1>     jne .directEcho ;If its not, just echo the string
  2356 000035DB C605BCCAFFFFFF      <1>     mov byte [echoFlg], -1
  2357                              <1>     return
    13                              <2> %%_ret:
    14 000035E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2358                              <1> .checkOff:
  2359 000035E3 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2360 000035E6 E8AB040000          <1>     call ucChar
  2361 000035EB 3C46                <1>     cmp al, "F" ;Is it an F?
  2362 000035ED 7527                <1>     jne .directEcho ;No, just direct echo
  2363 000035EF 8A4602              <1>     mov al, byte [rsi + 2]
  2364 000035F2 E89F040000          <1>     call ucChar
  2365 000035F7 3C46                <1>     cmp al, "F"
  2366 000035F9 751B                <1>     jne .directEcho
  2367 000035FB 56                  <1>     push rsi
  2368 000035FC 4881C603000000      <1>     add rsi, 3
  2369 00003603 E8A0040000          <1>     call skipDelimiters
  2370 00003608 803E0D              <1>     cmp byte [rsi], CR
  2371 0000360B 5E                  <1>     pop rsi
  2372 0000360C 7508                <1>     jne .directEcho
  2373 0000360E C60589CAFFFF00      <1>     mov byte [echoFlg], 0
  2374                              <1>     return
    13                              <2> %%_ret:
    14 00003615 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2375                              <1> .directEcho: 
  2376 00003616 AC                  <1>     lodsb
  2377 00003617 3C0D                <1>     cmp al, CR
  2378 00003619 0F8452020000        <1>     je printCRLF    ;Prints a crlf and returns
  2379 0000361F 88C2                <1>     mov dl, al
  2380 00003621 E8C2020000          <1>     call outChar
  2381 00003626 EBEE                <1>     jmp short .directEcho
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003628 53                  <1>     push rbx
    11 00003629 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 0000362B 803D02CAFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003632 7240                <1>     jb .usDate
    14 00003634 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003636 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 0000363B E8B0000000          <1>     call .printFirst
    18 00003640 8A15F9C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003646 B402                <1>     mov ah, 02h
    20 00003648 CD21                <1>     int 21h
    21                              <1> 
    22 0000364A 89C8                <1>     mov eax, ecx
    23 0000364C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003651 C1E805              <1>     shr eax, 5
    25 00003654 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003659 8A15E0C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 0000365F B402                <1>     mov ah, 02h
    29 00003661 CD21                <1>     int 21h
    30                              <1> 
    31 00003663 89C8                <1>     mov eax, ecx
    32 00003665 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 0000366A C1E809              <1>     shr eax, 9
    34 0000366D 5B                  <1>     pop rbx ;Get the year signature back
    35 0000366E E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003673 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003674 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003679 C1E805              <1>     shr eax, 5
    41 0000367C E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003681 8A15B8C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003687 B402                <1>     mov ah, 02h
    45 00003689 CD21                <1>     int 21h
    46                              <1> 
    47 0000368B 89C8                <1>     mov eax, ecx
    48 0000368D 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003692 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003697 8A15A2C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 0000369D B402                <1>     mov ah, 02h
    53 0000369F CD21                <1>     int 21h
    54                              <1> 
    55 000036A1 89C8                <1>     mov eax, ecx
    56 000036A3 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 000036A8 C1E809              <1>     shr eax, 9
    58 000036AB 5B                  <1>     pop rbx ;Get the year signature back
    59 000036AC E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 000036B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 000036B2 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000036B7 C1E809              <1>     shr eax, 9
    65 000036BA 5B                  <1>     pop rbx ;Get the year signature back
    66 000036BB E85C000000          <1>     call .printYear
    67                              <1> 
    68 000036C0 8A1579C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 000036C6 B402                <1>     mov ah, 02h
    70 000036C8 CD21                <1>     int 21h
    71                              <1> 
    72 000036CA 89C8                <1>     mov eax, ecx
    73 000036CC 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 000036D1 C1E805              <1>     shr eax, 5
    75 000036D4 E833000000          <1>     call .printSecond
    76                              <1> 
    77 000036D9 8A1560C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 000036DF B402                <1>     mov ah, 02h
    79 000036E1 CD21                <1>     int 21h
    80                              <1> 
    81 000036E3 89C8                <1>     mov eax, ecx
    82 000036E5 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000036EA E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000036EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000036F0 51                  <1>     push rcx
    89 000036F1 E8D0050000          <1>     call getDecimalWord
    90 000036F6 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 000036F8 7504                <1>     jnz .skipSpace
    92 000036FA 88CD                <1>     mov ch, cl
    93 000036FC B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 000036FE 88CA                <1>     mov dl, cl
    96 00003700 B402                <1>     mov ah, 02h
    97 00003702 CD21                <1>     int 21h
    98 00003704 88EA                <1>     mov dl, ch
    99 00003706 B402                <1>     mov ah, 02h
   100 00003708 CD21                <1>     int 21h
   101 0000370A 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 0000370B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 0000370C 51                  <1>     push rcx
   105 0000370D E8B4050000          <1>     call getDecimalWord
   106 00003712 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00003714 75E8                <1>     jnz .skipSpace
   108 00003716 88CD                <1>     mov ch, cl
   109 00003718 B130                <1>     mov cl, "0"
   110 0000371A EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 0000371C 05BC070000          <1>     add eax, 1980
   113 00003721 51                  <1>     push rcx
   114 00003722 53                  <1>     push rbx
   115 00003723 E89E050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00003728 5B                  <1>     pop rbx
   117 00003729 84DB                <1>     test bl, bl
   118 0000372B 740C                <1>     jz .twoDigitYear
   119 0000372D 88CA                <1>     mov dl, cl  ;Print the first digit
   120 0000372F B402                <1>     mov ah, 02h
   121 00003731 CD21                <1>     int 21h
   122 00003733 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003735 B402                <1>     mov ah, 02h
   124 00003737 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00003739 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 0000373C 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 0000373E B402                <1>     mov ah, 02h
   129 00003740 CD21                <1>     int 21h
   130 00003742 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003744 B402                <1>     mov ah, 02h
   132 00003746 CD21                <1>     int 21h
   133 00003748 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00003749 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 0000374A 89C1                <1>     mov ecx, eax
   142 0000374C 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00003751 C1E80B              <1>     shr eax, 11
   144 00003754 803DEAC8FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 0000375B 750B                <1>     jne .ampm
   146 0000375D E85A000000          <1>     call .printHours
   147 00003762 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003767 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003768 3D0C000000          <1>     cmp eax, 12
   151 0000376D 7713                <1>     ja .pm
   152 0000376F 7416                <1>     je .pm2
   153 00003771 E846000000          <1>     call .printHours
   154 00003776 E81D000000          <1>     call .printMinutes
   155 0000377B B261                <1>     mov dl, "a"
   156 0000377D B402                <1>     mov ah, 02h
   157 0000377F CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003781 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003782 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003787 E830000000          <1>     call .printHours
   163 0000378C E807000000          <1>     call .printMinutes
   164 00003791 B270                <1>     mov dl, "p"
   165 00003793 B402                <1>     mov ah, 02h
   166 00003795 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003797 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00003798 8A15A3C8FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 0000379E B402                <1>     mov ah, 02h
   171 000037A0 CD21                <1>     int 21h
   172                              <1> 
   173 000037A2 89C8                <1>     mov eax, ecx
   174 000037A4 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 000037A9 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 000037AC 51                  <1>     push rcx
   178 000037AD E814050000          <1>     call getDecimalWord
   179 000037B2 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 000037B4 7514                <1>     jnz .skipSpace
   181 000037B6 88CD                <1>     mov ch, cl
   182 000037B8 B130                <1>     mov cl, "0"
   183 000037BA EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 000037BC 51                  <1>     push rcx
   186 000037BD E804050000          <1>     call getDecimalWord
   187 000037C2 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 000037C4 7504                <1>     jnz .skipSpace
   189 000037C6 88CD                <1>     mov ch, cl
   190 000037C8 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 000037CA 88CA                <1>     mov dl, cl
   193 000037CC B402                <1>     mov ah, 02h
   194 000037CE CD21                <1>     int 21h
   195 000037D0 88EA                <1>     mov dl, ch
   196 000037D2 B402                <1>     mov ah, 02h
   197 000037D4 CD21                <1>     int 21h
   198 000037D6 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 000037D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 000037D8 F605BFC8FFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037DF 74(D7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000037E1 488D3D69D7FFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000037E8 E80D060000          <1>     call searchForEnvVar
   206 000037ED 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 000037EF E8F9000000          <1>     call putCWDInPrompt
   209 000037F4 E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 000037F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 000037FA 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00003801 AC                  <1>     lodsb   ;Get the char
   216 00003802 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003804 74(F9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00003806 3C24                <1>     cmp al, "$"
   219 00003808 7409                <1>     je .escapeChar
   220 0000380A 88C2                <1>     mov dl, al
   221 0000380C E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 00003811 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 00003813 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 00003814 E87D020000          <1>     call ucChar ;Uppercase this char in al
   226 00003819 488D1D2A000000      <1>     lea rbx, .pTbl
   227 00003820 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00003825 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00003827 740D                <1>     je .escapeFnd
   231 00003829 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00003830 FFC9                <1>     dec ecx
   233 00003832 75F1                <1>     jnz .escapeLp
   234 00003834 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00003836 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 0000383D 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00003841 4801D8              <1>     add rax, rbx                ;Add these
   239 00003844 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00003845 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00003847 5E                  <1>     pop rsi
   242 00003848 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 0000384A 42                  <1>     db "B", 
   247 0000384B 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 0000384D 44                  <1>     db "D", 
   249 0000384E 5D01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 00003850 45                  <1>     db "E", 
   251 00003851 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 00003853 47                  <1>     db "G", 
   253 00003854 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00003856 48                  <1>     db "H", 
   255 00003857 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00003859 4C                  <1>     db "L", 
   257 0000385A 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 0000385C 4E                  <1>     db "N", 
   259 0000385D 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 0000385F 50                  <1>     db "P", 
   261 00003860 A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 00003862 51                  <1>     db "Q", 
   263 00003863 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00003865 54                  <1>     db "T", 
   265 00003866 F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00003868 56                  <1>     db "V", 
   267 00003869 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 0000386B 5F                  <1>     db "_", 
   269 0000386C 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 0000386E 24                  <1>     db "$", 
   271 0000386F 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 00003871 488D15F0D0FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 00003878 B800090000          <1>     mov eax, 0900h  ;Print string
   278 0000387D CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 0000387F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 00003880 488D1554D3FFFF      <1>     lea rdx, dosVer
   283 00003887 B409                <1>     mov ah, 09h ;Print String
   284 00003889 CD21                <1>     int 21h
   285 0000388B B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 0000388D CD21                <1>     int 21h
   287 0000388F 50                  <1>     push rax    ;Save minor version
   288 00003890 E884010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 00003895 E89C010000          <1>     call printPackedBCD ;Print al
   290 0000389A B22E                <1>     mov dl, "."
   291 0000389C B402                <1>     mov ah, 02h
   292 0000389E CD21                <1>     int 21h
   293 000038A0 58                  <1>     pop rax
   294 000038A1 88E0                <1>     mov al, ah  ;Get the minor version low
   295 000038A3 E871010000          <1>     call hexToBCD
   296 000038A8 E889010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 000038AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 000038AE B21B                <1>     mov dl, ESC
   300 000038B0 EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 000038B2 B224                <1>     mov dl, "$"
   304 000038B4 EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 000038B6 B23D                <1>     mov dl, "="
   308 000038B8 EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 000038BA B27C                <1>     mov dl, "|"
   312 000038BC EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 000038BE B23E                <1>     mov dl, ">"
   316 000038C0 EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 000038C2 B23C                <1>     mov dl, "<"
   320 000038C4 EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 000038C6 488D1509D5FFFF      <1>     lea rdx, backSpace
   324 000038CD B903000000          <1>     mov ecx, 3
   325 000038D2 BB01000000          <1>     mov ebx, 1
   326 000038D7 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 000038DC CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 000038DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 000038DF E88A010000          <1>     call getCurrentDrive
   332 000038E4 0441                <1>     add al, "A" ;Convert to letter
   333 000038E6 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 000038E8 B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 000038EA CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 000038EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 000038ED E87C010000          <1>     call getCurrentDrive
   340 000038F2 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 000038F4 FEC2                <1>     inc dl
   342 000038F6 0441                <1>     add al, "A" ;Convert to letter
   343 000038F8 B43A                <1>     mov ah, ":"
   344 000038FA 488D3D59C7FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 00003901 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 00003903 8A0520C7FFFF        <1>     mov al, byte [pathSep]
   347 00003909 AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 0000390A B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 0000390C 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 0000390F CD21                <1>     int 21h
   351 00003911 721F                <1>     jc .badDrive
   352 00003913 E874010000          <1>     call strlen
   353 00003918 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 0000391E B800400000          <1>     mov eax, 4000h ;Write to handle
   356 00003923 BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 00003928 488D152BC7FFFF      <1>     lea rdx, currDirStr
   358 0000392F CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 00003931 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 00003932 488D156AD3FFFF      <1>     lea rdx, badDrvMsg
   363 00003939 E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 0000393E E847000000          <1>     call getTime
   367 00003943 0FB6C5              <1>     movzx eax, ch
   368 00003946 E871FEFFFF          <1>     call printTime.printHours
   369 0000394B 8A15F0C6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   370 00003951 B402                <1>     mov ah, 02h
   371 00003953 CD21                <1>     int 21h
   372 00003955 0FB6054FCDFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   373 0000395C E84BFEFFFF          <1>     call printTime.printMinutesAlt
   374 00003961 8A15DAC6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   375 00003967 B402                <1>     mov ah, 02h
   376 00003969 CD21                <1>     int 21h
   377 0000396B 0FB6053CCDFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   378 00003972 E835FEFFFF          <1>     call printTime.printMinutesAlt
   379 00003977 B22E                <1>     mov dl, "."
   380 00003979 B402                <1>     mov ah, 02h
   381 0000397B CD21                <1>     int 21h
   382 0000397D 0FB60529CDFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   383 00003984 E823FEFFFF          <1>     call printTime.printMinutesAlt
   384                              <1>     return
    13                              <2> %%_ret:
    14 00003989 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> getTime:
   386 0000398A B42C                <1>     mov ah, 2Ch ;DOS get time
   387 0000398C CD21                <1>     int 21h
   388                              <1>     ;CH = hour (0-23)
   389                              <1> 	;CL = minutes (0-59)
   390                              <1> 	;DH = seconds (0-59)
   391                              <1> 	;DL = hundredths (0-99)
   392 0000398E 880D17CDFFFF        <1>     mov byte [td1], cl
   393 00003994 882D12CDFFFF        <1>     mov byte [td2], ch
   394 0000399A 88150DCDFFFF        <1>     mov byte [td3], dl
   395 000039A0 883508CDFFFF        <1>     mov byte [td4], dh
   396                              <1>     return
    13                              <2> %%_ret:
    14 000039A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> printFmtDate:
   399                              <1> ;Outputs the formatted date
   400 000039A7 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   401 000039AC CD21                <1>     int 21h
   402                              <1> 	;AL = day of the week (0=Sunday)
   403                              <1> 	;CX = year (1980-2099)
   404                              <1> 	;DH = month (1-12)
   405                              <1> 	;DL = day (1-31)
   406 000039AE 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   407 000039B3 66890DF1CCFFFF      <1>     mov word [td1], cx
   408 000039BA 8815EDCCFFFF        <1>     mov byte [td3], dl
   409 000039C0 8835E8CCFFFF        <1>     mov byte [td4], dh
   410 000039C6 0FB6C0              <1>     movzx eax, al
   411 000039C9 89C3                <1>     mov ebx, eax
   412 000039CB D1E3                <1>     shl ebx, 1   ;Multiply by 2
   413 000039CD 01D8                <1>     add eax, ebx ;Make it 3 times 
   414 000039CF 488D154FD1FFFF      <1>     lea rdx, dayName
   415 000039D6 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   416 000039DA B903000000          <1>     mov ecx, 3  ;Print three chars
   417 000039DF BB01000000          <1>     mov ebx, 1  ;STDOUT
   418 000039E4 B440                <1>     mov ah, 40h ;Write to handle
   419 000039E6 CD21                <1>     int 21h
   420 000039E8 B220                <1>     mov dl, " "
   421 000039EA E8F9FEFFFF          <1>     call outChar
   422                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   423                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   424                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   425 000039EF 0FB705B5CCFFFF      <1>     movzx eax, word [td1]   ;Get this word
   426 000039F6 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   427 000039F9 0FB61DAECCFFFF      <1>     movzx ebx, byte [td4]
   428 00003A00 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   429 00003A03 09D8                <1>     or eax, ebx ;Add this date to eax
   430 00003A05 0FB61DA1CCFFFF      <1>     movzx ebx, byte [td3]
   431 00003A0C 09D8                <1>     or eax, ebx
   432 00003A0E BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   433 00003A13 E810FCFFFF          <1>     call printDate
   434                              <1>     return
    13                              <2> %%_ret:
    14 00003A18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> 
   437                              <1> hexToBCD:
   438                              <1> ;Converts a Hex byte into two BCD digits
   439                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   440 00003A19 51                  <1>     push rcx
   441 00003A1A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   442 00003A1D 31C9                <1>     xor ecx, ecx
   443                              <1> .htb0:
   444 00003A1F 3D0A000000          <1>     cmp eax, 10
   445 00003A24 7209                <1>     jb .htb1
   446 00003A26 2D0A000000          <1>     sub eax, 10
   447 00003A2B FFC1                <1>     inc ecx
   448 00003A2D EBF0                <1>     jmp short .htb0
   449                              <1> .htb1:
   450 00003A2F C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   451 00003A32 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   452 00003A34 59                  <1>     pop rcx
   453 00003A35 C3                  <1>     ret
   454                              <1> 
   455                              <1> printPackedBCD:
   456                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   457                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   458                              <1> ;Preserves all registers
   459 00003A36 50                  <1>     push rax
   460 00003A37 52                  <1>     push rdx
   461 00003A38 88C4                <1>     mov ah, al
   462 00003A3A 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   463 00003A3C 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   464 00003A3F 7508                <1>     jnz .upperNybble
   465 00003A41 B220                <1>     mov dl, " "
   466 00003A43 B402                <1>     mov ah, 02h
   467 00003A45 CD21                <1>     int 21h
   468 00003A47 EB0E                <1>     jmp short .lowerNybble
   469                              <1> .upperNybble:
   470 00003A49 50                  <1>     push rax
   471 00003A4A C0EC04              <1>     shr ah, 4
   472 00003A4D 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   473 00003A50 88E2                <1>     mov dl, ah
   474 00003A52 B402                <1>     mov ah, 02h ;Print DL
   475 00003A54 CD21                <1>     int 21h
   476 00003A56 58                  <1>     pop rax
   477                              <1> .lowerNybble:
   478 00003A57 0430                <1>     add al, "0"
   479 00003A59 88C2                <1>     mov dl, al
   480 00003A5B B402                <1>     mov ah, 02h ;Print DL
   481 00003A5D CD21                <1>     int 21h
   482 00003A5F 5A                  <1>     pop rdx
   483 00003A60 58                  <1>     pop rax
   484                              <1>     return
    13                              <2> %%_ret:
    14 00003A61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> setDrive:
   487                              <1> ;Input: dl = 0 based Drive number to set to
   488                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   489                              <1> ;AX trashed.
   490 00003A62 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   491 00003A64 CD21                <1>     int 21h 
   492 00003A66 E803000000          <1>     call getCurrentDrive
   493 00003A6B 38D0                <1>     cmp al, dl  ;Is this the same drive?
   494                              <1>     return
    13                              <2> %%_ret:
    14 00003A6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> getCurrentDrive:
   496                              <1> ;Returns the 0 based current drive in al
   497 00003A6E B419                <1>     mov ah, 19h
   498 00003A70 CD21                <1>     int 21h
   499                              <1>     return
    13                              <2> %%_ret:
    14 00003A72 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strcpy:
   502                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   503                              <1> ;rsi -> Source
   504                              <1> ;rdi -> Destination
   505 00003A73 51                  <1>     push rcx
   506 00003A74 57                  <1>     push rdi
   507 00003A75 4889F7              <1>     mov rdi, rsi
   508 00003A78 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   509 00003A7D 5F                  <1>     pop rdi
   510 00003A7E F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   511 00003A80 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 00003A81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> strcpy2:
   515                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   516                              <1> ;rsi -> Source
   517                              <1> ;rdi -> Destination
   518 00003A82 56                  <1>     push rsi
   519 00003A83 57                  <1>     push rdi
   520 00003A84 E8EAFFFFFF          <1>     call strcpy 
   521 00003A89 5F                  <1>     pop rdi
   522 00003A8A 5E                  <1>     pop rsi
   523                              <1>     return
    13                              <2> %%_ret:
    14 00003A8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strlen:
   526                              <1> ;Gets the length of a ASCIIZ string
   527                              <1> ;Input: rdi = Source buffer
   528                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   529 00003A8C 50                  <1>     push rax
   530 00003A8D B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   531 00003A92 CD2F                <1>     int 2fh
   532 00003A94 58                  <1>     pop rax
   533                              <1>     return
    13                              <2> %%_ret:
    14 00003A95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> 
   535                              <1> ucChar:
   536                              <1> ;Input: al = Char to uppercase
   537                              <1> ;Output: al = Adjusted char 
   538 00003A96 53                  <1>     push rbx
   539 00003A97 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   540 00003A9A 50                  <1>     push rax    ;Push the char twice on the stack
   541 00003A9B 50                  <1>     push rax
   542 00003A9C B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   543 00003AA1 CD2F                <1>     int 2fh         ;Returns the processed char in al
   544 00003AA3 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   545 00003AA6 5B                  <1>     pop rbx
   546                              <1>     return
    13                              <2> %%_ret:
    14 00003AA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> skipDelimiters:
   549                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   550                              <1> ; command delimiters but a subset thereof. 
   551                              <1> ;These are the same across all codepages.
   552                              <1> ;Input: rsi must point to the start of the data string
   553                              <1> ;Output: rsi points to the first non-delimiter char
   554 00003AA8 50                  <1>     push rax
   555                              <1> .l1:
   556 00003AA9 AC                  <1>     lodsb
   557 00003AAA E807000000          <1>     call isALdelimiter
   558 00003AAF 74F8                <1>     jz .l1
   559                              <1> .exit:
   560 00003AB1 58                  <1>     pop rax
   561 00003AB2 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   562                              <1>     return
    13                              <2> %%_ret:
    14 00003AB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> isALdelimiter:
   565                              <1> ;Returns: ZF=NZ if al is not a command separator 
   566                              <1> ;         ZF=ZE if al is a command separator
   567 00003AB6 3C20                <1>     cmp al, " "
   568                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003AB8 74(B5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   569 00003ABA 3C3B                <1>     cmp al, ";"
   570                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003ABC 74(B5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   571 00003ABE 3C3D                <1>     cmp al, "="
   572                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003AC0 74(B5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   573 00003AC2 3C2C                <1>     cmp al, ","
   574                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003AC4 74(B5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   575 00003AC6 3C09                <1>     cmp al, TAB
   576                              <1>     return
    13                              <2> %%_ret:
    14 00003AC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> 
   578                              <1> clearCommandState:
   579                              <1> ;Clears the command state
   580 00003AC9 488D3DDAC5FFFF      <1>     lea rdi, cmdStatePtr
   581 00003AD0 B907000000          <1>     mov ecx, cmdStateL
   582 00003AD5 31C0                <1>     xor eax, eax
   583 00003AD7 F3AA                <1>     rep stosb
   584                              <1>     return
    13                              <2> %%_ret:
    14 00003AD9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> clearCommandLineState:
   587                              <1> ;Clears the command line state after a 0Dh encountered
   588 00003ADA 488D3DBEC5FFFF      <1>     lea rdi, cmdLineStatePtr
   589 00003AE1 B912000000          <1>     mov ecx, cmdLineStateL
   590 00003AE6 31C0                <1>     xor eax, eax
   591 00003AE8 F3AA                <1>     rep stosb
   592 00003AEA C705ACC5FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   592 00003AF3 FF                  <1>
   593 00003AF4 C705A8C5FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   593 00003AFD FF                  <1>
   594                              <1> ;Close all handles from 5->MAX
   595 00003AFE 0FB70D22C5FFFF      <1>     movzx ecx, word [numHdls]
   596 00003B05 BB05000000          <1>     mov ebx, 5
   597                              <1> .lp:
   598 00003B0A B43E                <1>     mov ah, 3Eh ;File close
   599 00003B0C CD21                <1>     int 21h
   600 00003B0E FFC3                <1>     inc ebx ;Goto next file
   601 00003B10 39CB                <1>     cmp ebx, ecx
   602 00003B12 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   603                              <1>     return
    13                              <2> %%_ret:
    14 00003B14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   604                              <1> 
   605                              <1> asciiFilenameToFCB:
   606                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   607                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   608                              <1> ;Also doesn't check if chars are valid
   609                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   610                              <1> ;Name is space padded.
   611                              <1> ;Input: rsi = ASCII string buffer
   612                              <1> ;       rdi = FCB name buffer
   613                              <1> ;Output: al = Char that terminated the source string 
   614 00003B15 53                  <1>     push rbx    
   615 00003B16 57                  <1>     push rdi
   616 00003B17 B90B000000          <1>     mov ecx, 11
   617 00003B1C B020                <1>     mov al, " "
   618 00003B1E F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   619 00003B20 5F                  <1>     pop rdi
   620 00003B21 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   621                              <1>     ;Preprocess for Dir Searches
   622 00003B24 803E2E              <1>     cmp byte [rsi], "."
   623 00003B27 7509                <1>     jne .processName
   624 00003B29 A4                  <1>     movsb   ;Store the first dot
   625 00003B2A 803E2E              <1>     cmp byte [rsi], "."
   626 00003B2D 752C                <1>     jne .exitBadChar
   627 00003B2F A4                  <1>     movsb
   628 00003B30 EB29                <1>     jmp short .exitBadChar
   629                              <1> .processName:
   630 00003B32 AC                  <1>     lodsb   ;Get the char in al
   631 00003B33 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   632 00003B35 7426                <1>     jz .exit
   633 00003B37 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   634 00003B39 7407                <1>     je .extSpace
   635 00003B3B 3C2E                <1>     cmp al, "."
   636 00003B3D 740C                <1>     je .ext
   637 00003B3F AA                  <1>     stosb   ;Store the char
   638 00003B40 EBF0                <1>     jmp short .processName
   639                              <1> .extSpace:
   640                              <1> ;Now we scan for a period in the name
   641 00003B42 AC                  <1>     lodsb   ;Get a char and increase rsi
   642 00003B43 84C0                <1>     test al, al
   643 00003B45 7416                <1>     jz .exit
   644 00003B47 3C2E                <1>     cmp al, "."     ;If al is not a period...
   645 00003B49 75F7                <1>     jne .extSpace   ; keep searching
   646                              <1> .ext:
   647 00003B4B 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   648                              <1> .processExt:
   649 00003B4F AC                  <1>     lodsb
   650 00003B50 84C0                <1>     test al, al
   651 00003B52 7409                <1>     jz .exit
   652 00003B54 3C20                <1>     cmp al, " "
   653 00003B56 7405                <1>     je .exit
   654 00003B58 AA                  <1>     stosb
   655 00003B59 EBF4                <1>     jmp short .processExt
   656                              <1> .exitBadChar:
   657 00003B5B 30C0                <1>     xor al, al  ;Return a null terminator
   658                              <1> .exit:
   659 00003B5D 5B                  <1>     pop rbx
   660                              <1>     return
    13                              <2> %%_ret:
    14 00003B5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   661                              <1> 
   662                              <1> findLastPathComponant:
   663                              <1> ;Finds the last path componant of an ASCIIZ path string
   664                              <1> ;Input: rdi -> Head of the path to find last componant on
   665                              <1> ;Output: rdi -> Start of the last componant
   666 00003B5F 50                  <1>     push rax
   667 00003B60 51                  <1>     push rcx
   668 00003B61 31C9                <1>     xor ecx, ecx
   669 00003B63 FFC9                <1>     dec ecx
   670 00003B65 31C0                <1>     xor eax, eax
   671 00003B67 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   672 00003B69 F7D1                <1>     not ecx     ;This gets the count of chars  
   673 00003B6B 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   674 00003B6E 8A05B5C4FFFF        <1>     mov al, byte [pathSep]
   675 00003B74 FD                  <1>     std
   676 00003B75 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   677 00003B77 FC                  <1>     cld
   678 00003B78 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   679 00003B7A 48FFC7              <1>     inc rdi     ;Point at pathsep
   680                              <1> .exit:
   681 00003B7D 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   682 00003B80 59                  <1>     pop rcx
   683 00003B81 58                  <1>     pop rax
   684                              <1>     return
    13                              <2> %%_ret:
    14 00003B82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   685                              <1> 
   686                              <1> FCBToAsciiz:
   687                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   688                              <1> ;Name is space padded too
   689                              <1> ;Input: rsi = FCB name buffer
   690                              <1> ;       rdi = ASCIIZ string buffer
   691 00003B83 B908000000          <1>     mov ecx, 8
   692 00003B88 F3A4                <1>     rep movsb   ;Move the name over
   693                              <1> .scanNameSpace:
   694 00003B8A 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   695 00003B8E 750D                <1>     jne .ext
   696 00003B90 48FFCF              <1>     dec rdi
   697 00003B93 FFC1                <1>     inc ecx
   698 00003B95 81F908000000        <1>     cmp ecx, 8
   699 00003B9B 72ED                <1>     jb .scanNameSpace
   700                              <1> .ext:
   701 00003B9D 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   702 00003BA2 7506                <1>     jne .validExt
   703 00003BA4 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   704 00003BA8 7415                <1>     je .exit
   705                              <1> .validExt:
   706 00003BAA B02E                <1>     mov al, "." ;We have a valid extension, store a period
   707 00003BAC AA                  <1>     stosb
   708 00003BAD B903000000          <1>     mov ecx, 3
   709 00003BB2 F3A4                <1>     rep movsb   ;Move the three extension chars over
   710                              <1> .scanExtSpace:
   711 00003BB4 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   712 00003BB8 7505                <1>     jne .exit
   713 00003BBA 48FFCF              <1>     dec rdi
   714 00003BBD EBF5                <1>     jmp short .scanExtSpace
   715                              <1> .exit:
   716 00003BBF 31C0                <1>     xor eax, eax
   717 00003BC1 AA                  <1>     stosb   ;Store a null at the end
   718                              <1>     return
    13                              <2> %%_ret:
    14 00003BC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   719                              <1> 
   720                              <1> cpDelimOrCtrlStringToBufz:
   721                              <1> ;Copy a delimited or control char terminated string to a buffer
   722                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   723                              <1> ;       rdi -> Buffer to store null terminated string in
   724                              <1> ;Output: rsi -> First char past string end
   725                              <1> ;       rdi -> One char past null terminator on string buffer
   726 00003BC3 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   727                              <1> .lp:
   728 00003BC6 AC                  <1>     lodsb
   729 00003BC7 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   730 00003BC9 760A                <1>     jbe .exit
   731 00003BCB E8E6FEFFFF          <1>     call isALdelimiter
   732 00003BD0 7403                <1>     je .exit
   733 00003BD2 AA                  <1>     stosb
   734 00003BD3 EBF1                <1>     jmp short .lp
   735                              <1> .exit:
   736 00003BD5 31C0                <1>     xor eax, eax
   737 00003BD7 AA                  <1>     stosb   ;Store a null terminator
   738                              <1>     return
    13                              <2> %%_ret:
    14 00003BD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   739                              <1> 
   740                              <1> 
   741                              <1> cpDelimPathToBufz:
   742                              <1> ;Copy a delimited path into buffer and null terminate.
   743                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   744                              <1> ;       rdi -> Buffer to store null terminated path in
   745                              <1> ;Output: rsi -> First char past pathname delimiter
   746                              <1> ;       rdi -> One char past null terminator on pathname buffer
   747 00003BD9 53                  <1>     push rbx
   748 00003BDA 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   749 00003BDD C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   750                              <1> .lp:
   751 00003BE0 AC                  <1>     lodsb   ;Get the char
   752 00003BE1 3C0D                <1>     cmp al, CR
   753 00003BE3 7412                <1>     je .gotRedirPath
   754 00003BE5 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   755 00003BEA 740B                <1>     jz .gotRedirPath 
   756 00003BEC 3A0538C4FFFF        <1>     cmp al, byte [switchChar]
   757 00003BF2 7403                <1>     je .gotRedirPath
   758 00003BF4 AA                  <1>     stosb   ;Store this char and loop next char
   759 00003BF5 EBE9                <1>     jmp short .lp
   760                              <1> .gotRedirPath:
   761 00003BF7 50                  <1>     push rax    ;Save the char on stack
   762 00003BF8 30C0                <1>     xor al, al  ;Get null terminator char
   763 00003BFA 4829FB              <1>     sub rbx, rdi
   764 00003BFD 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   765 00003C04 7412                <1>     je .notColon
   766 00003C06 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   767 00003C0D 7409                <1>     je .notColon
   768 00003C0F 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   769 00003C13 7503                <1>     jne .notColon
   770 00003C15 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   771                              <1> .notColon:
   772 00003C18 AA                  <1>     stosb   ;Store the null terminator for the redir path
   773 00003C19 58                  <1>     pop rax ;Get back the char in al
   774 00003C1A 5B                  <1>     pop rbx
   775                              <1>     return
    13                              <2> %%_ret:
    14 00003C1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> 
   777                              <1> buildCommandPath:
   778                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   779 00003C1C 0FB60588C4FFFF      <1>     movzx eax, byte [arg1Off]
   780 00003C23 4C8B05E5C3FFFF      <1>     mov r8, [pspPtr]
   781 00003C2A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   782 00003C31 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   783                              <1> copyArgumentToSearchSpec:
   784                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   785                              <1> ; and null terminates
   786 00003C34 488D3DA7C8FFFF      <1>     lea rdi, searchSpec
   787 00003C3B E899FFFFFF          <1>     call cpDelimPathToBufz
   788                              <1>     return
    13                              <2> %%_ret:
    14 00003C40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> scanForWildcards:
   791                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   792                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   793 00003C41 50                  <1>     push rax
   794 00003C42 56                  <1>     push rsi
   795                              <1> .lp:
   796 00003C43 AC                  <1>     lodsb
   797 00003C44 3C3F                <1>     cmp al, "?"
   798 00003C46 740A                <1>     je .exit
   799 00003C48 3C2A                <1>     cmp al, "*"
   800 00003C4A 7406                <1>     je .exit
   801 00003C4C 84C0                <1>     test al, al
   802 00003C4E 75F3                <1>     jnz .lp
   803 00003C50 FEC0                <1>     inc al  ;This will clear the ZF
   804                              <1> .exit:
   805 00003C52 5E                  <1>     pop rsi
   806 00003C53 58                  <1>     pop rax
   807                              <1>     return
    13                              <2> %%_ret:
    14 00003C54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   808                              <1> 
   809                              <1> printDecimalWord:
   810                              <1> ;Takes qword in rax and print it's decimal representation
   811                              <1> ;Takes the qword in eax and prints its decimal representation
   812 00003C55 31C9                <1>     xor ecx, ecx
   813 00003C57 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   814 00003C59 85C0                <1>     test eax, eax
   815 00003C5B 750C                <1>     jnz .notZero
   816 00003C5D B930000000          <1>     mov ecx, "0"
   817 00003C62 BD01000000          <1>     mov ebp, 1  ;Print one digit
   818 00003C67 EB3E                <1>     jmp short .dpfb2
   819                              <1> .notZero:
   820 00003C69 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   821 00003C6B BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   822                              <1> .dpfb0:
   823 00003C70 FFC5                <1>     inc ebp
   824 00003C72 81FD08000000        <1>     cmp ebp, 8
   825 00003C78 7206                <1>     jb .dpfb00
   826 00003C7A 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   827 00003C7E EB04                <1>     jmp short .dpfb01
   828                              <1> .dpfb00:
   829 00003C80 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   830                              <1> .dpfb01:
   831 00003C84 31D2                <1>     xor edx, edx
   832 00003C86 48F7F6              <1>     div rsi
   833 00003C89 80C230              <1>     add dl, '0'
   834 00003C8C 80FA39              <1>     cmp dl, '9'
   835 00003C8F 7603                <1>     jbe .dpfb1
   836 00003C91 80C207              <1>     add dl, 'A'-'0'-10
   837                              <1> .dpfb1:
   838 00003C94 81FD08000000        <1>     cmp ebp, 8
   839 00003C9A 7204                <1>     jb .dpfb10
   840 00003C9C 88D3                <1>     mov bl, dl ;Add the bottom bits
   841 00003C9E EB02                <1>     jmp short .dpfb11
   842                              <1> .dpfb10:
   843 00003CA0 88D1                <1>     mov cl, dl    ;Save remainder byte
   844                              <1> .dpfb11:
   845 00003CA2 4885C0              <1>     test rax, rax
   846 00003CA5 75C9                <1>     jnz .dpfb0
   847                              <1> .dpfb2:
   848 00003CA7 81FD08000000        <1>     cmp ebp, 8
   849 00003CAD 7208                <1>     jb .dpfb20
   850 00003CAF 88DA                <1>     mov dl, bl
   851 00003CB1 48C1EB08            <1>     shr rbx, 8
   852 00003CB5 EB06                <1>     jmp short .dpfb21
   853                              <1> .dpfb20:
   854 00003CB7 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   855 00003CB9 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   856                              <1> .dpfb21:
   857 00003CBD B402                <1>     mov ah, 02h
   858 00003CBF CD21                <1>     int 21h
   859 00003CC1 FFCD                <1>     dec ebp
   860 00003CC3 75E2                <1>     jnz .dpfb2
   861                              <1>     return
    13                              <2> %%_ret:
    14 00003CC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   862                              <1> 
   863                              <1> getDecimalWord:
   864                              <1> ;Works on MAX A dword in eax
   865                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   866 00003CC6 31C9                <1>     xor ecx, ecx
   867 00003CC8 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   868 00003CCA BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   869                              <1> .dpfb0:
   870 00003CCF FFC5                <1>     inc ebp
   871 00003CD1 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   872 00003CD5 31D2                <1>     xor edx, edx
   873 00003CD7 48F7F3              <1>     div rbx
   874 00003CDA 80C230              <1>     add dl, '0'
   875 00003CDD 80FA39              <1>     cmp dl, '9'
   876 00003CE0 7603                <1>     jbe .dpfb1
   877 00003CE2 80C207              <1>     add dl, 'A'-'0'-10
   878                              <1> .dpfb1:
   879 00003CE5 88D1                <1>     mov cl, dl    ;Save remainder byte
   880 00003CE7 4885C0              <1>     test rax, rax
   881 00003CEA 75E3                <1>     jnz .dpfb0
   882                              <1>     return
    13                              <2> %%_ret:
    14 00003CEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   883                              <1> getByte:
   884                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   885 00003CED E807000000          <1>     call getNum
   886 00003CF2 3D00010000          <1>     cmp eax, 100h
   887 00003CF7 F5                  <1>     cmc
   888                              <1>     return
    13                              <2> %%_ret:
    14 00003CF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   889                              <1> getNum:
   890                              <1> ;Gets a number from a command line.
   891                              <1> ;Input: rsi -> String to get number from
   892                              <1> ;Output: rsi -> Char which terminated the accumulation
   893                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   894 00003CF9 51                  <1>     push rcx
   895 00003CFA 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   896                              <1> .lp:
   897 00003CFC AC                  <1>     lodsb
   898 00003CFD 3C30                <1>     cmp al, "0"
   899 00003CFF 7210                <1>     jb .exit
   900 00003D01 3C39                <1>     cmp al, "9"
   901 00003D03 770C                <1>     ja .exit
   902 00003D05 2C30                <1>     sub al, "0"                     ;Convert to binary 
   903 00003D07 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   904 00003D0B D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   905 00003D0D 01C1                <1>     add ecx, eax
   906 00003D0F EBEB                <1>     jmp short .lp   ;Get next digit
   907                              <1> .exit:
   908 00003D11 89C8                <1>     mov eax, ecx
   909 00003D13 59                  <1>     pop rcx
   910 00003D14 48FFCE              <1>     dec rsi
   911                              <1>     return
    13                              <2> %%_ret:
    14 00003D17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   912                              <1> 
   913                              <1> 
   914                              <1> freezePC:
   915 00003D18 488D15A6D1FFFF      <1>     lea rdx, memBad1
   916 00003D1F B409                <1>     mov ah, 09h
   917 00003D21 CD21                <1>     int 21h
   918                              <1> .altEP:
   919 00003D23 488D15C4D1FFFF      <1>     lea rdx, memBad3
   920 00003D2A B409                <1>     mov ah, 09h
   921 00003D2C CD21                <1>     int 21h
   922                              <1> .lp:
   923 00003D2E F390                <1>     pause
   924 00003D30 F4                  <1>     hlt
   925 00003D31 EBFB                <1>     jmp short .lp
   926                              <1> 
   927                              <1> setDTA:
   928 00003D33 50                  <1>     push rax
   929 00003D34 52                  <1>     push rdx
   930 00003D35 488D152CC4FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   931 00003D3C B8001A0000          <1>     mov eax, 1A00h
   932 00003D41 CD21                <1>     int 21h
   933 00003D43 5A                  <1>     pop rdx
   934 00003D44 58                  <1>     pop rax
   935                              <1>     return
    13                              <2> %%_ret:
    14 00003D45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   936                              <1> 
   937                              <1> getDTA:
   938 00003D46 488D151BC4FFFF      <1>     lea rdx, cmdFFBlock
   939                              <1>     return
    13                              <2> %%_ret:
    14 00003D4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   940                              <1> 
   941                              <1> resetIDTentries:
   942                              <1> ;Resets the IDT entries
   943 00003D4E 488D1591010000      <1>     lea rdx, critErrorHandler
   944 00003D55 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
   945 00003D59 B824250000          <1>     mov eax, 2524h
   946 00003D5E CD21                <1>     int 21h
   947 00003D60 488D151A040000      <1>     lea rdx, int23h
   948 00003D67 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
   949 00003D6B B823250000          <1>     mov eax, 2523h
   950 00003D70 CD21                <1>     int 21h
   951 00003D72 488D1557D6FFFF      <1>     lea rdx, appRet
   952 00003D79 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
   953 00003D7D B822250000          <1>     mov eax, 2522h
   954 00003D82 CD21                <1>     int 21h
   955                              <1>     return
    13                              <2> %%_ret:
    14 00003D84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   956                              <1> 
   957                              <1> ;-------------------------------
   958                              <1> ; Environment utility functions
   959                              <1> ;-------------------------------
   960                              <1> 
   961                              <1> cmpEnvVar:
   962                              <1> ;Checks that we have found the environment variable we are looking for.
   963                              <1> ;Input: rsi -> Environment var to verify the name of
   964                              <1> ;       rdi -> Environment var name to compare against
   965                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   966 00003D85 56                  <1>     push rsi
   967 00003D86 57                  <1>     push rdi
   968 00003D87 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   969                              <1> .lp:
   970 00003D8A AC                  <1>     lodsb               ;Pick up from user string
   971 00003D8B E806FDFFFF          <1>     call ucChar         ;Upper case it!
   972 00003D90 3807                <1>     cmp byte [rdi], al  
   973 00003D92 7509                <1>     jne .exit
   974 00003D94 3C3D                <1>     cmp al, "="         ;Are we at the end?
   975 00003D96 7405                <1>     je .exit
   976 00003D98 48FFC7              <1>     inc rdi
   977 00003D9B EBED                <1>     jmp short .lp
   978                              <1> .exit:
   979 00003D9D 5F                  <1>     pop rdi
   980 00003D9E 5E                  <1>     pop rsi
   981                              <1>     return
    13                              <2> %%_ret:
    14 00003D9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> 
   983                              <1> checkEnvGoodAndGet:
   984                              <1> ;Gets the env ptr and checks that it is double null terminated.
   985                              <1> ;Output:
   986                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   987                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   988                              <1> ;           rsi -> Environment pointer
   989 00003DA0 50                  <1>     push rax
   990 00003DA1 51                  <1>     push rcx
   991 00003DA2 57                  <1>     push rdi
   992 00003DA3 4150                <1>     push r8
   993 00003DA5 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   994 00003DA9 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   995 00003DAC 741A                <1>     jz .badExit
   996 00003DAE 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   997 00003DB1 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   998                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   999 00003DB4 31C0                <1>     xor eax, eax
  1000                              <1> .pathNulScan:
  1001 00003DB6 F2AE                <1>     repne scasb
  1002 00003DB8 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1003 00003DBA 740C                <1>     jz .badExit
  1004 00003DBC 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1005 00003DBE 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1006 00003DC0 31C0                <1>     xor eax, eax
  1007 00003DC2 FFC0                <1>     inc eax ;Clear the ZF
  1008 00003DC4 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1009                              <1> .badExit:
  1010 00003DC8 4158                <1>     pop r8
  1011 00003DCA 5F                  <1>     pop rdi
  1012 00003DCB 59                  <1>     pop rcx
  1013 00003DCC 58                  <1>     pop rax
  1014                              <1>     return
    13                              <2> %%_ret:
    14 00003DCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> 
  1017                              <1> findEnvSpace:
  1018                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1019                              <1> ; free space in the pointer and a count of free space in the environment.
  1020                              <1> ;If count is zero, pointer is not to be used.
  1021                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1022 00003DCE 31C9                <1>     xor ecx, ecx
  1023 00003DD0 31C0                <1>     xor eax, eax    ;Clear eax too
  1024 00003DD2 51                  <1>     push rcx
  1025 00003DD3 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1026 00003DD8 59                  <1>     pop rcx
  1027                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003DD9 74(CD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1028 00003DDB 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1029 00003DDF FFC9                <1>     dec ecx ;Make into a large counter
  1030 00003DE1 4889F7              <1>     mov rdi, rsi    
  1031                              <1> .endsearch:
  1032 00003DE4 F2AE                <1>     repne scasb ;Scan
  1033 00003DE6 803F00              <1>     cmp byte [rdi], 0
  1034 00003DE9 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1035                              <1>     ;Here we are at the end of the environment
  1036 00003DEB F7D9                <1>     neg ecx
  1037 00003DED FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1038 00003DEF 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1039 00003DF2 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1040 00003DF5 29C8                <1>     sub eax, ecx
  1041 00003DF7 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1042                              <1>     return
    13                              <2> %%_ret:
    14 00003DF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1043                              <1> 
  1044                              <1> searchForEnvVar:
  1045                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1046                              <1> ;Input: rdi -> Var name to look for.
  1047                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1048 00003DFA 57                  <1>     push rdi
  1049 00003DFB 51                  <1>     push rcx
  1050 00003DFC 52                  <1>     push rdx
  1051 00003DFD 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1052 00003E01 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1053                              <1> .varLp:
  1054 00003E04 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1055 00003E07 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1056 00003E0C 7416                <1>     je .varFound
  1057 00003E0E 31C0                <1>     xor eax, eax        ;Search for a null
  1058 00003E10 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1059 00003E13 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1060 00003E18 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1061 00003E1A 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1062 00003E1C 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1063 00003E1E 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1064 00003E21 EBE1                <1>     jmp short .varLp    ;And scan again!
  1065                              <1> .varNotFound:
  1066 00003E23 F9                  <1>     stc
  1067                              <1> .varFound:
  1068 00003E24 59                  <1>     pop rcx
  1069 00003E25 5A                  <1>     pop rdx
  1070 00003E26 5F                  <1>     pop rdi
  1071                              <1>     return
    13                              <2> %%_ret:
    14 00003E27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1072                              <1> 
  1073                              <1> envFree:
  1074                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1075                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1076                              <1> ; free byte of the environment!
  1077                              <1> ;Input: rsi -> Variable to free.
  1078                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1079                              <1> ;        ecx = Number of free bytes in env
  1080 00003E28 4889F7              <1>     mov rdi, rsi
  1081 00003E2B 31C0                <1>     xor eax, eax
  1082                              <1> .freeLp:
  1083 00003E2D 803F00              <1>     cmp byte [rdi], 0
  1084 00003E30 7403                <1>     je .exitLp
  1085 00003E32 AA                  <1>     stosb
  1086 00003E33 EBF8                <1>     jmp short .freeLp
  1087                              <1> .exitLp:
  1088                              <1> ;rdi points to the terminating null of the var we just deleted
  1089                              <1> ;rsi points to the start of the free space
  1090 00003E35 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1091 00003E38 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1092 00003E3D 7504                <1>     jne .prepPullup
  1093 00003E3F 31C0                <1>     xor eax, eax
  1094 00003E41 EB0E                <1>     jmp short .cleanEnv
  1095                              <1> .prepPullup:
  1096 00003E43 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1097                              <1> .pullUp:
  1098 00003E46 AC                  <1>     lodsb
  1099 00003E47 AA                  <1>     stosb
  1100 00003E48 84C0                <1>     test al, al ;Did we pick up a zero
  1101 00003E4A 75FA                <1>     jne .pullUp ;If not, keep copying
  1102 00003E4C 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1103 00003E4F 75F5                <1>     jne .pullUp
  1104                              <1> ;We are at the end of the copy!
  1105                              <1> .cleanEnv:
  1106 00003E51 AA                  <1>     stosb   ;Store the famous second null
  1107 00003E52 48FFCF              <1>     dec rdi ;without incrementing it!!
  1108 00003E55 E807000000          <1>     call getFreeSpace
  1109 00003E5A 31C0                <1>     xor eax, eax
  1110 00003E5C 51                  <1>     push rcx
  1111 00003E5D F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1112 00003E5F 59                  <1>     pop rcx
  1113                              <1>     return
    13                              <2> %%_ret:
    14 00003E60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1114                              <1> 
  1115                              <1> getFreeSpace:
  1116                              <1> ;Output: ecx = Number of free bytes in the environment block
  1117 00003E61 56                  <1>     push rsi
  1118 00003E62 57                  <1>     push rdi
  1119 00003E63 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1120 00003E68 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1121 00003E6C 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1122 00003E6F E805000000          <1>     call getEnvSize ;Get total block size
  1123 00003E74 29F9                <1>     sub ecx, edi    ;Get difference!
  1124 00003E76 5F                  <1>     pop rdi
  1125 00003E77 5E                  <1>     pop rsi
  1126                              <1>     return
    13                              <2> %%_ret:
    14 00003E78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1127                              <1> 
  1128                              <1> getEnvSize:
  1129                              <1> ;Gets the number of bytes in the environment allocation
  1130                              <1> ;Output: ecx = Number of bytes in the environment!
  1131 00003E79 53                  <1>     push rbx
  1132 00003E7A 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1133 00003E7E 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1134 00003E81 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1135 00003E84 5B                  <1>     pop rbx
  1136                              <1>     return
    13                              <2> %%_ret:
    14 00003E85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> 
  1138                              <1> getPtrToEndOfEnv:
  1139                              <1> ;Gets ptr to end of the environment
  1140                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1141 00003E86 50                  <1>     push rax
  1142 00003E87 51                  <1>     push rcx
  1143 00003E88 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1144 00003E8C 31C0                <1>     xor eax, eax
  1145 00003E8E 31C9                <1>     xor ecx, ecx
  1146 00003E90 FFC9                <1>     dec ecx
  1147                              <1> .lp:
  1148 00003E92 F2AE                <1>     repne scasb
  1149 00003E94 3807                <1>     cmp byte [rdi], al
  1150 00003E96 75FA                <1>     jne .lp
  1151 00003E98 59                  <1>     pop rcx
  1152 00003E99 58                  <1>     pop rax
  1153                              <1>     return
    13                              <2> %%_ret:
    14 00003E9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1154                              <1> 
  1155                              <1> growEnvBlock:
  1156                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1157                              <1> ; newly allocated 160 byte block of the environment.
  1158                              <1> ;Returns:   CF=NC - Environment grown ok!
  1159                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1160                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1161 00003E9B 50                  <1>     push rax
  1162 00003E9C 53                  <1>     push rbx
  1163 00003E9D 51                  <1>     push rcx
  1164 00003E9E 56                  <1>     push rsi
  1165 00003E9F 57                  <1>     push rdi
  1166 00003EA0 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1167 00003EA5 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1168 00003EAA 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1169 00003EAE 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1170 00003EB1 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1171 00003EB7 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1172 00003EBD 7321                <1>     jae .tooLarge
  1173                              <1>     ;Here ZF must be NZ.
  1174 00003EBF 4150                <1>     push r8
  1175 00003EC1 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1176 00003EC5 B8004A0000          <1>     mov eax, 4A00h
  1177 00003ECA CD21                <1>     int 21h
  1178 00003ECC 4158                <1>     pop r8
  1179 00003ECE 720A                <1>     jc .exit
  1180                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1181                              <1>     ; so we add 160 zeros to the count of bytes
  1182 00003ED0 81C1A0000000        <1>     add ecx, 0A0h
  1183 00003ED6 31C0                <1>     xor eax, eax
  1184 00003ED8 F3AA                <1>     rep stosb
  1185                              <1> .exit:
  1186 00003EDA 5F                  <1>     pop rdi
  1187 00003EDB 5E                  <1>     pop rsi
  1188 00003EDC 59                  <1>     pop rcx
  1189 00003EDD 5B                  <1>     pop rbx
  1190 00003EDE 58                  <1>     pop rax
  1191                              <1>     return
    13                              <2> %%_ret:
    14 00003EDF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1192                              <1> .tooLarge:
  1193 00003EE0 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1194 00003EE3 F9                  <1>     stc             ;Set CF
  1195 00003EE4 EBF4                <1>     jmp short .exit
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00003EE6 53                  <1>     push rbx
    25 00003EE7 51                  <1>     push rcx
    26 00003EE8 52                  <1>     push rdx
    27 00003EE9 57                  <1>     push rdi
    28 00003EEA 56                  <1>     push rsi
    29 00003EEB FC                  <1>     cld         ;Make String ops go forward
    30 00003EEC 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    31 00003EEF 488D1572CAFFFF      <1>     lea rdx, crlf
    32 00003EF6 E87DF9FFFF          <1>     call printString
    33                              <1> 
    34 00003EFB 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    35 00003F01 B90C000000          <1>     mov ecx, 0Ch
    36 00003F06 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    37 00003F08 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    38 00003F0B 480FB7FF            <1>     movzx rdi, di
    39 00003F0F 4889FA              <1>     mov rdx, rdi    ;Copy error code
    40 00003F12 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    41 00003F16 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    42 00003F19 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    43 00003F1C 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    44 00003F23 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    45 00003F27 E84CF9FFFF          <1>     call printString     ;Call DOS to print first part of message
    46                              <1> 
    47 00003F2C 488D150E020000      <1>     lea rdx, qword [.readmsg]
    48 00003F33 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    49 00003F3A F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    50 00003F3D 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    51 00003F41 E832F9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    52                              <1> 
    53 00003F46 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    54 00003F49 0F85E7000000        <1>     jnz .charError
    55                              <1> ;Disk error continues here
    56 00003F4F 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    57 00003F56 E81DF9FFFF          <1>     call printString
    58 00003F5B 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    59 00003F5D 80C241              <1>     add dl, "A" ;Add ASCII code
    60 00003F60 B402                <1>     mov ah, 02h ;Print char in dl
    61 00003F62 CD21                <1>     int 21h
    62                              <1> .userInput:
    63 00003F64 E808F9FFFF          <1>     call printCRLF  ;Print new line
    64                              <1> ;Abort, Retry, Ignore, Fail is word order
    65                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    66                              <1> .userAbort:
    67                              <1> ;Abort is always an option
    68 00003F69 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    69 00003F70 E803F9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    70                              <1> .userRetry:
    71 00003F75 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    72 00003F78 7418                <1>     jz .userIgnore    ;If clear, dont print message
    73 00003F7A 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    74 00003F81 E8F2F8FFFF          <1>     call printString
    75 00003F86 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    76 00003F8D E8E6F8FFFF          <1>     call printString
    77                              <1> .userIgnore:
    78 00003F92 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    79 00003F95 7418                <1>     jz .userFail
    80 00003F97 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    81 00003F9E E8D5F8FFFF          <1>     call printString
    82 00003FA3 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    83 00003FAA E8C9F8FFFF          <1>     call printString
    84                              <1> .userFail:
    85 00003FAF F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    86 00003FB2 7418                <1>     jz .userMsgEnd
    87 00003FB4 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    88 00003FBB E8B8F8FFFF          <1>     call printString
    89 00003FC0 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    90 00003FC7 E8ACF8FFFF          <1>     call printString
    91                              <1> .userMsgEnd:
    92 00003FCC 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    93 00003FD3 E8A0F8FFFF          <1>     call printString
    94                              <1> ;Get user input now 
    95 00003FD8 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    96 00003FDA 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    97 00003FE1 B401                <1>     mov ah, 01h ;STDIN without Console Echo
    98 00003FE3 CD21                <1>     int 21h ;Get char in al
    99 00003FE5 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   100 00003FE7 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   101 00003FE9 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   102                              <1> .uip1:
   103 00003FEB AE                  <1>     scasb   ;Compare char to list, offset gives return code
   104 00003FEC 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   105 00003FEE FFC1                <1>     inc ecx
   106 00003FF0 81F904000000        <1>     cmp ecx, 4
   107 00003FF6 75F3                <1>     jne .uip1
   108 00003FF8 E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   109                              <1> .validInput:
   110 00003FFD E86FF8FFFF          <1>     call printCRLF   ;Note the input was accepted
   111 00004002 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   112                              <1> ;Now check if the input is permitted
   113 00004004 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   114 00004006 7427                <1>     je .cehExit
   115 00004008 84C0                <1>     test al, al ;Check if 0 => Ignore
   116 0000400A 740F                <1>     je .viIgnore
   117 0000400C 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   118 0000400E 7416                <1>     je .viRetry
   119                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   120 00004010 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   121 00004013 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   122 00004019 EB14                <1>     jmp short .cehExit
   123                              <1> .viIgnore:
   124 0000401B F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   125 0000401E 0F8440FFFFFF        <1>     jz .userInput
   126 00004024 EB09                <1>     jmp short .cehExit
   127                              <1> .viRetry:
   128 00004026 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   129 00004029 0F8435FFFFFF        <1>     jz .userInput
   130                              <1> .cehExit:
   131 0000402F 5E                  <1>     pop rsi
   132 00004030 5F                  <1>     pop rdi
   133 00004031 5A                  <1>     pop rdx
   134 00004032 59                  <1>     pop rcx
   135 00004033 5B                  <1>     pop rbx
   136 00004034 48CF                <1>     iretq
   137                              <1> .charError:
   138 00004036 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   139 0000403B 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   140                              <1> .ce1:
   141 00004042 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   142 00004043 88C2                <1>     mov dl, al  ;Move char into dl
   143 00004045 B402                <1>     mov ah, 02h
   144 00004047 CD21                <1>     int 21h ;Print char
   145 00004049 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   146 0000404B E914FFFFFF          <1>     jmp .userInput
   147                              <1> 
   148                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   149 00004050 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   149 00004059 746563742024202020  <1>
   150 00004062 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   150 0000406B 6E6974202420202020  <1>
   151 00004074 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   151 0000407D 202420202020202020  <1>
   152 00004086 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   152 0000408F 6F6D6D616E64202420  <1>
   153 00004098 446174612024202020- <1>             db "Data $            "       ;Error 4
   153 000040A1 202020202020202020  <1>
   154 000040AA 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   154 000040B3 737420242020202020  <1>
   155 000040BC 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   155 000040C5 202020202020202020  <1>
   156 000040CE 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   156 000040D7 656469612024202020  <1>
   157 000040E0 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   157 000040E9 7420466F756E642024  <1>
   158 000040F2 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   158 000040FB 706572202420202020  <1>
   159 00004104 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   159 0000410D 6C7420242020202020  <1>
   160 00004116 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   160 0000411F 742024202020202020  <1>
   161 00004128 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   161 00004131 61696C757265202420  <1>
   162                              <1> 
   163 0000413A 64726976652024      <1> .drive      db "drive $"
   164 00004141 6572726F7220726561- <1> .readmsg    db "error reading $"
   164 0000414A 64696E672024        <1>
   165 00004150 6572726F7220777269- <1> .writemsg   db "error writing $"
   165 00004159 74696E672024        <1>
   166 0000415F 41626F727424        <1> .abortmsg   db "Abort$" 
   167 00004165 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   168 0000416C 526574727924        <1> .retrymsg   db "Retry$"
   169 00004172 4661696C24          <1> .failmsg    db "Fail$"
   170 00004177 2C2024              <1> .betweenMsg db ", $"
   171 0000417A 3F2024              <1> .endMsg     db "? $"
   172 0000417D 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   173                              <1> 
   174                              <1> int23h:
   175 00004181 F605A3BEFFFFFF      <1>     test byte [permaSwitch], -1
   176 00004188 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   177                              <1>     ;Else, we juggle parent PSP's
   178 0000418A 50                  <1>     push rax
   179 0000418B 53                  <1>     push rbx
   180 0000418C 488B0584BEFFFF      <1>     mov rax, qword [realParent]
   181 00004193 488B1D75BEFFFF      <1>     mov rbx, qword [pspPtr]
   182 0000419A 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   183 0000419E 5B                  <1>     pop rbx
   184 0000419F 58                  <1>     pop rax
   185                              <1> .exit:
   186 000041A0 F9                  <1>     stc     ;Set CF to kill the task
   187 000041A1 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15D7010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2C000000)    <1>     mov qword [parentInt22], rax
    21 00000036 E8(4E3D0000)        <1>     call resetIDTentries
    22                              <1> ;Get a pointer to DOS Sysvars
    23 0000003B B452                <1>     mov ah, 52h ;Get sysvars
    24 0000003D CD21                <1>     int 21h
    25 0000003F 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    26                              <1> ;Call for simple internationalisation data
    27 00000046 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    28 0000004B CD21                <1>     int 21h
    29 0000004D 3CFF                <1>     cmp al, -1
    30 0000004F 7412                <1>     je .skipSwitch
    31 00000051 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    32 00000057 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    33 0000005A 7507                <1>     jne .skipSwitch
    34 0000005C C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    35                              <1> .skipSwitch:
    36 00000063 B800380000          <1>     mov eax, 3800h  ;Get current country data
    37 00000068 488D15(34000000)    <1>     lea rdx, ctryData
    38 0000006F CD21                <1>     int 21h ;Write the data to the internal country table
    39                              <1> ;Now determine if this is the master copy of COMMAND.COM
    40                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    41 00000071 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    42 00000076 CD21                <1>     int 21h
    43 00000078 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    44 0000007B B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    45 00000080 CD21                <1>     int 21h
    46 00000082 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    47 00000085 7574                <1>     jne .skipMaster
    48                              <1> ;Ok so we are master command.com
    49                              <1> ;Now make myself the real parent
    50 00000087 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    51 0000008E 4C8905(17000000)    <1>     mov qword [realParent], r8
    52                              <1> ;Set current Drive in COMSPEC
    53 00000095 B800190000          <1>     mov eax, 1900h ;Get current Drive
    54 0000009A CD21                <1>     int 21h
    55 0000009C 0441                <1>     add al, "A"
    56 0000009E 8805(6E0F0000)      <1>     mov byte [comspecEvar.cspec], al
    57                              <1> ;Set Int 2Eh up
    58 000000A4 488D15(53190000)    <1>     lea rdx, int2Eh
    59 000000AB B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    60 000000B0 CD21                <1>     int 21h
    61                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    62                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    63 000000B2 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    64 000000B7 B800480000          <1>     mov eax, 4800h
    65 000000BC CD21                <1>     int 21h
    66 000000BE 0F824FFFFFFF        <1>     jc .exitBad
    67                              <1> ;Set master environment as mine
    68 000000C4 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    69 000000C8 488D35(660F0000)    <1>     lea rsi, masterEnv
    70 000000CF 4889C7              <1>     mov rdi, rax
    71 000000D2 B91E000000          <1>     mov ecx, menv_len
    72 000000D7 F3A4                <1>     rep movsb   ;Copy the chars over!
    73                              <1> 
    74 000000D9 488D15(68090000)    <1>     lea rdx, crlf
    75 000000E0 B409                <1>     mov ah, 09h
    76 000000E2 CD21                <1>     int 21h
    77 000000E4 E8(3C250000)        <1>     call time
    78 000000E9 E8(8E230000)        <1>     call date
    79 000000EE 488D15(68090000)    <1>     lea rdx, crlf
    80 000000F5 B409                <1>     mov ah, 09h
    81 000000F7 CD21                <1>     int 21h
    82 000000F9 EB2E                <1>     jmp short .printInit
    83                              <1> .skipMaster:    
    84                              <1> ;We now search for the master environment!!
    85                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    86                              <1>     ; parent. This is the previous master command interpreter! This means
    87                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
    88                              <1>     ; then set our environment ptr in the PSP to the master environment.
    89 000000FB 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    90 00000102 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    91 0000010A 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
    92 00000111 F2AE                <1>     repne scasb
    93 00000113 67E313              <1>     jecxz .printInit
    94 00000116 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    95 00000119 E8(963A0000)        <1>     call ucChar
    96 0000011E 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    97 00000120 7507                <1>     jne .printInit
    98 00000122 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    99                              <1> .printInit:
   100 00000129 488D1D(A4410000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   101                              <1> ;Finish by printing INIT string.
   102 00000130 53                  <1>     push rbx
   103 00000131 488D153A000000      <1>     lea rdx, initString
   104 00000138 B409                <1>     mov ah, 09h
   105 0000013A CD21                <1>     int 21h ;Print init string
   106 0000013C E8(7A2E0000)        <1>     call version.printVersionNumber
   107 00000141 488D1560000000      <1>     lea rdx, initString2
   108 00000148 B409                <1>     mov ah, 09h
   109 0000014A CD21                <1>     int 21h ;Print init string
   110 0000014C 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 0000014D 4881C340060000      <1>     add rbx, stackSize
   113 00000154 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 0000015B 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 0000015F 48C1E304            <1>     shl rbx, 4
   116 00000163 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 00000166 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 0000016D E9(840F0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000172 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 0000017B 66696320436F6D7075- <1>
   121 00000184 746572205265736561- <1>
   121 0000018D 726368285229205343- <1>
   121 00000196 502F444F5328522920- <1>
   121 0000019F 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001A8 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001B1 202020284329436F70- <1>
   123 000001BA 797269676874205363- <1>
   123 000001C3 69656E746966696320- <1>
   123 000001CC 436F6D707574657220- <1>
   123 000001D5 526573656172636820- <1>
   123 000001DE 323032342E0D0A24    <1>
   124 000001E6 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 000001EF 20444F532076657273- <1>
   124 000001F8 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+5+2 passes

