     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    33 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    34 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    35                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    36                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    37                              <1> endstruc
    38                              <1> bbNoParam   equ -1
    39                              <1> bbNull      equ 0
    40                              <1> bbEchoOn    equ 1
    41                              <1> bbEchoOff   equ 0
    42                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    43                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    48 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    49 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    50 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    51 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    52 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc execProg  ;For use with EXEC-ing a child task
    56 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    60                              <1> endstruc
    61                              <1> 
    62                              <1> ;Directory attribute equates
    63                              <1>     dirReadOnly     equ 01h
    64                              <1>     dirHidden       equ 02h
    65                              <1>     dirSystem       equ 04h
    66                              <1>     dirVolumeID     equ 08h
    67                              <1>     dirDirectory    equ 10h
    68                              <1>     dirArchive      equ 20h
    69                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    70                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    71                              <1>     ;If any of the three bits are set, then ALL three bits are set
    72                              <1>     ; in addition to whatever the user passed to search for.
    73                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    74                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT kills
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17 0000009D 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    18                              <1> inCritical  equ 1   ;Up if processing a command
    19                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    20                              <1> inSingle    equ 4   ;Up if processing a single command (\C mode)
    21                              <1> inBatch     equ 8   ;Up if processing a batch file
    22                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    23                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    24                              <1> inLdr       equ 80h ;Up if in loader
    25 0000009E 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    26 0000009F FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 000000A1 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    30 000000A2 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    31 000000A4 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    32                              <1> ;These variables are valid for a SINGLE command in a command line
    33                              <1> ;Next two bytes, if set to -1, flags error
    34 000000A6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    35 000000A7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    36                              <1> ;                    If 2, we are redirecting output to a file, by appending
    37 000000A8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    38 000000AA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    39                              <1> 
    40                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    41 000000AC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    42 000000AD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    43 000000AE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    44                              <1> 
    45 000000AF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    46 000000B0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    47 000000B1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    48                              <1> 
    49 000000B2 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    54 000000B3 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    55 000000BB 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    55 000000C4 000000000000000000- <1>
    55 000000CD 000000000000000000- <1>
    55 000000D6 000000000000000000- <1>
    55 000000DF 000000000000000000- <1>
    55 000000E8 000000000000000000- <1>
    55 000000F1 000000000000000000- <1>
    55 000000FA 000000000000000000- <1>
    55 00000103 00000000000000      <1>
    56 0000010A 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    57                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    58                              <1> 
    59                              <1> ;Structs and strings
    60                              <1> 
    61 0000010E 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    61 00000117 00000000000000      <1>
    62 0000011E 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    62 00000127 000000000000000000- <1>
    62 00000130 000000000000000000- <1>
    62 00000139 000000000000000000- <1>
    62 00000142 00000000000000      <1>
    63                              <1> 
    64 00000149 000000000000000000- <1> launchBlock db execProg_size dup (0)
    64 00000152 000000000000000000- <1>
    64 0000015B 000000000000000000- <1>
    64 00000164 0000000000          <1>
    65                              <1> 
    66                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    67                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    68                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    69                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    70                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    71                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    72                              <1> inBufferL   equ 128 
    73 00000169 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Original input from user! 128 chars max! 
    73 00000172 000000000000000000- <1>
    73 0000017B 000000000000000000- <1>
    73 00000184 000000000000000000- <1>
    73 0000018D 000000000000000000- <1>
    73 00000196 000000000000000000- <1>
    73 0000019F 000000000000000000- <1>
    73 000001A8 000000000000000000- <1>
    73 000001B1 000000000000000000- <1>
    73 000001BA 000000000000000000- <1>
    73 000001C3 000000000000000000- <1>
    73 000001CC 000000000000000000- <1>
    73 000001D5 000000000000000000- <1>
    73 000001DE 000000000000000000- <1>
    73 000001E7 00000000            <1>
    74 000001EB 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    74 000001F4 000000000000000000- <1>
    74 000001FD 000000000000000000- <1>
    74 00000206 000000000000000000- <1>
    74 0000020F 000000000000000000- <1>
    74 00000218 000000000000000000- <1>
    74 00000221 000000000000000000- <1>
    74 0000022A 000000000000000000- <1>
    74 00000233 000000000000000000- <1>
    74 0000023C 000000000000000000- <1>
    74 00000245 000000000000000000- <1>
    74 0000024E 000000000000000000- <1>
    74 00000257 000000000000000000- <1>
    74 00000260 000000000000000000- <1>
    74 00000269 00000000            <1>
    75 0000026D 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    75 00000276 000000000000000000- <1>
    75 0000027F 000000000000000000- <1>
    75 00000288 000000000000000000- <1>
    75 00000291 000000000000000000- <1>
    75 0000029A 000000000000000000- <1>
    75 000002A3 000000000000000000- <1>
    75 000002AC 000000000000000000- <1>
    75 000002B5 000000000000000000- <1>
    75 000002BE 000000000000000000- <1>
    75 000002C7 000000000000000000- <1>
    75 000002D0 000000000000000000- <1>
    75 000002D9 000000000000000000- <1>
    75 000002E2 000000000000000000- <1>
    75 000002EB 00000000            <1>
    76 000002EF 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    76 000002F8 000000000000000000- <1>
    76 00000301 000000000000000000- <1>
    76 0000030A 000000000000000000- <1>
    76 00000313 000000000000000000- <1>
    76 0000031C 000000000000000000- <1>
    76 00000325 000000000000000000- <1>
    76 0000032E 000000000000000000- <1>
    76 00000337 00000000000000      <1>
    77 0000033E 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    77 00000347 0000000000          <1>
    78                              <1> 
    79 0000034C 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    79 00000355 000000000000000000- <1>
    79 0000035E 000000000000000000- <1>
    79 00000367 000000000000000000- <1>
    79 00000370 000000000000000000- <1>
    79 00000379 000000000000000000- <1>
    79 00000382 000000000000000000- <1>
    79 0000038B 000000000000000000- <1>
    79 00000394 00000000000000      <1>
    80 0000039B 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    80 000003A4 000000000000000000- <1>
    80 000003AD 000000000000000000- <1>
    80 000003B6 000000000000000000- <1>
    80 000003BF 000000000000000000- <1>
    80 000003C8 000000000000000000- <1>
    80 000003D1 000000000000000000- <1>
    80 000003DA 000000000000000000- <1>
    80 000003E3 00000000000000      <1>
    81                              <1> 
    82                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    83 000003EA 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    83 000003F3 000000000000000000- <1>
    83 000003FC 000000000000000000- <1>
    83 00000405 000000000000000000- <1>
    83 0000040E 000000000000000000- <1>
    83 00000417 000000000000000000- <1>
    83 00000420 000000000000000000- <1>
    83 00000429 000000000000000000- <1>
    83 00000432 00000000000000      <1>
    84 00000439 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    84 00000442 000000000000000000- <1>
    84 0000044B 000000000000000000- <1>
    84 00000454 000000000000000000- <1>
    84 0000045D 000000000000000000- <1>
    84 00000466 000000000000000000- <1>
    84 0000046F 000000000000000000- <1>
    84 00000478 000000000000000000- <1>
    84 00000481 00000000000000      <1>
    85                              <1> 
    86 00000488 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    87 00000490 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    88                              <1> 
    89                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    90                              <1> ; a really long invalid DOS path for PATH to work properly.
    91 00000498 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    91 000004A1 000000000000000000- <1>
    91 000004AA 000000000000000000- <1>
    91 000004B3 000000000000000000- <1>
    91 000004BC 000000000000000000- <1>
    91 000004C5 000000000000000000- <1>
    91 000004CE 000000000000000000- <1>
    91 000004D7 000000000000000000- <1>
    91 000004E0 000000000000000000- <1>
    91 000004E9 000000000000000000- <1>
    91 000004F2 000000000000000000- <1>
    91 000004FB 000000000000000000- <1>
    91 00000504 000000000000000000- <1>
    91 0000050D 000000000000000000- <1>
    91 00000516 000000000000000000- <1>
    91 0000051F 000000000000000000- <1>
    91 00000528 000000000000000000- <1>
    91 00000531 000000000000000000- <1>
    91 0000053A 000000000000000000- <1>
    91 00000543 000000000000000000- <1>
    91 0000054C 000000000000000000- <1>
    91 00000555 000000000000000000- <1>
    91 0000055E 000000000000000000- <1>
    91 00000567 000000000000000000- <1>
    91 00000570 000000000000000000- <1>
    91 00000579 000000000000000000- <1>
    91 00000582 000000000000000000- <1>
    91 0000058B 000000000000000000- <1>
    91 00000594 0000000000000000    <1>
    92                              <1> 
    93                              <1> ;Internal Function vars
    94                              <1> ;Dir Vars
    95 0000059C 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    96                              <1> ;                                   Bit[1] set => /P or /p specified
    97                              <1> ;                                   Bit[2] set => A file/path specified
    98 0000059D 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    99 0000059E 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
   100 000005A2 00                  <1> dirDrv      db 0    ;0 based drive number to use
   101 000005A3 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
   101 000005AC 000000000000000000- <1>
   101 000005B5 000000000000000000- <1>
   101 000005BE 000000000000000000- <1>
   101 000005C7 000000000000000000- <1>
   101 000005D0 000000000000000000- <1>
   101 000005D9 000000000000000000- <1>
   101 000005E2 000000000000000000- <1>
   101 000005EB 000000000000000000- <1>
   101 000005F4 000000000000000000- <1>
   101 000005FD 000000000000000000- <1>
   101 00000606 000000000000000000- <1>
   101 0000060F 000000000000000000- <1>
   101 00000618 000000000000000000- <1>
   101 00000621 00000000            <1>
   102 00000625 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
   102 0000062E 3F3F3F3F3F3F3F      <1>
   103                              <1> dirWideType equ 1
   104                              <1> dirPageType equ 2
   105                              <1> dirFileType equ 4
   106                              <1> ;Volume Vars
   107                              <1> volFcb:
   108                              <1>     istruc exFcb
   109 00000635 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   110 00000636 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   111 0000063C 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   112 0000063D 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   113 00000645 3F3F3F              <1>     at exFcb.fileext,   db "???"
   114 00000648 00000000            <1>     at exFcb.curBlock,  dd 0
   115 0000064C 00<rep 15h>         <1>     iend 
   116                              <1> 
   117                              <1> ;Time/Date vars
   118 00000661 00                  <1> td1 db 0    ;Minutes/Year
   119 00000662 00                  <1> td2 db 0    ;Hours/Zero
   120 00000663 00                  <1> td3 db 0    ;Hundredths/Day
   121 00000664 00                  <1> td4 db 0    ;Seconds/Month
   122                              <1> 
   123                              <1> ;Rename/Copy/Delete Buffers
   124                              <1> delPath:
   125 00000665 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   125 0000066E 000000000000000000- <1>
   125 00000677 000000000000000000- <1>
   125 00000680 000000000000000000- <1>
   125 00000689 000000000000000000- <1>
   125 00000692 000000000000000000- <1>
   125 0000069B 000000000000000000- <1>
   125 000006A4 000000000000000000- <1>
   125 000006AD 000000000000000000- <1>
   125 000006B6 000000000000000000- <1>
   125 000006BF 000000000000000000- <1>
   125 000006C8 000000000000000000- <1>
   125 000006D1 000000000000000000- <1>
   125 000006DA 000000000000000000- <1>
   125 000006E3 00000000            <1>
   126 000006E7 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   126 000006F0 000000000000000000- <1>
   126 000006F9 000000000000000000- <1>
   126 00000702 000000000000000000- <1>
   126 0000070B 000000000000000000- <1>
   126 00000714 000000000000000000- <1>
   126 0000071D 000000000000000000- <1>
   126 00000726 000000000000000000- <1>
   126 0000072F 000000000000000000- <1>
   126 00000738 000000000000000000- <1>
   126 00000741 000000000000000000- <1>
   126 0000074A 000000000000000000- <1>
   126 00000753 000000000000000000- <1>
   126 0000075C 000000000000000000- <1>
   126 00000765 00000000            <1>
   127 00000769 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   128 00000771 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   129 00000779 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   129 00000782 2020                <1>
   130                              <1> ;Copy vars
   131 00000784 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   132 00000785 FFFF                <1> sourceHdl   dw -1
   133 00000787 FFFF                <1> destHdl     dw -1
   134 00000789 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   135 0000078B 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   136 00000793 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   137 00000795 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   138 00000799 00                  <1> bCpFlg      db 0    ;Copy state flag
   139                              <1> 
   140                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   141                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   142                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   143                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   144                              <1> oneDest     equ 10h ;Single destination, not dir 
   145                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   146                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   147                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   148                              <1> 
   149                              <1> ;Environment manipulation vars
   150 0000079A 0000                <1> envVarSz        dw 0    ;Env var size
   151 0000079C 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 0000079E 03444952            <1>     db 3, "DIR"
     8 000007A2 4C1E                <1>     dw dir - startLbl
     9                              <1> 
    10 000007A4 024344              <1>     db 2, "CD"
    11 000007A7 3C23                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007A9 054348444952        <1>     db 5, "CHDIR"
    14 000007AF 3C23                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007B1 024D44              <1>     db 2, "MD"
    17 000007B4 B723                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007B6 054D4B444952        <1>     db 5, "MKDIR"
    20 000007BC B723                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007BE 025244              <1>     db 2, "RD"
    23 000007C1 0024                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007C3 05524D444952        <1>     db 5, "RMDIR"
    26 000007C9 0024                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007CB 0344454C            <1>     db 3, "DEL"
    29 000007CF C32B                <1>     dw erase - startLbl
    30                              <1> 
    31 000007D1 054552415345        <1>     db 5, "ERASE"
    32 000007D7 C32B                <1>     dw erase - startLbl
    33                              <1> 
    34 000007D9 0444415445          <1>     db 4, "DATE"
    35 000007DE 062D                <1>     dw date - startLbl
    36                              <1> 
    37 000007E0 0454494D45          <1>     db 4, "TIME"
    38 000007E5 B42E                <1>     dw time - startLbl
    39                              <1> 
    40 000007E7 04434F5059          <1>     db 4, "COPY"
    41 000007EC 4A24                <1>     dw copy - startLbl
    42                              <1> 
    43 000007EE 0443545459          <1>     db 4, "CTTY"
    44 000007F3 DD2F                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007F5 03434C53            <1>     db 3, "CLS"
    47 000007F9 7830                <1>     dw cls - startLbl
    48                              <1> 
    49 000007FB 05425245414B        <1>     db 5, "BREAK"
    50 00000801 EA30                <1>     dw break - startLbl
    51                              <1> 
    52 00000803 06564552494659      <1>     db 6, "VERIFY"
    53 0000080A 6B31                <1>     dw verify - startLbl
    54                              <1> 
    55 0000080C 0652454E414D45      <1>     db 6, "RENAME"
    56 00000813 E831                <1>     dw rename - startLbl
    57                              <1> 
    58 00000815 0352454E            <1>     db 3, "REN"
    59 00000819 E831                <1>     dw rename - startLbl
    60                              <1>     
    61 0000081B 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000824 E535                <1>     dw truename - startLbl
    63                              <1> 
    64 00000826 03564552            <1>     db 3, "VER"
    65 0000082A CB37                <1>     dw version - startLbl
    66                              <1> 
    67 0000082C 03564F4C            <1>     db 3, "VOL"
    68 00000830 0C37                <1>     dw volume - startLbl
    69                              <1> 
    70 00000832 034D454D            <1>     db 3, "MEM"
    71 00000836 0F38                <1>     dw memory - startLbl
    72                              <1> 
    73 00000838 0445584954          <1>     db 4, "EXIT"
    74 0000083D 0C3A                <1>     dw exit - startLbl
    75                              <1> 
    76 0000083F 0454595045          <1>     db 4, "TYPE"
    77 00000844 5939                <1>     dw type - startLbl
    78                              <1> 
    79 00000846 054C4142454C        <1>     db 5, "LABEL"
    80 0000084C 3636                <1>     dw label - startLbl
    81                              <1> 
    82 0000084E 0450415448          <1>     db 4, "PATH"
    83 00000853 633D                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 00000855 03534554            <1>     db 3, "SET"
    86 00000859 443C                <1>     dw set - startLbl
    87                              <1> 
    88 0000085B 0650524F4D5054      <1>     db 6, "PROMPT"
    89 00000862 423E                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 00000864 054D4B4C424C        <1>     db 5, "MKLBL"
    92 0000086A 6036                <1>     dw mklbl - startLbl
    93                              <1> 
    94 0000086C 05524D4C424C        <1>     db 5, "RMLBL"
    95 00000872 9B36                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 00000874 05524E4C424C        <1>     db 5, "RNLBL"
    98 0000087A D636                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 0000087C 05544F554348        <1>     db 5, "TOUCH"
   101 00000882 D833                <1>     dw touch - startLbl
   102                              <1> 
   103 00000884 044A4F494E          <1>     db 4, "JOIN"
   104 00000889 3B34                <1>     dw join - startLbl
   105                              <1> 
   106 0000088B 055355425354        <1>     db 5, "SUBST"
   107 00000891 FE34                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110                              <1> ;BATCH ORIENTED COMMANDS HERE
   111 00000893 044543484F          <1>     db 4, "ECHO"
   112 00000898 B23E                <1>     dw echo - startLbl
   113                              <1> 
   114 0000089A 055041555345        <1>     db 5, "PAUSE"
   115 000008A0 6F3F                <1>     dw pauza - startLbl
   116                              <1> 
   117 000008A2 0352454D            <1>     db 3, "REM"
   118 000008A6 B83F                <1>     dw remark - startLbl
   119 000008A8 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000008A9 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000008AC 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000008B1 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008BA 696C65206D69737369- <1>
     4 000008C3 6E670D0A24          <1>
     5 000008C8 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008D1 6469736B2077697468- <1>
     5 000008DA 206261746368206669- <1>
     5 000008E3 6C65                <1>
     6 000008E5 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008EE 737320616E79206B65- <1>
     6 000008F7 79207768656E207265- <1>
     6 00000900 6164790D0A24        <1>
     7 00000906 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 0000090F 746520626174636820- <1>
     7 00000918 6A6F622028592F4E29- <1>
     7 00000921 3F2024              <1>
     8 00000924 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 0000092D 6E64206F722066696C- <1>
     8 00000936 65206E616D650D0A24  <1>
     9 0000093F 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000948 2066696C65206E616D- <1>
     9 00000951 65206F7220          <1>
    10 00000956 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 0000095F 666F756E640D0A24    <1>
    11 00000967 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 00000970 656E74206469736B20- <1>
    11 00000979 73706163650D0A24    <1>
    12 00000981 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 0000098A 7669726F6E6D656E74- <1>
    12 00000993 2073706163650D0A24  <1>
    13 0000099C 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 000009A5 74696F6E206572726F- <1>
    13 000009AE 720D0A24            <1>
    14 000009B2 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 000009BB 6F7420626520636F70- <1>
    14 000009C4 696564206F6E746F20- <1>
    14 000009CD 697473656C660D0A24  <1>
    15 000009D6 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000009DF 662064657374696E61- <1>
    15 000009E8 74696F6E206C6F7374- <1>
    15 000009F1 206265666F72652063- <1>
    15 000009FA 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 00000A00 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 00000A09 636F706965640D0A24  <1>
    18 00000A12 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 00000A1B 68206D656D6F727920- <1>
    18 00000A24 666F7220434F50590D- <1>
    18 00000A2D 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 00000A2F 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 00000A38 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 00000A39 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A42 65650D0A24          <1>
    23 00000A47 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A50 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A59 726976652073706563- <1>
    25 00000A62 696669636174696F6E- <1>
    25 00000A6B 0D0A24              <1>
    26 00000A6E 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000A77 6B6579207768656E20- <1>
    26 00000A80 7265616479202E202E- <1>
    26 00000A89 202E2024            <1>
    27 00000A8D 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000A96 6172616D657465720D- <1>
    27 00000A9F 0A24                <1>
    28                              <1> 
    29 00000AA1 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000AAA 576564546875467269- <1>
    29 00000AB3 536174              <1>
    30 00000AB6 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000ABF 206461746524        <1>
    31 00000AC5 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000ACE 6174652069732024    <1>
    32 00000AD6 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000ADF 657720646174652024  <1>
    33 00000AE8 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000AF1 293A2024            <1>
    34 00000AF5 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000AFE 293A2024            <1>
    35 00000B02 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000B0B 293A2024            <1>
    36 00000B0F 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000B18 2074696D6524        <1>
    37 00000B1E 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000B27 696D652069732024    <1>
    38 00000B2F 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000B38 65772074696D653A20- <1>
    38 00000B41 24                  <1>
    39                              <1> 
    40 00000B42 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B4B 7572652028592F4E29- <1>
    40 00000B54 3F2024              <1>
    41                              <1> 
    42 00000B57 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000B60 56657273696F6E2024  <1>
    43                              <1> 
    44 00000B69 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000B72 6E2064726976652024  <1>
    45 00000B7B 2069732024          <1> volOk   db " is $"
    46 00000B80 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000B89 6162656C24          <1>
    47                              <1> 
    48 00000B8E 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000B97 69726563746F72790D- <1>
    48 00000BA0 0A24                <1>
    49 00000BA2 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000BAB 206372656174652064- <1>
    49 00000BB4 69726563746F72790D- <1>
    49 00000BBD 0A24                <1>
    50 00000BBF 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000BC8 6174682C206E6F7420- <1>
    50 00000BD1 6469726563746F7279- <1>
    50 00000BDA 2C0D0A              <1>
    51 00000BDD 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000BE6 6F7279206E6F742065- <1>
    51 00000BEF 6D7074790D0A24      <1>
    52 00000BF6 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000BFF 79206F66202024      <1>
    53 00000C06 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000C0F 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000C18 6E6965640D0A24      <1>
    55 00000C1F 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000C28 72697665206973206E- <1>
    55 00000C31 6F206C6F6E67657220- <1>
    55 00000C3A 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C40 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C49 65766963650D0A24    <1>
    58 00000C51 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C5A 20666F756E640D0A24  <1>
    59 00000C63 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000C6C 726F720D0A24        <1>
    60 00000C72 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000C7B 6F74206265206E6573- <1>
    60 00000C84 7465640D0A24        <1>
    61 00000C8A 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000C93 6174652066696C6520- <1>
    61 00000C9C 6572726F7220647572- <1>
    61 00000CA5 696E6720706970650D- <1>
    61 00000CAE 0A24                <1>
    62 00000CB0 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000CB9 2062696E6172792072- <1>
    62 00000CC2 656164732066726F6D- <1>
    62 00000CCB 206120646576696365- <1>
    62 00000CD4 0D0A24              <1>
    63 00000CD7 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000CDD 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000CE2 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000CEB 24                  <1>
    66 00000CEC 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000CF5 2024                <1>
    67 00000CF7 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000D00 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000D09 617468206F72206669- <1>
    68 00000D12 6C65206E616D650D0A- <1>
    68 00000D1B 24                  <1>
    69 00000D1C 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000D25 756D626572206F6620- <1>
    69 00000D2E 706172616D65746572- <1>
    69 00000D37 730D0A24            <1>
    70 00000D3B 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D44 74696E6720746F2064- <1>
    70 00000D4D 6576696365          <1>
    71 00000D52 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D56 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    72 00000D5F 6F6F2062696720746F- <1>
    72 00000D68 2066697420696E206D- <1>
    72 00000D71 656D6F72790D0A24    <1>
    73                              <1> 
    74                              <1> 
    75 00000D79 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    75 00000D82 20202020202020546F- <1>
    75 00000D8B 74616C207379737465- <1>
    75 00000D94 6D206D656D6F72793A- <1>
    75 00000D9D 2024                <1>
    76 00000D9F 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    76 00000DA8 20202020202020204D- <1>
    76 00000DB1 656D6F727920757365- <1>
    76 00000DBA 6420627920444F533A- <1>
    76 00000DC3 2024                <1>
    77 00000DC5 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    77 00000DCE 656D6F727920757365- <1>
    77 00000DD7 64206279206170706C- <1>
    77 00000DE0 69636174696F6E733A- <1>
    77 00000DE9 2024                <1>
    78 00000DEB 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    78 00000DF4 656D6F727920726573- <1>
    78 00000DFD 657276656420627920- <1>
    78 00000E06 68617264776172653A- <1>
    78 00000E0F 2024                <1>
    79 00000E11 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    79 00000E1A 202020202020202020- <1>
    79 00000E23 2020202020204D656D- <1>
    79 00000E2C 6F727920667265653A- <1>
    79 00000E35 2024                <1>
    80 00000E37 20627974657324      <1> memByte db " bytes$"
    81 00000E3E 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    81 00000E47 6F7420417373657274- <1>
    81 00000E50 61696E20444F532045- <1>
    81 00000E59 6E74727920506F696E- <1>
    81 00000E62 7424                <1>
    82 00000E64 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    82 00000E6D 416C6C6F636174696F- <1>
    82 00000E76 6E204572726F7224    <1>
    83 00000E7E 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    83 00000E87 4572726F7224        <1>
    84 00000E8D 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    84 00000E96 68616C74656424      <1>
    85                              <1> 
    86 00000E9D 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    86 00000EA6 206372656174652070- <1>
    86 00000EAF 6970650D0A          <1>
    87                              <1> pipeErrMsgL equ $ - pipeErrMsg
    88 00000EB4 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    88 00000EBD 6F6E206572726F720D- <1>
    88 00000EC6 0A                  <1>
    89                              <1> redirErrMsgL   equ $ - redirErrMsg
    90                              <1> 
    91 00000EC7 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    92 00000ECB 2020202024          <1> fourSpc  db "    $"
    93 00000ED0 20202024            <1> threeSpc db "   $"
    94 00000ED4 202024              <1> twoSpc   db "  $"
    95                              <1> 
    96 00000ED7 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    96 00000EE0 696679204F4E206F72- <1>
    96 00000EE9 204F46460D0A24      <1>
    97                              <1> 
    98 00000EF0 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    99 00000EF8 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   100                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   101                              <1> ; handles and reopen CON
   102 00000F01 434F4E00            <1> conName db "CON",0    
   103 00000F05 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   103 00000F0E 45432E42415400      <1>
   104                              <1> autoSpecL equ $ - autoSpec
   105                              <1> ;Int 24h strings
   106                              <1> errorMsgTable: ;Each table entry is 18 chars long
   107 00000F15 57726974652050726F- <1>             db "Write Protect $"            ;Driver Error 0 / DOS Error 013h
   107 00000F1E 746563742024        <1>
   108 00000F24 556E6B6E6F776E2055- <1>             db "Unknown Unit $"             ;Driver Error 1 / DOS Error 014h
   108 00000F2D 6E69742024          <1>
   109 00000F32 4E6F74205265616479- <1>             db "Not Ready $"                ;Driver Error 2 / DOS Error 015h
   109 00000F3B 2024                <1>
   110 00000F3D 556E6B6E6F776E2043- <1>             db "Unknown Command $"          ;Driver Error 3 / DOS Error 016h
   110 00000F46 6F6D6D616E642024    <1>
   111 00000F4E 446174612024        <1>             db "Data $"                     ;Driver Error 4 / DOS Error 017h
   112 00000F54 426164205265717565- <1>             db "Bad Request $"              ;Driver Error 5 / DOS Error 018h
   112 00000F5D 73742024            <1>
   113 00000F61 5365656B2024        <1>             db "Seek $"                     ;Driver Error 6 / DOS Error 019h
   114 00000F67 556E6B6E6F776E204D- <1>             db "Unknown Media $"            ;Driver Error 7 / DOS Error 01Ah
   114 00000F70 656469612024        <1>
   115 00000F76 536563746F72204E6F- <1>             db "Sector Not Found $"         ;Driver Error 8 / DOS Error 01Bh
   115 00000F7F 7420466F756E642024  <1>
   116 00000F88 4F7574204F66205061- <1>             db "Out Of Paper $"             ;Driver Error 9 / DOS Error 01Ch
   116 00000F91 7065722024          <1>
   117 00000F96 577269746520466175- <1>             db "Write Fault $"              ;Driver Error A / DOS Error 01Dh
   117 00000F9F 6C742024            <1>
   118 00000FA3 52656164204661756C- <1>             db "Read Fault $"               ;Driver Error B / DOS Error 01Eh
   118 00000FAC 742024              <1>
   119 00000FAF 47656E6572616C2046- <1>             db "General Failure $"          ;Driver Error C / DOS Error 01Fh
   119 00000FB8 61696C7572652024    <1>
   120 00000FC0 53686172696E672076- <1>             db "Sharing violation $"        ;SHARE Error    / DOS Error 020h
   120 00000FC9 696F6C6174696F6E20- <1>
   120 00000FD2 24                  <1>
   121 00000FD3 4C6F636B2076696F6C- <1>             db "Lock violation $"           ;SHARE Error    / DOS Error 021h
   121 00000FDC 6174696F6E2024      <1>
   122 00000FE3 506C6561736520496E- <1> errMsg0Fh   db "Please Insert disk "        ;Driver Error F / DOS Error 022h
   122 00000FEC 73657274206469736B- <1>
   122 00000FF5 20                  <1>
   123 00000FF6 202020202020202020- <1> vol0Fh      db 11 dup (" ")
   123 00000FFF 2020                <1>
   124 00001001 0D0A24              <1>             db CR,LF,"$"
   125 00001004 46434220756E617661- <1>             db "FCB unavailable $"          ;FCB Error      / DOS Error 023h
   125 0000100D 696C61626C652024    <1>
   126 00001015 53686172696E672062- <1>             db "Sharing buffer error $"     ;Share buffer error / Error 024h
   126 0000101E 756666657220657272- <1>
   126 00001027 6F722024            <1>
   127                              <1> ;Anything above this is a generic network error
   128 0000102B 47656E65726963206E- <1> genNetErr  db "Generic network error $"     ;All DOS errors codes [32h, 58h]
   128 00001034 6574776F726B206572- <1>
   128 0000103D 726F722024          <1>
   129 00001042 64726976652024      <1> drvMsg     db "drive $"
   130 00001049 6572726F7220726561- <1> readMsg    db "error reading $"
   130 00001052 64696E672024        <1>
   131 00001058 6572726F7220777269- <1> writeMsg   db "error writing $"
   131 00001061 74696E672024        <1>
   132 00001067 41626F727424        <1> abortMsg   db "Abort$" 
   133 0000106D 49676E6F726524      <1> ignoreMsg  db "Ignore$"
   134 00001074 526574727924        <1> retryMsg   db "Retry$"
   135 0000107A 4661696C24          <1> failMsg    db "Fail$"
   136 0000107F 2C2024              <1> betweenMsg db ", $"
   137 00001082 3F2024              <1> endMsg     db "? $"
   138 00001085 49524146            <1> i24Resp    db "IRAF"   ;Abort Retry Ignore Fail
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00001089 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00001091 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 0000109A 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 000010A0 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     4                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     5                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     6 000010A7 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     7 000010AA 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     8 000010AE C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     9 000010B1 B44A                <1>     mov ah, 4Ah ;Realloc
    10 000010B3 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    11 000010B6 CD21                <1>     int 21h
    12 000010B8 85D2                <1>     test edx, edx   ;If zero, no autoexec
    13 000010BA 7425                <1>     jz commandMain
    14                              <1>     ;Only enter here if we are autoexec :)
    15 000010BC E8CA090000          <1>     call getSetMainState          
    16 000010C1 C605A2F0FFFF0F      <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    17 000010C8 488D3536FEFFFF      <1>     lea rsi, autoSpec
    18 000010CF 488D3D95F0FFFF      <1>     lea rdi, inBuffer + 2
    19 000010D6 E829330000          <1>     call strcpy
    20 000010DB C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    21 000010DF EB49                <1>     jmp short commandMain.batProceed
    22                              <1> commandMain:
    23 000010E1 488B251DEFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    24 000010E8 E89E090000          <1>     call getSetMainState
    25                              <1> .inputMain:         ;Only reset once per line!
    26 000010ED E810310000          <1>     call printCRLF  ;Command complete, indicate with new line!
    27 000010F2 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    28 000010F7 CD21                <1>     int 21h
    29 000010F9 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    30 000010FE BA01000000          <1>     mov edx, 1      ;Start new print job
    31 00001103 CD21                <1>     int 21h
    32                              <1> .inputGetAgain:
    33 00001105 E86A330000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    34                              <1> .inputGetCmdlineAgain:
    35 0000110A E85A300000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    36 0000110F F60587EFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    37 00001116 0F853A0B0000        <1>     jnz batNextLine
    38 0000111C 488D1546F0FFFF      <1>     lea rdx, inBuffer
    39 00001123 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    40 00001128 CD21                <1>     int 21h
    41                              <1> .batProceed:            ;Jump here to copy the batch input line 
    42 0000112A E8D3300000          <1>     call printCRLF  ;Note we have accepted input
    43                              <1> ;First check we had something typed in of length greater than 0
    44 0000112F 803D34F0FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    45 00001136 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    46                              <1>     ;Copy over the input text
    47 00001138 488D352AF0FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    48 0000113F 488D3DA5F0FFFF      <1>     lea rdi, cpyBuffer
    49 00001146 B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    50 0000114B F3A4                <1>     rep movsb
    51 0000114D E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    52                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    53 00001152 488D3516F1FFFF      <1>     lea rsi, cmdBuffer + 2
    54 00001159 E8E4320000          <1>     call skipDelimiters
    55 0000115E 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    56 00001161 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    57 00001163 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    58 00001166 0F84D4030000        <1>     je hardSynErr
    59                              <1> .pipeLoop:
    60 0000116C 4C8B059CEEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    61 00001173 E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    62                              <1>     ;ZF here indicates if we are at the end of the command or nots
    63 00001178 E85B070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    64 0000117D E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    65 00001182 E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    66                              <1> .okRet:                     ;Normal return point for processing
    67 00001187 E851050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    68 0000118C F6050EEFFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    69 00001193 0F8454FFFFFF        <1>     jz .inputMain
    70                              <1>     ;Now we pull the commandline forwards. 
    71 00001199 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    72 0000119E 488D3DCAF0FFFF      <1>     lea rdi, cmdBuffer + 2
    73 000011A5 4889F1              <1>     mov rcx, rsi
    74 000011A8 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    75 000011AB 280DBDF0FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    76 000011B1 8A0DB7F0FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    77 000011B7 FFC1                <1>     inc ecx     ;One more for the terminating char
    78 000011B9 F3A4                <1>     rep movsb   ;Move the chars over    
    79 000011BB E8A3320000          <1>     call clearCommandState  ;Else, clear the command state and start again
    80 000011C0 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    81                              <1> 
    82                              <1> makeCmdBuffer:
    83                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    84                              <1> ; copy buffer. Called only once in a cycle.
    85                              <1> ;Throughout: CL has char count, CH has quote count
    86 000011C2 488D3524F0FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    87 000011C9 31C9                <1>     xor ecx, ecx
    88 000011CB 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    89                              <1> .countQuotes:
    90 000011CE AC                  <1>     lodsb
    91 000011CF 3C22                <1>     cmp al, '"'
    92 000011D1 7507                <1>     jne .notQuoteToCount
    93 000011D3 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    94 000011D5 E9F4FFFFFF          <1>     jmp .countQuotes
    95                              <1> .notQuoteToCount:
    96 000011DA 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    97 000011DC 75F0                <1>     jne .countQuotes
    98 000011DE 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    99 000011E1 488D3D87F0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   100                              <1> .getChar:
   101 000011E8 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   102 000011E9 3C22                <1>     cmp al, '"'     ;Is char a quote?
   103 000011EB 750E                <1>     jne .notQuote
   104 000011ED FECD                <1>     dec ch          ;We have a quote, now decrement
   105 000011EF 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   106                              <1> .searchForClosingQuote:
   107                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   108 000011F1 AA                  <1>     stosb   ;Store char and inc rdi
   109 000011F2 FEC1                <1>     inc cl
   110 000011F4 AC                  <1>     lodsb   ;Get next char
   111 000011F5 3C22                <1>     cmp al, '"'
   112 000011F7 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   113 000011F9 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   114                              <1> .notQuote:
   115 000011FB E877060000          <1>     call peelRedir      ;Intervene redir if needed
   116 00001200 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   117 00001202 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   118 00001204 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   119                              <1> .pipeHandle:
   120                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   121 00001206 0F8434030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   122                              <1> .notRedir:
   123 0000120C AA                  <1>     stosb       ;Store char and advance rdi
   124 0000120D 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   125 0000120F 7404                <1>     je .exit
   126 00001211 FEC1                <1>     inc cl      ;Increment char count
   127 00001213 EBD3                <1>     jmp short .getChar    ;If not, get next char
   128                              <1> .exit:
   129 00001215 880D53F0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   130                              <1>     return
    13                              <2> %%_ret:
    14 0000121B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> makeCmdString:
   133                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   134                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   135                              <1> ; Copies into the psp.
   136                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   137 0000121C 488D354CF0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   138 00001223 31C9                <1>     xor ecx, ecx
   139 00001225 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   140                              <1> .countQuotes:
   141 00001228 AC                  <1>     lodsb
   142 00001229 3C22                <1>     cmp al, '"'
   143 0000122B 7507                <1>     jne .notQuoteToCount
   144 0000122D FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   145 0000122F E9F4FFFFFF          <1>     jmp .countQuotes
   146                              <1> .notQuoteToCount:
   147 00001234 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   148 00001236 75F0                <1>     jne .countQuotes
   149 00001238 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   150 0000123B 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   151                              <1> .getChar:
   152 00001242 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   153 00001243 3C22                <1>     cmp al, '"'     ;Is char a quote?
   154 00001245 750E                <1>     jne .notQuote
   155 00001247 FECD                <1>     dec ch          ;We have a quote, now decrement
   156 00001249 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   157                              <1> .searchForClosingQuote:
   158                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   159 0000124B AA                  <1>     stosb   ;Store char and inc rdi
   160 0000124C FEC1                <1>     inc cl
   161 0000124E AC                  <1>     lodsb   ;Get next char
   162 0000124F 3C22                <1>     cmp al, '"'
   163 00001251 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   164 00001253 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   165                              <1> .notQuote:
   166 00001255 3C7C                <1>     cmp al, "|"
   167 00001257 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   168 00001259 B00D                <1>     mov al, CR          ;Store the pipe char
   169 0000125B 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   170                              <1> .notPipe:
   171 0000125E AA                  <1>     stosb       ;Store char and advance rdi
   172 0000125F 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   173 00001261 7404                <1>     je .exit
   174 00001263 FEC1                <1>     inc cl      ;Increment char count
   175 00001265 EBDB                <1>     jmp short .getChar    ;If not, get next char
   176                              <1> .exit:
   177 00001267 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   178 0000126A 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   179 00001271 803E0D              <1>     cmp byte [rsi], CR  
   180                              <1>     return
    13                              <2> %%_ret:
    14 00001274 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   181                              <1> 
   182                              <1> analyseCmdline:
   183                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   184                              <1> ; processes the command name into the FCB.  
   185 00001275 C605C2F0FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   186                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   187 0000127C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   188 00001283 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   189 00001286 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   190 0000128A 8A059AEDFFFF        <1>     mov al, byte [switchChar]
   191 00001290 F2AE                <1>     repne scasb                     ;Scan for the switch char
   192 00001292 7506                <1>     jne .noSwitchFnd
   193 00001294 F61518EEFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   194                              <1> .noSwitchFnd:
   195 0000129A E8A3310000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   196 0000129F 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   197                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012A2 74(74)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   198 000012A4 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   199                              <1> .plp:
   200 000012A7 488D3D60EEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   201 000012AE B801290000          <1>     mov eax, 2901h
   202 000012B3 CD21                <1>     int 21h
   203 000012B5 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   204 000012B7 0F8402010000        <1>     je .exitBadDrv
   205                              <1> .trailingDotLp:
   206                              <1> ;Reverse along trailing dots!
   207 000012BD 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   208 000012C1 7505                <1>     jne .noTrailingDots
   209 000012C3 48FFCE              <1>     dec rsi
   210 000012C6 EBF5                <1>     jmp short .trailingDotLp
   211                              <1> .noTrailingDots:
   212 000012C8 8A055BEDFFFF        <1>     mov al, byte [pathSep]  
   213 000012CE 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   214 000012D0 7525                <1>     jne .notPs
   215 000012D2 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   216 000012D5 AC                  <1>     lodsb   ;Get this char
   217 000012D6 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   218 000012D9 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   219 000012DB 7217                <1>     jb .delimfnd    ;Also a delimiter
   220 000012DD 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   221 000012DF 7413                <1>     je .delimfnd
   222 000012E1 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   223 000012E3 740F                <1>     je .delimfnd
   224 000012E5 3C2E                <1>     cmp al, byte "."
   225 000012E7 740B                <1>     je .delimfnd
   226 000012E9 3C22                <1>     cmp al, byte '"'
   227 000012EB 7407                <1>     je .delimfnd
   228 000012ED E85E310000          <1>     call isALdelimiter  ;Is this a delim char?
   229 000012F2 75B3                <1>     jne .plp            ;If not, we loop again
   230                              <1> .delimfnd:
   231 000012F4 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   232                              <1> .notPs:
   233                              <1> ;Now we have reached the end of the command, rsi points to the first char
   234                              <1> ; after the command, whether a delimiter or not.
   235 000012F7 4889F1              <1>     mov rcx, rsi
   236 000012FA 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   237 000012FD 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   238 00001300 488D3DE8EFFFFF      <1>     lea rdi, cmdPathSpec
   239 00001307 F3A4                <1>     rep movsb
   240 00001309 30C0                <1>     xor al, al
   241 0000130B AA                  <1>     stosb   ;Store a terminating null
   242 0000130C 4887DE              <1>     xchg rbx, rsi
   243                              <1> ;Now we build FCBs for the arguments!
   244 0000130F 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   245 00001316 E893000000          <1>     call .skipAndCheckCR
   246 0000131B 745B                <1>     je .setupCmdVars
   247 0000131D C60588EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   248 00001324 4889F0              <1>     mov rax, rsi
   249 00001327 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   250 0000132A 88057DEDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   251 00001330 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   252 00001334 B801290000          <1>     mov eax, 2901h
   253 00001339 CD21                <1>     int 21h
   254 0000133B 88056DEDFFFF        <1>     mov byte [arg1FCBret], al
   255                              <1> .skipArg:
   256 00001341 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   257 00001342 3C0D                <1>     cmp al, CR
   258 00001344 7432                <1>     je .setupCmdVars
   259 00001346 E805310000          <1>     call isALdelimiter
   260 0000134B 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   261 0000134D E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   262 00001352 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   263 00001354 C60554EDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   264 0000135B 4889F0              <1>     mov rax, rsi            
   265 0000135E 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   266 00001361 880549EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   267 00001367 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   268 0000136B B801290000          <1>     mov eax, 2901h
   269 00001370 CD21                <1>     int 21h
   270 00001372 880539EDFFFF        <1>     mov byte [arg2FCBret], al
   271                              <1> .setupCmdVars:
   272                              <1> ;Before returning, we copy the command name to cmdName 
   273 00001378 488D3D70EFFFFF      <1>     lea rdi, cmdPathSpec
   274 0000137F E875310000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   275 00001384 E894300000          <1>     call strlen ;Get the length of the null terminated final path componant
   276 00001389 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   277 0000138F 7726                <1>     ja .exitBad     ;Return error
   278 00001391 4889FE              <1>     mov rsi, rdi
   279 00001394 488D3DA3EFFFFF      <1>     lea rdi, cmdName
   280 0000139B FFC9                <1>     dec ecx ;Minus the terminating null
   281 0000139D 880F                <1>     mov byte [rdi], cl ;Store the length here
   282 0000139F 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   283                              <1> .cpCmdName:
   284 000013A2 AC                  <1>     lodsb
   285 000013A3 E87F300000          <1>     call ucChar ;Uppercase the char
   286 000013A8 AA                  <1>     stosb
   287 000013A9 FFC9                <1>     dec ecx
   288 000013AB 75F5                <1>     jnz .cpCmdName
   289                              <1>     return
    13                              <2> %%_ret:
    14 000013AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> .skipAndCheckCR:
   291                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   292 000013AE E88F300000          <1>     call skipDelimiters ;Go to the next char in the input line
   293 000013B3 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   294                              <1>     return
    13                              <2> %%_ret:
    14 000013B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   295                              <1> .exitBad:
   296 000013B7 C60580EFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   297                              <1>     return
    13                              <2> %%_ret:
    14 000013BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> .exitBadDrv:
   299 000013BF C60578EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   300 000013C6 E83F0A0000          <1>     call badDriveError
   301                              <1>     return
    13                              <2> %%_ret:
    14 000013CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> 
   303                              <1> doCommandLine:
   304                              <1>     ;The following check accounts for the end of a piped command
   305 000013CC 803D6BEFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   306 000013D3 0F8467010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   307 000013D9 803D5EEFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   308 000013E0 0F845D0A0000        <1>     je badCmdError
   309 000013E6 803D51EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   310                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013ED 74(CB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   311 000013EF 488D35F9EEFFFF      <1>     lea rsi, cmdPathSpec
   312 000013F6 0FB71DF2EEFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   313 000013FD 80FF3A              <1>     cmp bh, ":"
   314 00001400 7520                <1>     jne .noDriveSpecified
   315 00001402 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   316 00001404 E81E300000          <1>     call ucChar     ;Uppercase al
   317 00001409 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   318                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   319 0000140B 803D2CEFFFFF02      <1>     cmp byte [cmdName], 2
   320 00001412 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   321 00001414 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   322 00001416 E8D82F0000          <1>     call setDrive
   323                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000141B 74(CB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   324 0000141D E9E8090000          <1>     jmp badDriveError
   325                              <1> .noDriveSpecified:
   326                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   327 00001422 488D1D44EEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   328 00001429 488D350EEFFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   329 00001430 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   330 00001435 BAFFFF0000          <1>     mov edx, 0FFFFh
   331 0000143A B5FF                <1>     mov ch, -1
   332 0000143C CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   333 0000143E B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   334 00001443 BAFFFF0000          <1>     mov edx, 0FFFFh
   335 00001448 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   336 0000144A CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   337                              <1>             ;        al = 0  if the command should be executed as usual
   338 0000144C 84C0                <1>     test al, al
   339 0000144E 7444                <1>     jz .executeInternal
   340                              <1>     ;Here we execute externally and return to the prompt
   341                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   342 00001450 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   343 00001457 488D35E0EEFFFF      <1>     lea rsi, cmdName        
   344 0000145E B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   345 00001463 BAFFFF0000          <1>     mov edx, 0FFFFh
   346 00001468 B5FF                <1>     mov ch, -1
   347 0000146A CD2F                <1>     int 2Fh
   348 0000146C 803DCBEEFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   349                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001473 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001475 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   350                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   351                              <1>     ; is an external command that is in the CD or in the PATH.
   352                              <1>     ;Should not be used for this purpose but it is here...
   353 00001476 E8C6050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   354 0000147B 488D35BCEEFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   355 00001482 AC                  <1>     lodsb                   ;Get the name length
   356 00001483 0FB6C8              <1>     movzx ecx, al
   357 00001486 488D3D62EEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   358 0000148D F3A4                <1>     rep movsb   
   359 0000148F 31C0                <1>     xor eax, eax
   360 00001491 AA                  <1>     stosb   ;Store null terminator
   361 00001492 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   362                              <1> .executeInternal:
   363 00001494 E8A8050000          <1>     call pullCommandline    ;Now pull the tail down
   364 00001499 488D3D4FEEFFFF      <1>     lea rdi, cmdPathSpec
   365 000014A0 E8782F0000          <1>     call strlen ;Get the length of the input command
   366 000014A5 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   367 000014A7 380D91EEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   368 000014AD 0F858F250000        <1>     jne launchChild     ;If not, a path was specified, exit!
   369                              <1> .executeInternal2:
   370                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   371 000014B3 488D1DE4F2FFFF      <1>     lea rbx, functionTable
   372                              <1> .nextEntry:
   373 000014BA 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   374 000014BD 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   375 000014C0 0F847C250000        <1>     je launchChild      ;If so, check externally now
   376 000014C6 380D72EEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   377 000014CC 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   378                              <1>     ;Here they have the same length so lets see if the name is the same
   379 000014CE 56                  <1>     push rsi
   380                              <1>     ;ecx has the length to compare
   381 000014CF 51                  <1>     push rcx
   382 000014D0 488D7301            <1>     lea rsi, qword [rbx + 1]
   383 000014D4 488D3D64EEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   384 000014DB F3A6                <1>     rep cmpsb   ;Check the strings are equal
   385 000014DD 59                  <1>     pop rcx
   386 000014DE 5E                  <1>     pop rsi
   387 000014DF 751E                <1>     jne .gotoNextEntry
   388                              <1>     ;Here it was found both strings are equal
   389 000014E1 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   390 000014E6 480FB71F            <1>     movzx rbx, word [rdi]
   391 000014EA 488D3D0FEBFFFF      <1>     lea rdi, startLbl
   392 000014F1 4801FB              <1>     add rbx, rdi
   393 000014F4 C60512EBFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   394 000014FB FFD3                <1>     call rbx        ;Call the internal function!
   395 000014FD EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   396                              <1> .gotoNextEntry:
   397 000014FF 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   398 00001506 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   399 00001509 EBAF                <1>     jmp short .nextEntry
   400                              <1> 
   401                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   402                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   403                              <1> ;Can depend on RSP here because I fixed DOS.
   404 0000150B 488B25F3EAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   405 00001512 E8D1310000          <1>     call resetIDTentries
   406 00001517 B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   407 0000151C CD21                <1>     int 21h
   408 0000151E 668905E8EAFFFF      <1>     mov word [returnCode], ax
   409 00001525 84E4                <1>     test ah, ah     ;Regular exit
   410 00001527 0F845AFCFFFF        <1>     jz commandMain.okRet
   411 0000152D 80FC03              <1>     cmp ah, 3       ;TSR exit
   412 00001530 0F8451FCFFFF        <1>     je commandMain.okRet
   413                              <1>     ;Here we ask if we want to stop any batch processing, ret to 2Eh etc.
   414                              <1>     ;For now, just clean redirs and fully reset!
   415 00001536 E83F000000          <1>     call cleanupRedirs
   416 0000153B E9A1FBFFFF          <1>     jmp commandMain
   417                              <1>     ;cmp ah, 1       ;Was this Ctrl^C?
   418                              <1>     ;je commandMain
   419                              <1>     ;jmp commandMain  ;If we aborted, fully reset!
   420                              <1> 
   421                              <1> hardSynErr:
   422                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   423 00001540 E8A1080000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   424 00001545 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   425                              <1> redirFailure:
   426 0000154A 488D1563F9FFFF      <1>     lea rdx, redirErrMsg
   427 00001551 B913000000          <1>     mov ecx, redirErrMsgL
   428 00001556 EB0C                <1>     jmp short redirPipeFailureCommon
   429                              <1> pipeFailure:
   430 00001558 488D153EF9FFFF      <1>     lea rdx, pipeErrMsg
   431 0000155F B917000000          <1>     mov ecx, pipeErrMsgL
   432                              <1> redirPipeFailureCommon:
   433                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   434                              <1> ;This routine tries to close whatever handles are not -1 and delete
   435                              <1> ; pipe files if the pipe count is not 0.
   436                              <1> ;It resets all variables and jumps to reset the stack!
   437 00001564 B800400000          <1>     mov eax, 4000h  ;Write handle
   438 00001569 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   439 0000156E CD21                <1>     int 21h
   440                              <1> .noPrint:
   441 00001570 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   442 00001575 E967FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   443                              <1> 
   444                              <1> cleanupRedirs:
   445                              <1> ;Cleans all active redirections, returning to the saved state.
   446                              <1> ;Deletes any pipe files, leaves any redir out files.
   447                              <1> ;Resets the internal vars
   448 0000157A 0FB70527EBFFFF      <1>     movzx eax, word [redirSTDIN]
   449 00001581 0FB7151AEBFFFF      <1>     movzx edx, word [pipeSTDIN]
   450 00001588 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   451 0000158A E8CC000000          <1>     call .closeAndReplace
   452 0000158F 0FB70514EBFFFF      <1>     movzx eax, word [redirSTDOUT]
   453 00001596 0FB71507EBFFFF      <1>     movzx edx, word [pipeSTDOUT]
   454 0000159D FFC3                <1>     inc ebx         ;Select STDOUT for closing
   455 0000159F E8B7000000          <1>     call .closeAndReplace
   456 000015A4 66C705F9EAFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   457 000015AD 0FB71DF4EAFFFF      <1>     movzx ebx, word [redirSTDIN]
   458 000015B4 E892000000          <1>     call .closeHandle
   459                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   460 000015B9 66C705E6EAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   461 000015C2 0FB71DE1EAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   462 000015C9 E87D000000          <1>     call .closeHandle
   463 000015CE 66C705D3EAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   464 000015D7 0FB71DC4EAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   465 000015DE E868000000          <1>     call .closeHandle
   466 000015E3 66C705B6EAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   467 000015EC 0FB71DB1EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   468 000015F3 E853000000          <1>     call .closeHandle
   469 000015F8 66C705A3EAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   470 00001601 C60599EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   471 00001608 488D15DBEDFFFF      <1>     lea rdx, qword [pipe1Filespec]
   472 0000160F 803A00              <1>     cmp byte [rdx], 0
   473 00001612 7407                <1>     jz .checkOld
   474 00001614 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   475 00001619 CD21                <1>     int 21h
   476                              <1> .checkOld:
   477 0000161B 488D1517EEFFFF      <1>     lea rdx, qword [pipe2Filespec]
   478 00001622 803A00              <1>     cmp byte [rdx],0
   479 00001625 7407                <1>     jz .pipeNamesComplete
   480 00001627 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   481 0000162C CD21                <1>     int 21h
   482                              <1> .pipeNamesComplete:
   483 0000162E 31C0                <1>     xor eax, eax
   484                              <1>     ;Invalidate the pointers and the paths too
   485 00001630 48890551EEFFFF      <1>     mov qword [newPipe], rax
   486 00001637 48890552EEFFFF      <1>     mov qword [oldPipe], rax
   487 0000163E 8905A6EDFFFF        <1>     mov dword [pipe1Filespec], eax
   488 00001644 8905EFEDFFFF        <1>     mov dword [pipe2Filespec], eax
   489                              <1>     return
    13                              <2> %%_ret:
    14 0000164A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   490                              <1> 
   491                              <1> .closeHandle:
   492 0000164B 81FBFFFFFFFF        <1>     cmp ebx, -1
   493                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001651 74(4A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   494 00001653 B8003E0000          <1>     mov eax, 3E00h
   495 00001658 CD21                <1>     int 21h
   496                              <1>     return
    13                              <2> %%_ret:
    14 0000165A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   497                              <1> .closeAndReplace:
   498                              <1> ;Input: ax = one possible handle, dx = second possible handle
   499                              <1> ;       bx = handle to close and copy ax/dx into
   500                              <1> ;Output: Handle intervened on. bx preserved
   501 0000165B C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   502 0000165E 09D0                <1>     or eax, edx     ;Form packed
   503 00001660 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   504                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001665 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   505 00001667 E8DFFFFFFF          <1>     call .closeHandle
   506 0000166C 663DFFFF            <1>     cmp ax, -1      
   507 00001670 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   508 00001674 53                  <1>     push rbx
   509 00001675 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   510 00001678 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   511 0000167D CD21                <1>     int 21h
   512 0000167F 5B                  <1>     pop rbx
   513                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001680 73(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   514                              <1>     ;Else we now try to force con to open!
   515 00001682 E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   516 00001687 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   517 0000168C 488D156EF8FFFF      <1>     lea rdx, conName
   518 00001693 CD21                <1>     int 21h
   519                              <1>     return
    13                              <2> %%_ret:
    14 00001695 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> cleanRedirOut:
   522                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   523                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   524                              <1> ; particular cases like launching bat files which needs special handling in 
   525                              <1> ; that all redirs need to be completely removed.
   526 00001696 66813D0BEAFFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   527                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000169F 74(95)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   528 000016A1 0FB71D02EAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   529 000016A8 B901000000          <1>     mov ecx, 1      ;STDOUT
   530 000016AD B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   531 000016B2 CD21                <1>     int 21h
   532 000016B4 0FB71DEFE9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   533 000016BB B8003E0000          <1>     mov eax, 3E00h  
   534 000016C0 CD21                <1>     int 21h
   535 000016C2 66C705DFE9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   536 000016CB 488D15C9ECFFFF      <1>     lea rdx, rdrOutFilespec
   537 000016D2 B800410000          <1>     mov eax, 4100h      ;Del stdout file
   538 000016D7 CD21                <1>     int 21h
   539 000016D9 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   540                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   541                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   542                              <1>     return
    13                              <2> %%_ret:
    14 000016DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> 
   544                              <1> advanceRedir:
   545                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   546                              <1> ;Close stdin redir then stdout redir. 
   547 000016DD F605C2E9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   548 000016E4 0F8585000000        <1>     jnz .redirIn
   549 000016EA F605B0E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   550 000016F1 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   551 000016F7 0FBF05A4E9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   552 000016FE 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   553 00001703 0F84EB000000        <1>     je .pipeOut              
   554                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   555 00001709 0FB71D92E9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   556 00001710 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   557 00001712 B800460000          <1>     mov eax, 4600h
   558 00001717 CD21                <1>     int 21h
   559 00001719 0F8239FEFFFF        <1>     jc pipeFailure
   560 0000171F B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   561 00001724 CD21                <1>     int 21h
   562 00001726 0F822CFEFFFF        <1>     jc pipeFailure
   563 0000172C 488B155DEDFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   564 00001733 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   565 00001738 CD21                <1>     int 21h
   566 0000173A 0F8218FEFFFF        <1>     jc pipeFailure
   567 00001740 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   568 00001743 66C70556E9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   569                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   570                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   571                              <1>     ;Else exit!
   572 0000174C 0FBF0551E9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   573 00001753 3DFFFFFFFF          <1>     cmp eax, -1
   574 00001758 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   575 0000175E C6053CE9FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   576 00001765 F6053BE9FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   577 0000176C 753D                <1>     jnz .redirOut               ;Go for it if so!
   578                              <1>     return
    13                              <2> %%_ret:
    14 0000176E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> .redirIn:
   580                              <1> ;Here we clean redirIn
   581 0000176F 0FB71D32E9FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   582 00001776 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   583 00001778 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   584 0000177D CD21                <1>     int 21h
   585 0000177F 0F82C5FDFFFF        <1>     jc redirFailure
   586 00001785 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   587 0000178A CD21                <1>     int 21h
   588 0000178C 0F82B8FDFFFF        <1>     jc redirFailure
   589 00001792 66C7050DE9FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   590 0000179B C60504E9FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   591 000017A2 F605F8E8FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   592 000017A9 7549                <1>     jnz .pipeOut
   593                              <1> .redirOut:
   594 000017AB F605F5E8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   595                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017B2 74(6E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   596                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   597 000017B4 F605E6E8FFFFFF      <1>     test byte [pipeFlag], -1
   598 000017BB 7537                <1>     jnz short .pipeOut
   599 000017BD 0FB71DE6E8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   600 000017C4 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   601 000017C9 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   602 000017CE CD21                <1>     int 21h
   603 000017D0 0F8274FDFFFF        <1>     jc redirFailure
   604 000017D6 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   605 000017DB CD21                <1>     int 21h
   606 000017DD 0F8267FDFFFF        <1>     jc redirFailure
   607 000017E3 66C705BEE8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   608 000017EC C605B4E8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   609                              <1>     return
    13                              <2> %%_ret:
    14 000017F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   610                              <1> .pipeOut:
   611                              <1> ;Duplicate STDIN to save across pipe
   612 000017F4 0FBF05A9E8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   613 000017FB 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   614                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001800 74(F3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   615 00001802 B800450000          <1>     mov eax, 4500h
   616 00001807 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   617 00001809 CD21                <1>     int 21h
   618 0000180B 0F8247FDFFFF        <1>     jc pipeFailure
   619 00001811 6689058AE8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   620                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   621 00001818 B800460000          <1>     mov eax, 4600h
   622 0000181D 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   623 0000181F FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   624 00001821 CD21                <1>     int 21h
   625 00001823 0F822FFDFFFF        <1>     jc pipeFailure
   626                              <1> ;Now return the original stdout to stdout
   627 00001829 89D9                <1>     mov ecx, ebx
   628 0000182B 0FB71D72E8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   629 00001832 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   630 00001837 CD21                <1>     int 21h
   631 00001839 0F8219FDFFFF        <1>     jc pipeFailure
   632                              <1> ;Now close the DUP'ed STDOUT
   633 0000183F B8003E0000          <1>     mov eax, 3E00h
   634 00001844 CD21                <1>     int 21h
   635 00001846 0F820CFDFFFF        <1>     jc pipeFailure
   636                              <1> ;Finally unwind STDIN to the beginning of the file
   637 0000184C B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   638 00001851 31DB                <1>     xor ebx, ebx    ;STDIN handle
   639 00001853 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   640 00001855 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   641 00001857 CD21                <1>     int 21h
   642 00001859 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   643 0000185F 488B1522ECFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   644 00001866 48891523ECFFFF      <1>     mov qword [oldPipe], rdx
   645 0000186D 66C7052EE8FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   646                              <1>     return
    13                              <2> %%_ret:
    14 00001876 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   647                              <1> 
   648                              <1> 
   649                              <1> peelRedir:
   650                              <1> ;Checks and sets up redir as appropriate
   651                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   652                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   653                              <1> ;Output: ZF=NZ => No redir
   654                              <1> ;        ZF=ZY => Redir
   655                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   656                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   657 00001877 51                  <1>     push rcx
   658 00001878 57                  <1>     push rdi
   659 00001879 3C3C                <1>     cmp al, "<"
   660 0000187B 740C                <1>     je .inputRedir
   661 0000187D 3C3E                <1>     cmp al, ">"
   662 0000187F 7427                <1>     je .outputRedir
   663 00001881 3C7C                <1>     cmp al, "|"
   664 00001883 7441                <1>     je .pipeSetup
   665 00001885 F8                  <1>     clc
   666                              <1> .redirExit:
   667 00001886 5F                  <1>     pop rdi
   668 00001887 59                  <1>     pop rcx
   669                              <1>     return
    13                              <2> %%_ret:
    14 00001888 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   670                              <1> .inputRedir:
   671 00001889 C60516E8FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   672 00001890 488D3DB5EAFFFF      <1>     lea rdi, rdrInFilespec
   673                              <1> .redirCommon:
   674 00001897 E8A62B0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   675 0000189C E8D22C0000          <1>     call cpDelimPathToBufz
   676 000018A1 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   677 000018A4 30C0                <1>     xor al, al  ;Clear the ZF flag
   678 000018A6 EBDE                <1>     jmp short .redirExit
   679                              <1> .outputRedir:
   680 000018A8 C605F8E7FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   681 000018AF 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   682 000018B2 7509                <1>     jne .notDouble
   683 000018B4 FE05EDE7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   684 000018BA 48FFC6              <1>     inc rsi ;Go past it too
   685                              <1> .notDouble:
   686 000018BD 488D3DD7EAFFFF      <1>     lea rdi, rdrOutFilespec
   687 000018C4 EBD1                <1>     jmp short .redirCommon
   688                              <1> .pipeSetup:
   689 000018C6 56                  <1>     push rsi    ;Save rsi pointing to char past |
   690 000018C7 E8762B0000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   691 000018CC 803E7C              <1>     cmp byte [rsi], "|" 
   692 000018CF 7403                <1>     je .badFnd
   693 000018D1 803E0D              <1>     cmp byte [rsi], CR
   694                              <1> .badFnd:
   695 000018D4 5E                  <1>     pop rsi
   696 000018D5 F9                  <1>     stc
   697 000018D6 EBAE                <1>     jmp short .redirExit
   698                              <1> 
   699                              <1> setupRedirandPipes:
   700                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   701                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   702 000018D8 0F8484000000        <1>     jz .redirIn
   703 000018DE 488D1505EBFFFF      <1>     lea rdx, pipe1Filespec
   704 000018E5 803A00              <1>     cmp byte [rdx], 0
   705 000018E8 7410                <1>     jz .pathFound
   706 000018EA 488D1548EBFFFF      <1>     lea rdx, pipe2Filespec
   707 000018F1 803A00              <1>     cmp byte [rdx], 0
   708 000018F4 0F855EFCFFFF        <1>     jnz pipeFailure
   709                              <1> .pathFound:
   710 000018FA 48891587EBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   711 00001901 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   712 00001906 BB01000000          <1>     mov ebx, 1
   713 0000190B CD21                <1>     int 21h
   714 0000190D 0F8245FCFFFF        <1>     jc pipeFailure
   715 00001913 6689058AE7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   716 0000191A E8E02A0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   717 0000191F 0441                <1>     add al, "A"
   718 00001921 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   719 00001926 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   720 00001928 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   721 0000192A 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   722 0000192C B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   723 00001931 CD21                <1>     int 21h
   724 00001933 0F821FFCFFFF        <1>     jc pipeFailure
   725                              <1>     ;AX has the handle for this file now, this will become STDOUT
   726                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   727 00001939 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   728 0000193C B901000000          <1>     mov ecx, 1
   729 00001941 B800460000          <1>     mov eax, 4600h
   730 00001946 CD21                <1>     int 21h
   731 00001948 0F820AFCFFFF        <1>     jc pipeFailure
   732 0000194E B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   733 00001953 CD21                <1>     int 21h
   734 00001955 0F82FDFBFFFF        <1>     jc pipeFailure
   735 0000195B C6053FE7FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   736                              <1> .redirIn:
   737                              <1> ;Now check if any other redir needs to be setup
   738                              <1> ;Checks and sets up redir as appropriate.
   739                              <1>     ;Setup the redir here for STDIN
   740 00001962 F6053DE7FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   741 00001969 7449                <1>     jz .redirOut
   742 0000196B 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   743 0000196D B800450000          <1>     mov eax, 4500h
   744 00001972 CD21                <1>     int 21h
   745 00001974 0F82D0FBFFFF        <1>     jc redirFailure
   746 0000197A 66890527E7FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   747 00001981 488D15C4E9FFFF      <1>     lea rdx, rdrInFilespec
   748 00001988 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   749 0000198D CD21                <1>     int 21h
   750 0000198F 0F82B5FBFFFF        <1>     jc redirFailure
   751 00001995 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   752 00001997 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   753 0000199A B800460000          <1>     mov eax, 4600h
   754 0000199F CD21                <1>     int 21h
   755 000019A1 0F82A3FBFFFF        <1>     jc redirFailure
   756 000019A7 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   757 000019AC CD21                <1>     int 21h
   758 000019AE 0F8296FBFFFF        <1>     jc redirFailure
   759                              <1> .redirOut:
   760 000019B4 F605ECE6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   761                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000019BB 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000019BD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   762 000019BE 803DDFE6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   763                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019C5 75(BD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   764                              <1>     ;Else setup the redir here for STDOUT
   765 000019C7 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   766 000019CC B800450000          <1>     mov eax, 4500h
   767 000019D1 CD21                <1>     int 21h
   768 000019D3 0F8271FBFFFF        <1>     jc redirFailure
   769 000019D9 668905CAE6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   770 000019E0 488D15B4E9FFFF      <1>     lea rdx, rdrOutFilespec
   771 000019E7 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   772 000019EC CD21                <1>     int 21h
   773 000019EE 730F                <1>     jnc .fileExists
   774 000019F0 B8003C0000          <1>     mov eax, 3C00h
   775 000019F5 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   776 000019F7 CD21                <1>     int 21h
   777 000019F9 0F824BFBFFFF        <1>     jc redirFailure
   778                              <1> .fileExists:
   779 000019FF B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   780 00001A04 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   781 00001A07 B800460000          <1>     mov eax, 4600h  ;DUP2
   782 00001A0C CD21                <1>     int 21h
   783 00001A0E 0F8236FBFFFF        <1>     jc redirFailure
   784 00001A14 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   785 00001A19 CD21                <1>     int 21h
   786 00001A1B 0F8229FBFFFF        <1>     jc redirFailure
   787 00001A21 803D7FE6FFFF01      <1>     cmp byte [redirOut], 1
   788                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A28 74(BD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   789                              <1>     ;Here we move the file pointer to the end of the file
   790 00001A2A 31D2                <1>     xor edx, edx    ;Low order 32 bits
   791 00001A2C 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   792 00001A2E BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   793 00001A33 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   794 00001A38 CD21                <1>     int 21h
   795 00001A3A 0F820AFBFFFF        <1>     jc redirFailure
   796                              <1>     return
    13                              <2> %%_ret:
    14 00001A40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   797                              <1> 
   798                              <1> 
   799                              <1> pullCommandline:
   800                              <1> ;This command pulls the command tail down, removing the whole launch command
   801 00001A41 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   802                              <1> ;Skip leading separators
   803                              <1> .pctSkipLeading:
   804 00001A48 AC                  <1>     lodsb   ;Get first char
   805 00001A49 E8022A0000          <1>     call isALdelimiter
   806 00001A4E 74F8                <1>     je .pctSkipLeading
   807 00001A50 48FFCE              <1>     dec rsi
   808                              <1>     ;rsi points to the start of the command
   809 00001A53 488D3D95E8FFFF      <1>     lea rdi, cmdPathSpec
   810 00001A5A E8BE290000          <1>     call strlen ;Get the length of the command
   811 00001A5F FFC9                <1>     dec ecx ;Minus the terminating null
   812 00001A61 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   813 00001A64 280D43E6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   814 00001A6A 280D40E6FFFF        <1>     sub byte [arg2Off], cl
   815 00001A70 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   816 00001A72 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   817                              <1> .pctPullChars:
   818 00001A79 AC                  <1>     lodsb
   819 00001A7A AA                  <1>     stosb
   820 00001A7B 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   821 00001A7D 7404                <1>     je .pctExit
   822 00001A7F FFC1                <1>     inc ecx     ;Increment count
   823 00001A81 EBF6                <1>     jmp short .pctPullChars 
   824                              <1> .pctExit:
   825 00001A83 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   826                              <1>     return
    13                              <2> %%_ret:
    14 00001A8A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   827                              <1> 
   828                              <1> getSetMainState:
   829                              <1> ;Resets the buffers lengths, sets stringops and gets the pspptr in r8
   830 00001A8B FC                  <1>     cld ;Ensure stringops are done the right way
   831 00001A8C C605D6E6FFFF80      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
   832 00001A93 C60551E7FFFF80      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
   833 00001A9A C605CCE7FFFF80      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
   834 00001AA1 4C8B0567E5FFFF      <1>     mov r8, qword [pspPtr]              ;Reset the pspPtr
   835                              <1>     return
    13                              <2> %%_ret:
    14 00001AA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   836                              <1> 
   837                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   838                              <1> ;Input: rsi points to the count byte of a command line
   839 00001AA9 4150                <1>     push r8
   840 00001AAB 4151                <1>     push r9
   841 00001AAD B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   842 00001AAF CD21                <1>     int 21h
   843 00001AB1 52                  <1>     push rdx    ;Save on the stack
   844 00001AB2 488D1D47E4FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   845 00001AB9 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   846 00001ABB CD21                <1>     int 21h
   847 00001ABD 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   848 00001AC0 4989D9              <1>     mov r9, rbx
   849 00001AC3 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   850 00001ACA B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   851 00001ACF F348A5              <1>     rep movsq   ;Copy command line over
   852                              <1>     ;call doCommandLine
   853 00001AD2 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   854 00001AD3 B450                <1>     mov ah, 50h ;Set Current PSP
   855 00001AD5 CD21                <1>     int 21h
   856 00001AD7 4159                <1>     pop r9
   857 00001AD9 4158                <1>     pop r8
   858 00001ADB 48CF                <1>     iretq
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file! Called with rdx pointing to the filespec :)
     5 00001ADD BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     6 00001AE2 B800480000          <1>     mov eax, 4800h
     7 00001AE7 CD21                <1>     int 21h
     8 00001AE9 730A                <1>     jnc .bbAlloced
     9 00001AEB E8ED020000          <1>     call badNoMemError  ;Print not enough mem error
    10 00001AF0 E97BFAFFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    11                              <1> .bbAlloced:
    12 00001AF5 488905B7E5FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    13 00001AFC 4889C3              <1>     mov rbx, rax
    14 00001AFF 4889DF              <1>     mov rdi, rbx
    15 00001B02 31C0                <1>     xor eax, eax
    16 00001B04 B9B2000000          <1>     mov ecx, bbMaxAlloc     
    17 00001B09 F3AA                <1>     rep stosb               ;Clean the arena
    18 00001B0B 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    19 00001B0E 8A058AE5FFFF        <1>     mov al, byte [echoFlg]
    20 00001B14 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    21 00001B17 B8FFFFFFFF          <1>     mov eax, -1
    22 00001B1C B905000000          <1>     mov ecx, 5
    23 00001B21 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    24 00001B25 F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    25 00001B27 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    26 00001B2D 488D35BBE7FFFF      <1>     lea rsi, cmdPathSpec
    27 00001B34 E8CB280000          <1>     call strcpy     ;Leave rdi past the terminating null
    28 00001B39 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    29 00001B41 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    30 00001B48 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    31 00001B49 F3A4                <1>     rep movsb   ;Copy the command tail over
    32                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    33                              <1>     ; terminating null. All good!
    34 00001B4B 5E                  <1>     pop rsi 
    35                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    36 00001B4C B901000000          <1>     mov ecx, 1  ;Start with argument 1
    37                              <1> .bbFndLp:
    38 00001B51 E8EC280000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    39 00001B56 E8E7000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    40 00001B5B 7428                <1>     je .bbArgsDone      ;Yes
    41                              <1>     ;Add the entry to the table!
    42 00001B5D 4889F0              <1>     mov rax, rsi
    43 00001B60 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    44 00001B64 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    45 00001B67 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    46                              <1>     
    47 00001B6C FFC1                <1>     inc ecx
    48 00001B6E 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    49 00001B74 740F                <1>     je .bbArgsDone
    50                              <1> .bbFndLp2:
    51 00001B76 AC                  <1>     lodsb   ;Getch
    52 00001B77 E8D4280000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    53 00001B7C 74D3                <1>     je .bbFndLp
    54 00001B7E E8BF000000          <1>     call .bbCheckEndOfCmdLine
    55 00001B83 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    56                              <1> .bbArgsDone:
    57                              <1> ;Now copy the batch name, need to figure the full path to it.
    58 00001B85 488D3563E7FFFF      <1>     lea rsi, cmdPathSpec
    59 00001B8C 488D3D28E5FFFF      <1>     lea rdi, batFile
    60 00001B93 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    61 00001B96 80FC3A              <1>     cmp ah, ":"
    62 00001B99 746D                <1>     je .bbdrvGiven
    63 00001B9B 3A0588E4FFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    64 00001BA1 7458                <1>     je .bbCDrvAbs
    65                              <1> ;Current drive relative
    66 00001BA3 E857280000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    67 00001BA8 0441                <1>     add al, "A"
    68 00001BAA B43A                <1>     mov ah, ":"
    69 00001BAC 66AB                <1>     stosw   ;Store these two chars, adv rdi
    70                              <1> .bbRelPath:
    71 00001BAE 8A0575E4FFFF        <1>     mov al, byte [pathSep]  
    72 00001BB4 AA                  <1>     stosb   ;Store the pathsep
    73 00001BB5 8A0500E5FFFF        <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    74 00001BBB E867280000          <1>     call ucChar             ;UC it
    75 00001BC0 8805F5E4FFFF        <1>     mov byte [batFile], al  ;and overwrite it :)
    76 00001BC6 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    77 00001BC8 88C2                <1>     mov dl, al
    78 00001BCA 56                  <1>     push rsi        ;Save remaining char source
    79 00001BCB 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    80 00001BCE B800470000          <1>     mov eax, 4700h  ;Get Current Directory
    81 00001BD3 CD21                <1>     int 21h
    82 00001BD5 5E                  <1>     pop rsi
    83 00001BD6 7311                <1>     jnc .bbRelPathOk
    84 00001BD8 488D15D2ECFFFF      <1>     lea rdx, badBat
    85 00001BDF E825260000          <1>     call printString
    86 00001BE4 E963000000          <1>     jmp batFinish   ;Now clean up the batch stuff we've setup
    87                              <1> .bbRelPathOk:
    88                              <1> ;Now move rdi to the terminating null   
    89 00001BE9 31C0                <1>     xor eax, eax
    90 00001BEB 31C9                <1>     xor ecx, ecx
    91 00001BED F2AE                <1>     repne scasb ;Find the terminating null
    92 00001BEF 48FFCF              <1>     dec rdi ;Now point to the terminating null
    93 00001BF2 8A0531E4FFFF        <1>     mov al, byte [pathSep]
    94 00001BF8 AA                  <1>     stosb   ;Store this pathsep over the original null
    95                              <1>     ;Now we are ready to copy the command line passed to us by the user
    96                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    97 00001BF9 EB1B                <1>     jmp short .bbCpName
    98                              <1> .bbCDrvAbs:
    99                              <1> ;Current drive absolute. Get current drive into buffer
   100 00001BFB E8FF270000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
   101 00001C00 0441                <1>     add al, "A"
   102 00001C02 B43A                <1>     mov ah, ":"
   103 00001C04 66AB                <1>     stosw   ;Store these two chars
   104                              <1>     ;Now we are ready to copy the command line passed to us by the user
   105                              <1>     ; to rdi. rsi points to where to source the rest of the chars
   106 00001C06 EB0E                <1>     jmp short .bbCpName
   107                              <1> .bbdrvGiven:
   108                              <1> ;Drive given X:
   109 00001C08 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
   110 00001C0A AC                  <1>     lodsb
   111 00001C0B 48FFCE              <1>     dec rsi ;Get the char and point back to it
   112 00001C0E 3A0515E4FFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
   113 00001C14 7598                <1>     jne .bbRelPath
   114                              <1> .bbCpName:
   115 00001C16 E8E9270000          <1>     call strcpy ;Copy the remaining portion
   116 00001C1B 488D3599E4FFFF      <1>     lea rsi, batFile
   117 00001C22 4889F7              <1>     mov rdi, rsi
   118 00001C25 B811120000          <1>     mov eax, 1211h  ;Normalise the path :)
   119 00001C2A CD2F                <1>     int 2fh
   120                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   121                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   122                              <1> ; for SHARING trouble...
   123 00001C2C E865FAFFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   124 00001C31 E844F9FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   125 00001C36 800D60E4FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   126 00001C3D E99FF4FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   127                              <1> 
   128                              <1> .bbCheckEndOfCmdLine:
   129                              <1> ;Input: rsi -> Char to check 
   130                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
   131 00001C42 803E00              <1>     cmp byte [rsi], 0
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001C45 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001C47 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 00001C48 803E0D              <1>     cmp byte [rsi], CR
   134                              <1>     return
    13                              <2> %%_ret:
    14 00001C4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> batFinish:
   137                              <1> ;This is the procedure called after we've processed the last batch line
   138 00001C4C E831010000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   139 00001C51 E98BF4FFFF          <1>     jmp commandMain     ;And start again :)
   140                              <1> batNextLine:
   141                              <1> ;Read the next line from the file and sets if we are done with copying
   142 00001C56 F60540E4FFFF10      <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   143 00001C5D 75ED                <1>     jnz batFinish
   144 00001C5F 488D1555E4FFFF      <1>     lea rdx, batFile
   145                              <1> .batOpen:
   146 00001C66 B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   147 00001C6B CD21                <1>     int 21h
   148 00001C6D 7315                <1>     jnc .batOpened
   149 00001C6F 488D1552ECFFFF      <1>     lea rdx, needBat
   150 00001C76 E88E250000          <1>     call printString
   151 00001C7B B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   152 00001C80 CD21                <1>     int 21h
   153 00001C82 EBE2                <1>     jmp short .batOpen
   154                              <1> .batOpened:
   155 00001C84 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   156 00001C86 488B3526E4FFFF      <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   157 00001C8D 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   158 00001C90 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   159 00001C93 B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   160 00001C98 CD21                <1>     int 21h
   161 00001C9A C605C9E4FFFF00      <1>     mov byte [inBuffer + 1], 0  ;Reset the buffer count
   162 00001CA1 488D15C3E4FFFF      <1>     lea rdx, inBuffer + 2   ;Start read pos
   163 00001CA8 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   164                              <1> .readlp:
   165 00001CAA E8BA000000          <1>     call .readChar          ;Read the char
   166 00001CAF 85C0                <1>     test eax, eax
   167 00001CB1 7425                <1>     jz .endOfBat
   168 00001CB3 FFC7                <1>     inc edi                 ;We read a char, woohoo!
   169 00001CB5 803A1A              <1>     cmp byte [rdx], EOF     ;Did we read a ^Z char?
   170 00001CB8 741E                <1>     je .endOfBat
   171 00001CBA 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   172 00001CBD 7433                <1>     je .endOfLineCr
   173 00001CBF 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   174 00001CC2 743E                <1>     je .endOfLineLf
   175 00001CC4 FE05A0E4FFFF        <1>     inc byte [inBuffer + 1] ;Inc our char count
   176 00001CCA 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   177 00001CCD 803D96E4FFFF80      <1>     cmp byte [inBuffer + 1], 128    ;Are we 128 chars w/o CR?
   178 00001CD4 75D4                <1>     jne .readlp             ;Get next char if not
   179 00001CD6 EB2D                <1>     jmp short .endOfLine    ;The user typed too many chars on a line, EOL
   180                              <1> .endOfBat:
   181 00001CD8 800DBEE3FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set if we encounter a ^Z terminator
   182 00001CDF 803D84E4FFFF00      <1>     cmp byte [inBuffer + 1], 0      ;If we formally read 0 chars, exit!
   183 00001CE6 751D                <1>     jne .endOfLine
   184 00001CE8 E874000000          <1>     call .closeBat                  ;Close the hdl! This is why this is here!
   185 00001CED E95AFFFFFF          <1>     jmp batFinish
   186                              <1> .endOfLineCr:   ;Now get the next char, to possibly eliminate a trailing LF
   187 00001CF2 E872000000          <1>     call .readChar  ;Get the LF over the CR
   188 00001CF7 85C0                <1>     test eax, eax   ;Did we read nothing?
   189 00001CF9 74DD                <1>     jz .endOfBat    ;That CR was last char, check if empty buffer, else exec
   190 00001CFB 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   191 00001CFE 7502                <1>     jne .endOfLineLf    ;Reread this char if not LF
   192 00001D00 FFC7                <1>     inc edi             ;Else add to the count
   193                              <1> .endOfLineLf:
   194 00001D02 C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   195                              <1> .endOfLine:
   196                              <1> ;Close the file, update the batch block file pointer, then proceed.
   197                              <1> ;rsi -> Batch block.
   198 00001D05 E857000000          <1>     call .closeBat
   199                              <1>     ;Imagine someone gives us a 2+Gb Batch file... some server magik lmao
   200 00001D0A 017E13              <1>     add dword [rsi + batBlockHdr.dBatOffLo], edi    ;Add lo dword to chars 
   201 00001D0D 81561700000000      <1>     adc dword [rsi + batBlockHdr.dBatOffHi], 0      ;Add CF if needed!
   202                              <1> ;Now we echo the line to the console unless the first char is @ or 
   203                              <1> ; the echo flag is off
   204 00001D14 488D1550E4FFFF      <1>     lea rdx, inBuffer + 2
   205 00001D1B 803A40              <1>     cmp byte [rdx], batNoEchoChar
   206 00001D1E 7421                <1>     je .noEchoPull       
   207 00001D20 F60577E3FFFFFF      <1>     test byte [echoFlg], -1         
   208 00001D27 7413                <1>     jz .noEcho
   209 00001D29 0FB60D3AE4FFFF      <1>     movzx ecx, byte [inBuffer + 1]    ;Get the number of chars to print
   210 00001D30 BB01000000          <1>     mov ebx, 1  ;STDOUT
   211 00001D35 B800400000          <1>     mov eax, 4000h  ;Write woo!
   212 00001D3A CD21                <1>     int 21h
   213                              <1> .noEcho:
   214 00001D3C E9E9F3FFFF          <1>     jmp commandMain.batProceed
   215                              <1> .noEchoPull:
   216 00001D41 FE0D23E4FFFF        <1>     dec byte [inBuffer + 1]     ;Eliminate the @ char
   217 00001D47 0F8409FFFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   218 00001D4D 4889D7              <1>     mov rdi, rdx
   219 00001D50 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   220 00001D54 0FB60D0FE4FFFF      <1>     movzx ecx, byte [inBuffer + 1]  ;Get the remaining count to copy
   221 00001D5B FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   222 00001D5D F3A4                <1>     rep movsb 
   223 00001D5F EBDB                <1>     jmp short .noEcho   ;Now proceed normally
   224                              <1>     
   225                              <1> .closeBat:
   226                              <1> ;Close the handle in rbx
   227 00001D61 B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   228 00001D66 CD21                <1>     int 21h         ;We ignore errors here... dont hurt me SHARE pls
   229                              <1>     return
    13                              <2> %%_ret:
    14 00001D68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   230                              <1> .readChar:
   231                              <1> ;Reads a char. If no chars read, sets the EOF flag!
   232 00001D69 B901000000          <1>     mov ecx, 1
   233 00001D6E B8003F0000          <1>     mov eax, 3F00h
   234 00001D73 CD21                <1>     int 21h  
   235 00001D75 85C0                <1>     test eax, eax
   236                              <1>     retnz   ;If a char read, return
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001D77 75(68)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   237 00001D79 800D1DE3FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set the end of file reached flag!
   238                              <1>     return
    13                              <2> %%_ret:
    14 00001D80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> 
   241                              <1> batExpandVar:
   242                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   243                              <1> ;       rdi -> Position to place the substitution string
   244                              <1> ;Output: CF=NC: Substitution string is placed in buffer
   245                              <1> ;        CF=CY: No substitution string found
   246                              <1>     return
    13                              <2> %%_ret:
    14 00001D81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   247                              <1>     ;cmp byte [rsi], "%"
   248                              <1> 
   249                              <1> batCleanup:
   250                              <1> ;This function is called after the last line has been processed by the 
   251                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   252                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   253 00001D82 488B1D2AE3FFFF      <1>     mov rbx, qword [bbPtr]
   254 00001D89 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   255 00001D8C 88050CE3FFFF        <1>     mov byte [echoFlg], al
   256                              <1> ;-----------------------------------------------------------------------
   257                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   258                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   259                              <1> ; But since this is the routine called by the error handler too, it 
   260                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   261                              <1> ; just have a null pointer.
   262                              <1> ;-----------------------------------------------------------------------
   263                              <1> ;Finally free this batch header
   264 00001D92 4150                <1>     push r8
   265 00001D94 4989D8              <1>     mov r8, rbx
   266 00001D97 B800490000          <1>     mov eax, 4900h
   267 00001D9C CD21                <1>     int 21h
   268 00001D9E 4158                <1>     pop r8
   269 00001DA0 E8D5F7FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   270 00001DA5 48C70503E3FFFF0000- <1>     mov qword [bbPtr], 0    
   270 00001DAE 0000                <1>
   271 00001DB0 8025E6E2FFFFE7      <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   272                              <1>     return
    13                              <2> %%_ret:
    14 00001DB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001DB8 488D15A8EBFFFF      <1>     lea rdx, noSpace
    10 00001DBF 488D0DC4EEFFFF      <1>     lea rcx, pipeErr
    11 00001DC6 F605D4E2FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001DCD 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001DCF 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001DD3 E866000000          <1>     call badCmn     ;Print the string
    15 00001DD8 E993F7FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001DDD 488D1572EFFFFF      <1>     lea rdx, noMemMsg
    18 00001DE4 EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001DE6 488D1576EEFFFF      <1>     lea rdx, syntaxErr
    21 00001DED EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001DEF 488D158BEBFFFF      <1>     lea rdx, noEnvSpace
    24 00001DF6 EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001DF8 488D1510EEFFFF      <1>     lea rdx, accDenMsg
    27 00001DFF EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001E01 488D1585ECFFFF      <1>     lea rdx, badParm
    30 00001E08 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001E0A 488D153FECFFFF      <1>     lea rdx, badDrv
    33 00001E11 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001E13 488D1502EFFFFF      <1>     lea rdx, badArgs
    36 00001E1A EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001E1C 488D15DDEEFFFF      <1>     lea rdx, badSpec
    39 00001E23 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001E25 488D1513EBFFFF      <1>     lea rdx, dupName
    43 00001E2C EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001E2E 488D1521EBFFFF      <1>     lea rdx, fnfMsg
    46 00001E35 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001E37 488D1550EDFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001E3E E9C6230000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001E43 488D15DAEAFFFF      <1>     lea rdx, badCmd
    53 00001E4A EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001E4C C60549E7FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001E53 C60543E7FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001E5A C7053AE7FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001E63 00                  <1>
    59 00001E64 C60538E7FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001E6B 66C70524E6FFFF0000  <1>     mov word [searchSpec], 0
    61 00001E74 488D3DAAE7FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001E7B C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001E7E 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001E87 3F                  <1>
    64 00001E88 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001E8C C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001E93 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001E9A 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001E9D E8A0250000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001EA2 AC                  <1>     lodsb   ;Get this char
    72 00001EA3 3C0D                <1>     cmp al, CR
    73 00001EA5 744D                <1>     je .scanDone
    74 00001EA7 3A057DE1FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001EAD 7524                <1>     jne .notSwitch
    76 00001EAF AC                  <1>     lodsb   ;Get the next char
    77 00001EB0 E872250000          <1>     call ucChar
    78 00001EB5 3C57                <1>     cmp al, "W"
    79 00001EB7 7509                <1>     jne .notWide
    80 00001EB9 800DDCE6FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001EC0 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001EC2 3C50                <1>     cmp al, "P"
    84 00001EC4 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001ECA 800DCBE6FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001ED1 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001ED3 F605C2E6FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001EDA 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001EE0 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001EE3 E8E6260000          <1>     call copyArgumentToSearchSpec   
    93 00001EE8 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001EEB 800DAAE6FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001EF2 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001EF4 F605A1E6FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001EFB 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001EFD 488D3594E5FFFF      <1>     lea rsi, searchSpec
   101 00001F04 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001F08 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001F0A 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001F0F 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001F13 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001F18 CD21                <1>     int 21h
   108 00001F1A 3CFF                <1>     cmp al, -1
   109 00001F1C 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001F22 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001F27 84C0                <1>     test al, al
   113 00001F29 740A                <1>     jz .currentDrv
   114 00001F2B FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001F2D 88056FE6FFFF        <1>     mov byte [dirDrv], al
   116 00001F33 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001F35 E8C5240000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001F3A 880562E6FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001F40 488D3551E5FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001F47 488D3D55E6FFFF      <1>     lea rdi, dirSrchDir
   124 00001F4E 0FB6054DE6FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001F55 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001F57 0441                <1>     add al, "A" ;Turn into a letter
   127 00001F59 B43A                <1>     mov ah, ":"
   128 00001F5B 66AB                <1>     stosw   ;Store X: into the search path
   129 00001F5D B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001F62 CD2F                <1>     int 2fh
   131 00001F64 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001F66 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001F6C 8A05B7E0FFFF        <1>     mov al, byte [pathSep]
   135 00001F72 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001F74 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001F76 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001F77 FEC2                <1>     inc dl  ;Increment by 1
   139 00001F79 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001F7C B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001F81 CD21                <1>     int 21h
   142 00001F83 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001F86 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001F88 3807                <1>     cmp byte [rdi], al
   149 00001F8A 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001F8C 48FFC7              <1>     inc rdi
   151 00001F8F EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001F91 8A0592E0FFFF        <1>     mov al, byte [pathSep]
   154 00001F97 3806                <1>     cmp byte [rsi], al
   155 00001F99 7412                <1>     je .copyPathLoop
   156 00001F9B B43A                <1>     mov ah, ":"
   157 00001F9D 86C4                <1>     xchg al, ah
   158 00001F9F 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001FA3 7408                <1>     je .copyPathLoop
   160 00001FA5 88E0                <1>     mov al, ah
   161 00001FA7 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001FAA 7401                <1>     je .copyPathLoop
   163 00001FAC AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001FAD AC                  <1>     lodsb
   166 00001FAE 3A0575E0FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001FB4 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001FB6 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001FB8 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001FBA 48FFC6              <1>     inc rsi
   172 00001FBD EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001FBF 3C2E                <1>     cmp al, "."
   175 00001FC1 7407                <1>     je .dots
   176                              <1> .store:
   177 00001FC3 AA                  <1>     stosb
   178 00001FC4 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001FC6 7472                <1>     jz .exitPathCopy
   180 00001FC8 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001FCA 8A2559E0FFFF        <1>     mov ah, byte [pathSep]
   188 00001FD0 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001FD3 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001FD5 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001FD7 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00001FDA 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00001FDC 3A2547E0FFFF        <1>     cmp ah, byte [pathSep]
   195 00001FE2 7406                <1>     je .skipThisPathsep
   196 00001FE4 84E4                <1>     test ah, ah
   197 00001FE6 74C5                <1>     jz .copyPathLoop
   198 00001FE8 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00001FEA 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00001FED EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00001FEF 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00001FF2 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00001FF4 3A252FE0FFFF        <1>     cmp ah, byte [pathSep]
   208 00001FFA 7408                <1>     je .tdOk
   209 00001FFC 84E4                <1>     test ah, ah
   210 00001FFE 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00002004 8A051FE0FFFF        <1>     mov al, byte byte [pathSep]
   213 0000200A 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 0000200E 0F84EDFDFFFF        <1>     je badParamError
   215 00002014 4881EF02000000      <1>     sub rdi, 2
   216 0000201B 31C9                <1>     xor ecx, ecx
   217 0000201D FFC9                <1>     dec ecx
   218 0000201F FD                  <1>     std
   219 00002020 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 00002022 FC                  <1>     cld
   221 00002023 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 0000202A 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 0000202C 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 00002032 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00002035 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 0000203A 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00002041 8A05E2DFFFFF        <1>     mov al, byte [pathSep]
   230 00002047 B43A                <1>     mov ah, ":"
   231 00002049 86C4                <1>     xchg al, ah
   232 0000204B 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 0000204F 7409                <1>     je .skipOverwrite
   234 00002051 88E0                <1>     mov al, ah
   235 00002053 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00002055 7503                <1>     jne .skipOverwrite
   237 00002057 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 0000205A 488D3542E5FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00002061 4889F7              <1>     mov rdi, rsi
   241 00002064 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00002069 CD2F                <1>     int 2fh
   243 0000206B E86B250000          <1>     call scanForWildcards
   244 00002070 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00002072 4889F2              <1>     mov rdx, rsi
   246 00002075 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00002079 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 0000207B E84D260000          <1>     call setDTA ;Set the DTA
   250 00002080 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00002085 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 0000208A CD21                <1>     int 21h
   253 0000208C 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 0000208E F6059EE0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00002095 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00002097 31C0                <1>     xor eax, eax
   259 00002099 31C9                <1>     xor ecx, ecx
   260 0000209B FFC9                <1>     dec ecx
   261 0000209D F2AE                <1>     repne scasb
   262 0000209F 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 000020A2 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 000020A4 31C0                <1>     xor eax, eax
   268 000020A6 31C9                <1>     xor ecx, ecx
   269 000020A8 FFC9                <1>     dec ecx
   270 000020AA F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 000020AC 8A0577DFFFFF        <1>     mov al, byte [pathSep]
   273 000020B2 31C9                <1>     xor ecx, ecx
   274 000020B4 FFC9                <1>     dec ecx
   275 000020B6 FD                  <1>     std ;Search backwards
   276 000020B7 F2AE                <1>     repne scasb
   277 000020B9 FC                  <1>     cld ;Search forwards again
   278 000020BA 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 000020BD 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 000020C1 7503                <1>     jne .wcsp1
   281 000020C3 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 000020C6 57                  <1>     push rdi
   285 000020C7 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 000020C9 7503                <1>     jne .wcsp2
   287 000020CB 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 000020CE 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 000020D1 488D3D4DE5FFFF      <1>     lea rdi, dirSrchFCB
   291 000020D8 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 000020DD CD21                <1>     int 21h
   293 000020DF 5F                  <1>     pop rdi
   294 000020E0 31C0                <1>     xor eax, eax
   295 000020E2 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 000020E4 0FB605B7E4FFFF      <1>     movzx eax, byte [dirDrv] 
   298 000020EB E86A160000          <1>     call volume.dirEP
   299 000020F0 488D15FFEAFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 000020F7 B409                <1>     mov ah, 09h
   301 000020F9 CD21                <1>     int 21h
   302 000020FB C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 000020FE 488D159EE4FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 00002105 B409                <1>     mov ah, 09h
   305 00002107 CD21                <1>     int 21h
   306 00002109 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 0000210C 488D1599E7FFFF      <1>     lea rdx, crlf2
   308 00002113 B409                <1>     mov ah, 09h
   309 00002115 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 00002117 8A050CDFFFFF        <1>     mov al, byte [pathSep]
   313 0000211D 3847FF              <1>     cmp byte [rdi - 1], al
   314 00002120 7403                <1>     je .root
   315 00002122 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 00002125 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 00002128 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 00002129 488D35F6E4FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 00002130 E8E8230000          <1>     call FCBToAsciiz    ;Terminates for free
   321 00002135 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 0000213A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 0000213B E88D250000          <1>     call setDTA
   326 00002140 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00002145 488D1557E4FFFF      <1>     lea rdx, dirSrchDir
   328 0000214C B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00002151 CD21                <1>     int 21h
   330 00002153 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00002155 E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 0000215A B44F                <1>     mov ah, 4Fh
   334 0000215C CD21                <1>     int 21h
   335 0000215E 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00002160 F60535E4FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00002167 740B                <1>     jz .dirNoEndNewLine
   339 00002169 488D1539E7FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00002170 B409                <1>     mov ah, 09h
   341 00002172 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00002174 F70520E4FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 0000217D FF                  <1>
   345 0000217E 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00002180 488D15CFE7FFFF      <1>     lea rdx, fnfMsg
   348 00002187 E87D200000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 0000218C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 0000218D 488D1537EDFFFF      <1>     lea rdx, fourSpc
   352 00002194 B409                <1>     mov ah, 09h
   353 00002196 CD21                <1>     int 21h
   354 00002198 B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 0000219A CD21                <1>     int 21h
   356 0000219C 8B05FCE3FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 000021A2 E848240000          <1>     call printDecimalWord
   358 000021A7 488D1581E8FFFF      <1>     lea rdx, dirOk
   359 000021AE B409                <1>     mov ah, 09h
   360 000021B0 CD21                <1>     int 21h
   361 000021B2 488D1517EDFFFF      <1>     lea rdx, threeSpc
   362 000021B9 B409                <1>     mov ah, 09h
   363 000021BB CD21                <1>     int 21h
   364 000021BD B800360000          <1>     mov eax, 3600h ;Get disk info
   365 000021C2 8A15DAE3FFFF        <1>     mov dl, byte [dirDrv]
   366 000021C8 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 000021CA CD21                <1>     int 21h ;Get disk free space info
   368 000021CC 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 000021CF 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 000021D2 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 000021D4 F7E1                <1>     mul ecx ;Get bytes per cluster
   372 000021D6 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 000021D9 E811240000          <1>     call printDecimalWord
   375 000021DE 488D1554E8FFFF      <1>     lea rdx, bytesOk
   376 000021E5 B409                <1>     mov ah, 09h
   377 000021E7 CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 000021E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 000021EA F60542DFFFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000021F1 75(E9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 000021F3 488D3542DFFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 000021FA 488D3D0DDFFFFF      <1>     lea rdi, cmdFcb
   388 00002201 E8A9220000          <1>     call asciiFilenameToFCB
   389 00002206 488D1501DFFFFF      <1>     lea rdx, cmdFcb
   390 0000220D B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 00002212 BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 00002217 B440                <1>     mov ah, 40h ;Write handle
   393 00002219 CD21                <1>     int 21h
   394 0000221B 52                  <1>     push rdx
   395 0000221C B220                <1>     mov dl, " "
   396 0000221E B402                <1>     mov ah, 02h ;Print char
   397 00002220 CD21                <1>     int 21h
   398 00002222 5A                  <1>     pop rdx
   399 00002223 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 0000222A B903000000          <1>     mov ecx, 3  ;Print three chars
   401 0000222F BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 00002234 B440                <1>     mov ah, 40h ;Write handle
   403 00002236 CD21                <1>     int 21h
   404 00002238 F6055DE3FFFF01      <1>     test byte [dirFlags], dirWideType
   405 0000223F 0F85AA000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 00002245 F605E7DEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 0000224C 7418                <1>     jz .dirPrintNotDir
   410 0000224E 488D15F2E7FFFF      <1>     lea rdx, dirLbl
   411 00002255 B409                <1>     mov ah, 09h
   412 00002257 CD21                <1>     int 21h
   413 00002259 488D1570ECFFFF      <1>     lea rdx, threeSpc
   414 00002260 B409                <1>     mov ah, 09h
   415 00002262 CD21                <1>     int 21h
   416 00002264 EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 00002266 B220                <1>     mov dl, " "
   420 00002268 B402                <1>     mov ah, 02h
   421 0000226A CD21                <1>     int 21h
   422 0000226C 8B05C6DEFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 00002272 E8E9230000          <1>     call getDecimalWord
   424 00002277 4889CB              <1>     mov rbx, rcx
   425 0000227A 51                  <1>     push rcx
   426 0000227B 480FCB              <1>     bswap rbx
   427 0000227E B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 00002283 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 00002285 7514                <1>     jne .dirPrintFileSize
   431 00002287 B402                <1>     mov ah, 02h
   432 00002289 B220                <1>     mov dl, " "
   433 0000228B CD21                <1>     int 21h
   434 0000228D 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 00002291 FFC9                <1>     dec ecx
   436 00002293 81F901000000        <1>     cmp ecx, 1
   437 00002299 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 0000229B 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 0000229C 88DA                <1>     mov dl, bl
   442 0000229E B402                <1>     mov ah, 02h
   443 000022A0 CD21                <1>     int 21h
   444 000022A2 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 000022A6 FFC9                <1>     dec ecx
   446 000022A8 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 000022AA 488D1523ECFFFF      <1>     lea rdx, twoSpc
   448 000022B1 B409                <1>     mov ah, 09h
   449 000022B3 CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 000022B5 B220                <1>     mov dl, " "
   452 000022B7 B402                <1>     mov ah, 02h
   453 000022B9 CD21                <1>     int 21h
   454 000022BB 0FB70574DEFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 000022C2 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 000022C4 E8F01C0000          <1>     call printDate
   457 000022C9 488D1504ECFFFF      <1>     lea rdx, twoSpc
   458 000022D0 B409                <1>     mov ah, 09h
   459 000022D2 CD21                <1>     int 21h
   460 000022D4 0FB70559DEFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 000022DB E8FB1D0000          <1>     call printTime
   462 000022E0 488D15C2E5FFFF      <1>     lea rdx, crlf
   463 000022E7 B409                <1>     mov ah, 09h
   464 000022E9 CD21                <1>     int 21h
   465 000022EB B017                <1>     mov al, 23  ;23 lines... for the next bit
   466 000022ED EB0D                <1>     jmp short .dirPrintNameExit
   467                              <1> .widePrint:
   468                              <1> ;If /W, print name space ext space space space space
   469 000022EF 488D15D5EBFFFF      <1>     lea rdx, fourSpc
   470 000022F6 B409                <1>     mov ah, 09h ;Print string
   471 000022F8 CD21                <1>     int 21h
   472 000022FA B073                <1>     mov al, 5*23    ;5 entries per line...
   473                              <1> .dirPrintNameExit:
   474 000022FC FF059CE2FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   475 00002302 FE0595E2FFFF        <1>     inc byte [dirLineCtr]
   476 00002308 38058FE2FFFF        <1>     cmp byte [dirLineCtr], al
   477                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000230E 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002310 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 00002311 F60584E2FFFF02      <1>     test byte [dirFlags], dirPageType
   479 00002318 741A                <1>     jz .dirPrnNoPag
   480 0000231A 488D154DE7FFFF      <1>     lea rdx, pauseMes
   481 00002321 B409                <1>     mov ah, 09h
   482 00002323 CD21                <1>     int 21h
   483 00002325 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   484 00002327 CD21                <1>     int 21h
   485 00002329 488D1579E5FFFF      <1>     lea rdx, crlf   ;Force new line
   486 00002330 B409                <1>     mov ah, 09h
   487 00002332 CD21                <1>     int 21h
   488                              <1> .dirPrnNoPag:
   489 00002334 C60562E2FFFF00      <1>     mov byte [dirLineCtr], 0
   490                              <1>     return
    13                              <2> %%_ret:
    14 0000233B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> chdir:
   493 0000233C F60569DDFFFFFF      <1>     test byte [arg1Flg], -1
   494 00002343 754D                <1>     jnz .changeDir
   495                              <1>     ;Print CWD
   496                              <1> .printCWD:
   497 00002345 E8341F0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   498 0000234A E8B31E0000          <1>     call printCRLF
   499                              <1>     return
    13                              <2> %%_ret:
    14 0000234F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .printDiskCWD:
   501                              <1> ;Print CWD for a specified drive
   502 00002350 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   503 00002354 88D0                <1>     mov al, dl
   504 00002356 0440                <1>     add al, "@" ;Get the UC letter
   505 00002358 B43A                <1>     mov ah, ":"
   506 0000235A 488D3D37E1FFFF      <1>     lea rdi, searchSpec
   507 00002361 66AB                <1>     stosw   ;Store X:, rdi+=2
   508 00002363 8A05C0DCFFFF        <1>     mov al, byte [pathSep]
   509 00002369 AA                  <1>     stosb   ;Store pathSep, inc rdi
   510 0000236A B447                <1>     mov ah, 47h ;Get Current Working Directory
   511 0000236C 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   512 0000236F CD21                <1>     int 21h
   513 00002371 E8A7200000          <1>     call strlen
   514 00002376 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   515 0000237C B440                <1>     mov ah, 40h ;Write to handle
   516 0000237E BB01000000          <1>     mov ebx, 1  ;STDOUT
   517 00002383 488D150EE1FFFF      <1>     lea rdx, searchSpec
   518 0000238A CD21                <1>     int 21h
   519 0000238C E8711E0000          <1>     call printCRLF
   520                              <1>     return
    13                              <2> %%_ret:
    14 00002391 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> .changeDir:
   522 00002392 8A0516DDFFFF        <1>     mov al, byte [arg1FCBret]
   523 00002398 3CFF                <1>     cmp al, -1 
   524 0000239A 0F846AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   525 000023A0 E811220000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   526 000023A5 488D15ECE0FFFF      <1>     lea rdx, searchSpec
   527 000023AC B43B                <1>     mov ah, 3Bh ;CHDIR
   528 000023AE CD21                <1>     int 21h
   529 000023B0 0F8281FAFFFF        <1>     jc badDirError
   530                              <1>     return
    13                              <2> %%_ret:
    14 000023B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> mkdir:
   533 000023B7 F605EEDCFFFFFF      <1>     test byte [arg1Flg], -1
   534 000023BE 0F844FFAFFFF        <1>     jz badArgError
   535 000023C4 F605E4DCFFFFFF      <1>     test byte [arg2Flg], -1
   536 000023CB 0F8542FAFFFF        <1>     jnz badArgError
   537                              <1>     ;We have exactly one argument
   538 000023D1 8A05D7DCFFFF        <1>     mov al, byte [arg1FCBret]
   539 000023D7 3CFF                <1>     cmp al, -1 
   540 000023D9 0F842BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   541 000023DF E8D2210000          <1>     call buildCommandPath
   542 000023E4 488D15ADE0FFFF      <1>     lea rdx, searchSpec
   543 000023EB B800390000          <1>     mov eax, 3900h  ;MKDIR
   544 000023F0 CD21                <1>     int 21h
   545                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000023F2 73(B6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   546                              <1> .badMake:   ;Else, bad make
   547 000023F4 488D15A7E7FFFF      <1>     lea rdx, badMD
   548 000023FB E9091E0000          <1>     jmp printString
   549                              <1> 
   550                              <1> rmdir:
   551 00002400 F605A5DCFFFFFF      <1>     test byte [arg1Flg], -1
   552 00002407 0F8406FAFFFF        <1>     jz badArgError
   553 0000240D F6059BDCFFFFFF      <1>     test byte [arg2Flg], -1
   554 00002414 0F85F9F9FFFF        <1>     jnz badArgError
   555                              <1>     ;We have exactly one argument
   556 0000241A 8A058EDCFFFF        <1>     mov al, byte [arg1FCBret]
   557 00002420 3CFF                <1>     cmp al, -1 
   558 00002422 0F84E2F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   559 00002428 E889210000          <1>     call buildCommandPath
   560 0000242D 488D1564E0FFFF      <1>     lea rdx, searchSpec
   561 00002434 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   562 00002439 CD21                <1>     int 21h
   563                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000243B 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000243D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564                              <1> .badRemove:   ;Else, bad make
   565 0000243E 488D157AE7FFFF      <1>     lea rdx, badRD
   566 00002445 E9BF1D0000          <1>     jmp printString
   567                              <1> 
   568                              <1> copy:
   569 0000244A 66C70532E3FFFFFFFF  <1>     mov word [sourceHdl], -1
   570 00002453 66C7052BE3FFFFFFFF  <1>     mov word [destHdl], -1
   571 0000245C 66C70524E3FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   572 00002465 C6052DE3FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   573 0000246C 48C70514E3FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   573 00002475 0000                <1>
   574 00002477 66C70513E3FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   575 00002480 C7050BE3FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   575 00002489 00                  <1>
   576 0000248A C605D4E1FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   577 00002491 C6054FE2FFFF00      <1>     mov byte [destSpec], 0
   578 00002498 48C705C6E2FFFF0000- <1>     mov qword [srcPtr], 0
   578 000024A1 0000                <1>
   579 000024A3 48C705C3E2FFFF0000- <1>     mov qword [destPtr], 0
   579 000024AC 0000                <1>
   580 000024AE E81A220000          <1>     call setDTA
   581 000024B3 B800540000          <1>     mov eax, 5400h  ;Get verify flag
   582 000024B8 CD21                <1>     int 21h
   583 000024BA 8805C4E2FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   584                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   585                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   586                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   587 000024C0 B800520000          <1>     mov eax, 5200h
   588 000024C5 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   589 000024C7 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   590 000024CB 89CB                <1>     mov ebx, ecx
   591 000024CD C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   592 000024D0 B800480000          <1>     mov eax, 4800h
   593 000024D5 CD21                <1>     int 21h
   594 000024D7 731E                <1>     jnc .bufOk
   595 000024D9 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   596 000024DB 750C                <1>     jnz .okSize
   597                              <1> .badAlloc:
   598                              <1> ;Not enough memory error!
   599 000024DD 488D152EE5FFFF      <1>     lea rdx, cpNoMem
   600 000024E4 E955F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   601                              <1> .okSize:
   602 000024E9 89D9                <1>     mov ecx, ebx    
   603 000024EB C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   604 000024EE B800480000          <1>     mov eax, 4800h
   605 000024F3 CD21                <1>     int 21h
   606 000024F5 72E6                <1>     jc .badAlloc
   607                              <1> .bufOk:
   608 000024F7 4889058DE2FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   609 000024FE 66890D8EE2FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   610                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   611 00002505 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   612 0000250C 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   613 00002514 FFC9                <1>     dec ecx ;Turn into offset
   614 00002516 4801CE              <1>     add rsi, rcx
   615 00002519 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   616 0000251B FD                  <1>     std ;Go in reverse
   617                              <1> .sd:    ;At this point, any switch chars affect destination!
   618 0000251C E8211F0000          <1>     call skipDelimiters ;SkipDelimiters in reverse!
   619 00002521 8A0503DBFFFF        <1>     mov al, byte [switchChar]
   620 00002527 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   621 0000252A 7509                <1>     jne .noSwitch
   622                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   623 0000252C 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   624 00002530 50                  <1>     push rax        ;Push the switchchar
   625 00002531 FFC2                <1>     inc edx         ;Inc the counter
   626 00002533 EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   627                              <1> .noSwitch:
   628                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   629 00002535 85D2                <1>     test edx, edx
   630 00002537 7412                <1>     jz .noDestSwitch
   631                              <1> .ns1:
   632 00002539 58                  <1>     pop rax ;Pop the switch char
   633 0000253A B304                <1>     mov bl, ascDes
   634 0000253C E809040000          <1>     call .doSwitchRev
   635 00002541 0F8574040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   636 00002547 FFCA                <1>     dec edx
   637 00002549 75EE                <1>     jnz .ns1
   638                              <1> .noDestSwitch:
   639                              <1> ;Now search for the starting delimiter or start of line
   640 0000254B 48FFC6              <1>     inc rsi ;Go to the last char in the path
   641                              <1> .noSwitchLp:
   642 0000254E AC                  <1>     lodsb   ;Get char at rsi, go back a char
   643 0000254F E8FC1E0000          <1>     call isALdelimiter
   644 00002554 7412                <1>     je .destFnd
   645 00002556 8A05CEDAFFFF        <1>     mov al, byte [switchChar]
   646 0000255C 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   647 0000255F 7404                <1>     je .se  ;Jump if so!
   648 00002561 FFC9                <1>     dec ecx ;One less char left to search
   649 00002563 EBE9                <1>     jmp short .noSwitchLp
   650                              <1> .se:
   651 00002565 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   652                              <1> .destFnd:
   653 00002568 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   654 0000256F FC                  <1>     cld 
   655 00002570 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   656 00002573 488D3D6DE1FFFF      <1>     lea rdi, destSpec
   657 0000257A 57                  <1>     push rdi
   658 0000257B E8F31F0000          <1>     call cpDelimPathToBufz ;Copy this over!   
   659 00002580 5F                  <1>     pop rdi
   660 00002581 E8731F0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   661 00002586 48893DE4E1FFFF      <1>     mov qword [destPtr], rdi
   662 0000258D 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   663 00002591 7517                <1>     jne .destEnd    ;Dont worry
   664 00002593 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   665 00002595 E88D1E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   666 0000259A 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   667 0000259C 4881C702000000      <1>     add rdi, 2              ;Point to this null
   668 000025A3 48893DC7E1FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   669                              <1> .destEnd:
   670                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   671 000025AA 8025E8E1FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   672 000025B1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   673                              <1> .srcLp:
   674 000025B8 E8851E0000          <1>     call skipDelimiters 
   675 000025BD 8A0567DAFFFF        <1>     mov al, byte [switchChar]
   676 000025C3 3806                <1>     cmp byte [rsi], al
   677 000025C5 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   678                              <1>     ;rsi points to switch after switchchar
   679 000025C7 B301                <1>     mov bl, ascSrc
   680 000025C9 E876030000          <1>     call .doSwitch
   681 000025CE 0F85E7030000        <1>     jnz .badExit
   682 000025D4 4881C602000000      <1>     add rsi, 2
   683 000025DB EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   684                              <1> .noSrcSw:
   685 000025DD 4839F5              <1>     cmp rbp, rsi
   686 000025E0 7527                <1>     jne .noSameSrcDest
   687                              <1>     ;Here if the destination we specified earlier is the same as the source
   688                              <1>     ;This means, the actual destination is the current default drive
   689                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   690 000025E2 E8181E0000          <1>     call getCurrentDrive    ;Get current drive
   691 000025E7 0441                <1>     add al, "A"             ;Turn into a drive letter
   692 000025E9 B43A                <1>     mov ah, ":"
   693 000025EB 0FB7C0              <1>     movzx eax, ax
   694 000025EE 8905F3E0FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   695 000025F4 488D3DEEE0FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   696 000025FB 48893D6FE1FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   697 00002602 800D90E1FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   698                              <1> .noSameSrcDest:
   699 00002609 488D3D55E0FFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   700 00002610 57                  <1>     push rdi
   701 00002611 E85D1F0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   702 00002616 5F                  <1>     pop rdi
   703                              <1>     ;Now go forwards and pick up any more switches.
   704                              <1>     ;Also any "+" signs here!!
   705 00002617 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   706                              <1> .swSrcSwPost:
   707 0000261A E8231E0000          <1>     call skipDelimiters ;Skips trailing delimiters
   708 0000261F 8A0505DAFFFF        <1>     mov al, byte [switchChar]
   709 00002625 3806                <1>     cmp byte [rsi], al
   710 00002627 7516                <1>     jne .swSrcSwPostExit
   711                              <1>     ;rsi points to switch after switchchar
   712 00002629 B301                <1>     mov bl, ascSrc
   713 0000262B E814030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   714 00002630 0F8585030000        <1>     jnz .badExit
   715 00002636 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   716 0000263D EBDB                <1>     jmp short .swSrcSwPost
   717                              <1> .swSrcSwPostExit:
   718 0000263F 4889FE              <1>     mov rsi, rdi
   719 00002642 E8941F0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   720 00002647 7507                <1>     jnz .oneCp
   721 00002649 800D49E1FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   722                              <1> .oneCp:
   723 00002650 E8A41E0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   724 00002655 48893D0DE1FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   725 0000265C 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   726 00002660 7517                <1>     jne .srcEnd             ;Dont worry
   727 00002662 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   728 00002664 E8BE1D0000          <1>     call ucChar             ;Make sure we UC the drive letter
   729 00002669 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   730 0000266B 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   731 00002672 48893DF0E0FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   732                              <1> .srcEnd:
   733                              <1> ;Now uppercase both paths
   734 00002679 488D35E5DFFFFF      <1>     lea rsi, srcSpec
   735 00002680 E8AE1D0000          <1>     call normalisePath
   736 00002685 488D3D5BE0FFFF      <1>     lea rdi, destSpec
   737 0000268C E8A21D0000          <1>     call normalisePath
   738                              <1> ;Now establish if the source is a directory or not!
   739 00002691 F60501E1FFFF08      <1>     test byte [bCpFlg], wcSrc
   740 00002698 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   741 0000269A 488D15C4DFFFFF      <1>     lea rdx, srcSpec
   742 000026A1 4889D6              <1>     mov rsi, rdx
   743 000026A4 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   744 000026A6 80FC3A              <1>     cmp ah, ":"
   745 000026A9 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   746 000026AB AC                  <1>     lodsb           ;Get char past :
   747 000026AC 84C0                <1>     test al, al     ;Is byte three nul?
   748 000026AE 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   749 000026B0 3A0573D9FFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   750 000026B6 7515                <1>     jne .isSrcDir
   751 000026B8 AC                  <1>     lodsb           ;Get char past char past "X:\"
   752 000026B9 84C0                <1>     test al, al     
   753 000026BB 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   754                              <1> .srcStorWc:
   755                              <1> ;rsi points past the char to store the WC at
   756 000026BD C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   757 000026C4 800DCEE0FFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   758 000026CB EB44                <1>     jmp short .checkDestDir
   759                              <1> .isSrcDir:
   760 000026CD B910000000          <1>     mov ecx, dirDirectory
   761 000026D2 B8004E0000          <1>     mov eax, 4E00h
   762 000026D7 CD21                <1>     int 21h
   763 000026D9 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   764                              <1>     ;Was the file we found actually a directory?
   765 000026DB 803D51DAFFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   766 000026E2 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   767 000026E4 4889D7              <1>     mov rdi, rdx
   768 000026E7 E8311D0000          <1>     call strlen
   769 000026EC FFC9                <1>     dec ecx
   770 000026EE 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   771 000026F1 8A0532D9FFFF        <1>     mov al, byte [pathSep]
   772 000026F7 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   773 000026FA 7401                <1>     je .srctpsp
   774 000026FC AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   775                              <1> .srctpsp:
   776 000026FD 48893D65E0FFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   777 00002704 B82A2E2A00          <1>     mov eax, "*.*"
   778 00002709 AB                  <1>     stosd   ;Store the WC with terminating nul!
   779 0000270A 800D88E0FFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   780                              <1> .checkDestDir:
   781                              <1> ;Now establish if destination is a directory or not!
   782 00002711 F60581E0FFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   783 00002718 0F855E010000        <1>     jnz .mod1
   784 0000271E 488D35C2DFFFFF      <1>     lea rsi, destSpec
   785 00002725 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   786 00002727 80FC3A              <1>     cmp ah, ":"
   787 0000272A 751A                <1>     jne .isDestDir
   788 0000272C 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   789 0000272E 84C0                <1>     test al, al ;Is byte three nul?
   790 00002730 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   791 00002736 84E4                <1>     test ah, ah ;Is byte four nul?
   792 00002738 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   793 0000273A 3A05E9D8FFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   794 00002740 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   795                              <1> .isDestDir:
   796                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   797 00002746 488D159ADFFFFF      <1>     lea rdx, destSpec
   798 0000274D B910000000          <1>     mov ecx, dirDirectory
   799 00002752 B8004E0000          <1>     mov eax, 4E00h
   800 00002757 CD21                <1>     int 21h
   801 00002759 7237                <1>     jc .mod2
   802                              <1>     ;Was the file we found actually a directory?
   803 0000275B 803DD1D9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   804 00002762 752E                <1>     jne .mod2
   805                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   806                              <1>     ;If not, we need to place one there!
   807 00002764 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   808 00002767 E8B11C0000          <1>     call strlen
   809 0000276C FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   810 0000276E 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   811 00002771 0FB605B1D8FFFF      <1>     movzx eax, byte [pathSep]
   812 00002778 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   813 0000277B 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   814 00002781 66AB                <1>     stosw           ;Else, store the pathsep and null!
   815 00002783 48FFCF              <1>     dec rdi         ;Point back to null
   816 00002786 48893DE4DFFFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   817 0000278D E9EA000000          <1>     jmp .mod1
   818                              <1> .mod2:
   819                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   820                              <1> ; to rename wildcard semantics. Always run through this as the destination
   821                              <1> ; name may have wildcards in it! But we don't add any.
   822 00002792 800D00E0FFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   823 00002799 488D3547DFFFFF      <1>     lea rsi, destSpec
   824 000027A0 E8361E0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   825 000027A5 7407                <1>     jz .m2Wc
   826 000027A7 800DEBDFFFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   827                              <1> .m2Wc:
   828                              <1> ;Search for the source file
   829 000027AE 488D15B0DEFFFF      <1>     lea rdx, srcSpec
   830 000027B5 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   831 000027B7 B8004E0000          <1>     mov eax, 4E00h
   832 000027BC CD21                <1>     int 21h
   833 000027BE 0F82ED010000        <1>     jc .badSrcFile
   834 000027C4 488B35A6DFFFFF      <1>     mov rsi, qword [destPtr]
   835 000027CB 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   836 000027CF B801290000          <1>     mov eax, 2901h
   837 000027D4 CD21                <1>     int 21h
   838                              <1> .md2Lp:
   839 000027D6 488D355FD9FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   840 000027DD 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   841 000027E1 B801290000          <1>     mov eax, 2901h
   842 000027E6 CD21                <1>     int 21h  
   843                              <1> ;Now depending on source and dest patterns, build a filename in renName
   844 000027E8 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   845 000027EC 488D3D86DFFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   846 000027F3 57                  <1>     push rdi
   847 000027F4 48A5                <1>     movsq
   848 000027F6 66A5                <1>     movsw
   849 000027F8 A4                  <1>     movsb
   850 000027F9 5F                  <1>     pop rdi
   851 000027FA 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   852 000027FE B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   853                              <1> .md2NameMake:
   854 00002803 AC                  <1>     lodsb   ;Get the char from the source string
   855 00002804 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   856 00002807 7502                <1>     jne .noStore    ;Dont store the char there
   857 00002809 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   858                              <1> .noStore:
   859 0000280B 48FFC7              <1>     inc rdi ;Goto next char position
   860 0000280E FFC9                <1>     dec ecx
   861 00002810 75F1                <1>     jnz .md2NameMake
   862 00002812 488D3523D9FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   863 00002819 488B3D49DFFFFF      <1>     mov rdi, qword [srcPtr]
   864 00002820 E8DF1B0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   865 00002825 488D354DDFFFFF      <1>     lea rsi, renName
   866 0000282C 488B3D3EDFFFFF      <1>     mov rdi, qword [destPtr]
   867 00002833 E8E51C0000          <1>     call FCBToAsciiz
   868 00002838 E8DB000000          <1>     call .prntFilespec  ;Prints the source filename
   869 0000283D E8AE010000          <1>     call copyMain       ;And copy it!
   870 00002842 731D                <1>     jnc .md2Ok
   871                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   872                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   873 00002844 3CFD                <1>     cmp al, -3
   874 00002846 0F8442010000        <1>     je .badBinCdevErr
   875 0000284C 3CFE                <1>     cmp al, -2
   876 0000284E 0F8443010000        <1>     je .rootDirFull
   877 00002854 3CFF                <1>     cmp al, -1      ;Source and destination same?
   878 00002856 0F8444010000        <1>     je .badSameFile 
   879 0000285C E95A010000          <1>     jmp .badExit    ;Else generic error message
   880                              <1> .md2Ok:
   881 00002861 F60531DFFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   882 00002868 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   883 0000286E B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   884 00002873 CD21                <1>     int 21h
   885 00002875 727C                <1>     jc .copyDone        ;If no more files, we are done!
   886 00002877 E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   887                              <1> .mod1:
   888                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   889 0000287C 800D16DFFFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   890 00002883 488D15DBDDFFFF      <1>     lea rdx, srcSpec
   891 0000288A 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   892 0000288C B8004E0000          <1>     mov eax, 4E00h
   893 00002891 CD21                <1>     int 21h
   894 00002893 0F8218010000        <1>     jc .badSrcFile  ;File not found error!!
   895                              <1> .mod1Lp:
   896 00002899 488D359CD8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   897 000028A0 488B3DC2DEFFFF      <1>     mov rdi, qword [srcPtr]
   898 000028A7 E8671B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   899 000028AC 488B3DBEDEFFFF      <1>     mov rdi, qword [destPtr]
   900 000028B3 E85B1B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   901 000028B8 E85B000000          <1>     call .prntFilespec
   902 000028BD E82E010000          <1>     call copyMain   ;And copy it!
   903 000028C2 731D                <1>     jnc .mod1Ok
   904                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   905                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   906 000028C4 3CFD                <1>     cmp al, -3
   907 000028C6 0F84C2000000        <1>     je .badBinCdevErr
   908 000028CC 3CFE                <1>     cmp al, -2
   909 000028CE 0F84C3000000        <1>     je .rootDirFull
   910 000028D4 3CFF                <1>     cmp al, -1      ;Source and destination same?
   911 000028D6 0F84C4000000        <1>     je .badSameFile 
   912 000028DC E9DA000000          <1>     jmp .badExit    ;Else generic error message
   913                              <1> .mod1Ok:
   914 000028E1 F605B1DEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   915 000028E8 7409                <1>     jz .copyDone
   916 000028EA B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   917 000028EF CD21                <1>     int 21h
   918 000028F1 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   919                              <1> 
   920                              <1> .copyDone:
   921 000028F3 E8CD000000          <1>     call .copyCleanup   ;Clean up resources!
   922 000028F8 B800020000          <1>     mov eax, 0200h      ;Beep a TAB out :)
   923 000028FD B209                <1>     mov dl, TAB
   924 000028FF CD21                <1>     int 21h
   925 00002901 8B058EDEFFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   926 00002907 E8E31C0000          <1>     call printDecimalWord   ;n File(s) copied
   927 0000290C 488D15EDE0FFFF      <1>     lea rdx, copyOk
   928 00002913 B409                <1>     mov ah, 09h
   929 00002915 CD21                <1>     int 21h    
   930                              <1>     return
    13                              <2> %%_ret:
    14 00002917 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> 
   932                              <1> .prntFilespec:
   933                              <1> ;Prints the filespec to STDOUT. If the path is 
   934 00002918 F6057ADEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   935                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000291F 74(17)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   936 00002921 488D153DDDFFFF      <1>     lea rdx, srcSpec
   937 00002928 4889D7              <1>     mov rdi, rdx
   938 0000292B E8ED1A0000          <1>     call strlen
   939 00002930 FFC9                <1>     dec ecx     ;Drop terminating null
   940 00002932 BB01000000          <1>     mov ebx, 1  ;STDOUT
   941 00002937 B800400000          <1>     mov eax, 4000h  ;Write
   942 0000293C CD21                <1>     int 21h
   943 0000293E E8BF180000          <1>     call printCRLF
   944                              <1>     return
    13                              <2> %%_ret:
    14 00002943 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   945                              <1> .doSwitch:
   946                              <1> ;Since switches can come before or after a name, handle them here!
   947                              <1> ;If invalid switch char, returns ZF=NZ.
   948                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   949                              <1> ;       rsi -> Switchchar
   950 00002944 56                  <1>     push rsi
   951 00002945 48FFC6              <1>     inc rsi ;Point to char past switchchar
   952 00002948 AC                  <1>     lodsb   ;Get this char, goto next char
   953 00002949 5E                  <1>     pop rsi
   954                              <1> .doSwitchRev:
   955 0000294A E8D81A0000          <1>     call ucChar
   956 0000294F 3C41                <1>     cmp al, "A"
   957 00002951 7510                <1>     jne .cB
   958 00002953 081D40DEFFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   959 00002959 802539DEFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   960                              <1> .cExit:
   961 00002960 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   962                              <1>     return
    13                              <2> %%_ret:
    14 00002962 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   963                              <1> .cB:
   964 00002963 3C42                <1>     cmp al, "B"
   965 00002965 7511                <1>     jne .cV
   966 00002967 F6D3                <1>     not bl  ;Reverse bits
   967 00002969 201D2ADEFFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   968 0000296F 800D23DEFFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   969 00002976 EBE8                <1>     jmp short .cExit
   970                              <1> .cV:
   971 00002978 3C56                <1>     cmp al, "V"
   972                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000297A 75(62)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   973 0000297C F60501DEFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   974 00002983 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   975                              <1>     ;Else, set it. We return it at the end!
   976 00002985 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   977 0000298A CD21                <1>     int 21h
   978 0000298C EBD2                <1>     jmp short .cExit
   979                              <1> 
   980                              <1> ;COPY Bad Exits!!
   981                              <1> .badBinCdevErr:
   982 0000298E 488D151BE3FFFF      <1>     lea rdx, binDevErr
   983 00002995 EB10                <1>     jmp short .badExitCmn
   984                              <1> .rootDirFull:
   985 00002997 488D15FEDFFFFF      <1>     lea rdx, fulRootDir
   986 0000299E EB07                <1>     jmp short .badExitCmn
   987                              <1> .badSameFile:
   988 000029A0 488D150BE0FFFF      <1>     lea rdx, noSelfCopy
   989                              <1> .badExitCmn:
   990 000029A7 E892F4FFFF          <1>     call badCmn     ;Print error message
   991 000029AC E942FFFFFF          <1>     jmp .copyDone   ;Clean resources
   992                              <1> .badSrcFile:
   993 000029B1 E878F4FFFF          <1>     call badFnf  ;File not found!!
   994 000029B6 E938FFFFFF          <1>     jmp .copyDone
   995                              <1> .badExit:
   996 000029BB E841F4FFFF          <1>     call badParamError
   997 000029C0 E92EFFFFFF          <1>     jmp .copyDone
   998                              <1> 
   999                              <1> .copyCleanup:
  1000                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
  1001                              <1> ;Handles are never open in this process!
  1002 000029C5 B8002E0000          <1>     mov eax, 2E00h
  1003 000029CA 8A05B4DDFFFF        <1>     mov al, byte [verifyFlg]
  1004 000029D0 CD21                <1>     int 21h
  1005 000029D2 4150                <1>     push r8
  1006 000029D4 4C8B05B0DDFFFF      <1>     mov r8, qword [cpBufPtr]
  1007 000029DB 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
  1008 000029DE 7407                <1>     jz .skipFree
  1009 000029E0 B800490000          <1>     mov eax, 4900h
  1010 000029E5 CD21                <1>     int 21h
  1011                              <1> .skipFree:
  1012 000029E7 4158                <1>     pop r8
  1013 000029E9 0F82C31C0000        <1>     jc freezePC ;If free fails, man....
  1014                              <1>     return
    13                              <2> %%_ret:
    14 000029EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> copyMain:
  1017                              <1> ;This is the main copying procedure! 
  1018                              <1> ;Start by checking the two files are not the same. If so, complain!
  1019                              <1> ;If returns CF=CY, error code in al. 
  1020                              <1> ;   If al = -1, same filename error!
  1021                              <1> ;   If al = -2, Root Dir full (couldn't create file)
  1022                              <1> ;   If al = -3, attempted binary read from a device
  1023                              <1> ;If returns CF=NC, file copied successfully.
  1024                              <1> ;Check the two files are not the same using truename in searchspec
  1025 000029F0 488D356EDCFFFF      <1>     lea rsi, srcSpec
  1026 000029F7 488D3D9ADAFFFF      <1>     lea rdi, searchSpec
  1027 000029FE B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1028 00002A03 CD21                <1>     int 21h 
  1029 00002A05 57                  <1>     push rdi    ;Save this searchSpec
  1030 00002A06 488D35DADCFFFF      <1>     lea rsi, destSpec
  1031 00002A0D 488D3D06DBFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1032 00002A14 B800600000          <1>     mov eax, 6000h
  1033 00002A19 CD21                <1>     int 21h
  1034 00002A1B 5E                  <1>     pop rsi     ;Get this ptr back
  1035 00002A1C B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1036 00002A21 CD2F                <1>     int 2Fh
  1037 00002A23 750F                <1>     jnz .notSameFile
  1038 00002A25 B0FF                <1>     mov al, -1  ;Same filename error!
  1039                              <1> .badExit:
  1040 00002A27 50                  <1>     push rax
  1041 00002A28 E8B0000000          <1>     call .exitCleanup
  1042 00002A2D 58                  <1>     pop rax
  1043 00002A2E F9                  <1>     stc
  1044                              <1>     return
    13                              <2> %%_ret:
    14 00002A2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1045                              <1> .badExitNoSpace:
  1046 00002A30 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1047 00002A32 EBF3                <1>     jmp short .badExit
  1048                              <1> .notSameFile:
  1049                              <1> ;Open source with read permission
  1050                              <1> ;Open destination with write permission
  1051 00002A34 488D152ADCFFFF      <1>     lea rdx, srcSpec
  1052 00002A3B B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1053 00002A40 CD21                <1>     int 21h
  1054 00002A42 72E3                <1>     jc .badExit
  1055 00002A44 6689053ADDFFFF      <1>     mov word [sourceHdl], ax
  1056 00002A4B 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1057                              <1> 
  1058 00002A4E B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1059 00002A53 CD21                <1>     int 21h
  1060 00002A55 6689152DDDFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1061 00002A5C F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1062 00002A5F 7412                <1>     jz .prepCopy
  1063                              <1> ;Check the binary flag was not set on this source filespec
  1064 00002A61 B0FD                <1>     mov al, -3  ;Prep the error code
  1065 00002A63 F6052FDDFFFF02      <1>     test byte [bCpFlg], binSrc
  1066 00002A6A 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1067 00002A6C 800D26DDFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1068                              <1> .prepCopy:
  1069 00002A73 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1070 00002A75 488B150FDDFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1071                              <1> .copyLoop:
  1072                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1073                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1074                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1075                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1076 00002A7C 0FB70D10DDFFFF      <1>     movzx ecx, word [wCpBufSz]
  1077 00002A83 0FB71DFBDCFFFF      <1>     movzx ebx, word [sourceHdl]
  1078 00002A8A B8003F0000          <1>     mov eax, 3F00h ;Read
  1079 00002A8F CD21                <1>     int 21h
  1080 00002A91 7294                <1>     jc .badExit
  1081 00002A93 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1082 00002A95 F605FDDCFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1083 00002A9C 7413                <1>     jz .notAscii
  1084                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1085 00002A9E 50                  <1>     push rax        ;Save the original char count
  1086 00002A9F 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1087 00002AA2 B01A                <1>     mov al, EOF
  1088 00002AA4 F2AE                <1>     repne scasb     ;Loop thru now!
  1089 00002AA6 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1090 00002AA8 59                  <1>     pop rcx         ;Get the original read count into ecx
  1091 00002AA9 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1092                              <1> ;Here if EOF found.
  1093 00002AAB FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1094 00002AAD 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1095 00002AAF FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1096                              <1> .notAscii:
  1097 00002AB1 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1098 00002AB3 7428                <1>     jz .exitCleanup
  1099 00002AB5 51                  <1>     push rcx    ;Save the number of bytes to write
  1100 00002AB6 52                  <1>     push rdx    ;Save the buffer ptr
  1101 00002AB7 E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1102 00002ABC 5A                  <1>     pop rdx
  1103 00002ABD 59                  <1>     pop rcx
  1104 00002ABE 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1105 00002AC4 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1106 00002AC9 CD21                <1>     int 21h
  1107 00002ACB 0F8256FFFFFF        <1>     jc .badExit
  1108 00002AD1 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1109 00002AD3 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1110 00002AD9 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1111 00002ADB 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1112                              <1> .exitCleanup:
  1113                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1114 00002ADD F605B5DCFFFF04      <1>     test byte [bCpFlg], ascDes
  1115 00002AE4 7425                <1>     jz .ecNoEOF
  1116 00002AE6 0FBF1D9ADCFFFF      <1>     movsx ebx, word [destHdl]
  1117 00002AED 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1118 00002AF3 7416                <1>     je .ecNoEOF
  1119 00002AF5 488B158FDCFFFF      <1>     mov rdx, qword [cpBufPtr]
  1120 00002AFC C6021A              <1>     mov byte [rdx], EOF
  1121 00002AFF B901000000          <1>     mov ecx, 1
  1122 00002B04 B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1123 00002B09 CD21                <1>     int 21h
  1124                              <1> .ecNoEOF:
  1125                              <1> ;Now close copy handles!
  1126 00002B0B 668B1D73DCFFFF      <1>     mov bx, word [sourceHdl]
  1127 00002B12 6681FBFFFF          <1>     cmp bx, -1
  1128 00002B17 7410                <1>     je .beSkipSource
  1129 00002B19 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1130 00002B1E CD21                <1>     int 21h
  1131 00002B20 66C7055CDCFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1132                              <1> .beSkipSource:
  1133 00002B29 668B1D57DCFFFF      <1>     mov bx, word [destHdl]
  1134 00002B30 6681FBFFFF          <1>     cmp bx, -1
  1135                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002B35 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002B37 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1136 00002B38 B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1137 00002B3D CD21                <1>     int 21h
  1138 00002B3F 66C7053FDCFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1139                              <1>     return
    13                              <2> %%_ret:
    14 00002B48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1140                              <1> 
  1141                              <1> .getWriteHandle:
  1142                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1143                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1144                              <1> ;Input: Nothing
  1145                              <1> ;Output: CF=NC: bx = Handle to the file
  1146                              <1> ;        CF=CY: File failed to open/create. 
  1147 00002B49 0FB71D37DCFFFF      <1>     movzx ebx, word [destHdl]
  1148 00002B50 6681FBFFFF          <1>     cmp bx, -1
  1149 00002B55 7402                <1>     je .gwHProceed
  1150 00002B57 F8                  <1>     clc     ;Clear the CF
  1151                              <1>     return
    13                              <2> %%_ret:
    14 00002B58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1152                              <1> .gwHProceed:
  1153                              <1> ;Here if the destination has not been opened yet!
  1154 00002B59 488D1587DBFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1155                              <1> ;Now we create/reopen the file here!
  1156 00002B60 F60532DCFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1157 00002B67 743E                <1>     jz .createFile
  1158                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1159                              <1> ;If this is more than file 0, we open
  1160 00002B69 813D22DCFFFF000000- <1>     cmp dword [dCpCnt], 0
  1160 00002B72 00                  <1>
  1161 00002B73 7432                <1>     je .createFile
  1162                              <1>     ;Now we open the file instead and append to the end
  1163 00002B75 B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1164 00002B7A CD21                <1>     int 21h
  1165                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B7C 72(58)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1166 00002B7E FF0511DCFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1167 00002B84 668905FCDBFFFF      <1>     mov word [destHdl], ax
  1168 00002B8B 0FB7D8              <1>     movzx ebx, ax
  1169 00002B8E 31C9                <1>     xor ecx, ecx
  1170 00002B90 31D2                <1>     xor edx, edx
  1171 00002B92 F60500DCFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1172 00002B99 7404                <1>     jz .gwHNoAscii
  1173 00002B9B FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1174 00002B9D FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1175                              <1> .gwHNoAscii:
  1176 00002B9F B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1177 00002BA4 CD21                <1>     int 21h
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00002BA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .createFile:
  1180 00002BA7 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1181 00002BAC 31C9                <1>     xor ecx, ecx    ;No file attributes
  1182 00002BAE CD21                <1>     int 21h
  1183                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002BB0 72(A6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1184 00002BB2 FF05DDDBFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1185 00002BB8 668905C8DBFFFF      <1>     mov word [destHdl], ax
  1186 00002BBF 0FB7D8              <1>     movzx ebx, ax
  1187                              <1>     return
    13                              <2> %%_ret:
    14 00002BC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1188                              <1> 
  1189                              <1> erase:
  1190 00002BC3 F605E2D4FFFFFF      <1>     test byte [arg1Flg], -1
  1191 00002BCA 0F8443F2FFFF        <1>     jz badArgError
  1192 00002BD0 E8F81A0000          <1>     call setDTA     ;Start by resetting the DTA
  1193 00002BD5 E8DC190000          <1>     call buildCommandPath   ;Get the relative path to the file
  1194                              <1> .dirLp:
  1195 00002BDA 488D3DB7D8FFFF      <1>     lea rdi, searchSpec
  1196 00002BE1 E813190000          <1>     call findLastPathComponant
  1197 00002BE6 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1198 00002BE9 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1199 00002BED B03F                <1>     mov al, "?"
  1200                              <1>     ;Store question marks in the name field
  1201 00002BEF 57                  <1>     push rdi
  1202 00002BF0 48FFC7              <1>     inc rdi ;Goto the first char
  1203 00002BF3 B90B000000          <1>     mov ecx, 11
  1204 00002BF8 F3AA                <1>     rep stosb
  1205 00002BFA 5F                  <1>     pop rdi
  1206 00002BFB 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1207 00002BFE B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1208 00002C03 CD21                <1>     int 21h
  1209 00002C05 3C01                <1>     cmp al, 1
  1210 00002C07 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1211                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1212                              <1>     ;No dirs to handle in here
  1213 00002C0D 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1214 00002C11 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1215 00002C14 E804190000          <1>     call FCBToAsciiz    ;Null terminates for free
  1216                              <1>     ;Count the number of ?'s, if 11, we print the message
  1217 00002C19 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1218 00002C1D 31C9                <1>     xor ecx, ecx
  1219                              <1> .wcScan:
  1220 00002C1F AC                  <1>     lodsb
  1221 00002C20 3C3F                <1>     cmp al, "?"
  1222 00002C22 7534                <1>     jne .endCount
  1223 00002C24 FFC1                <1>     inc ecx
  1224 00002C26 81F90B000000        <1>     cmp ecx, 11
  1225 00002C2C 75F1                <1>     jne .wcScan
  1226                              <1> .ynmsg:
  1227 00002C2E 488D150DDFFFFF      <1>     lea rdx, ynMes
  1228 00002C35 E8CF150000          <1>     call printString
  1229 00002C3A B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1230 00002C3C CD21                <1>     int 21h ;Get char in al
  1231 00002C3E E8E4170000          <1>     call ucChar ;Uppercase the char
  1232 00002C43 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1233 00002C45 740C                <1>     je .endCount1
  1234 00002C47 3C4E                <1>     cmp al, "N"
  1235                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002C49 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002C4B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1236 00002C4C E8B1150000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1237 00002C51 EBDB                <1>     jmp short .ynmsg    
  1238                              <1> .endCount1:
  1239 00002C53 E8AA150000          <1>     call printCRLF
  1240                              <1> .endCount:
  1241                              <1>     ;Now we copy our search template pathstring to delPath
  1242 00002C58 488D3D06DAFFFF      <1>     lea rdi, delPath
  1243 00002C5F 488D3532D8FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1244 00002C66 E8A8170000          <1>     call strcpy2         ;Copy the string over to delPath
  1245                              <1> .findFile:
  1246                              <1>     ;Now we find first/find next our way through the files
  1247 00002C6B 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1248 00002C6E 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1249 00002C70 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1250 00002C75 CD21                <1>     int 21h
  1251 00002C77 0F82B1F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1252                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1253 00002C7D E877180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1254 00002C82 488D35B3D4FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1255                              <1> .delNextFile:
  1256                              <1> ;rsi and rdi dont move here
  1257 00002C89 E885170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1258 00002C8E 488D15D0D9FFFF      <1>     lea rdx, delPath
  1259 00002C95 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1260 00002C9A CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1261 00002C9C 488D15F5D7FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1262 00002CA3 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1263 00002CA8 CD21                <1>     int 21h
  1264 00002CAA 73DD                <1>     jnc .delNextFile    
  1265 00002CAC F8                  <1>     clc ;Clear carry to indicate success
  1266                              <1>     return
    13                              <2> %%_ret:
    14 00002CAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1267                              <1> .noWildcard:
  1268                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1269                              <1>     ; a \*.*<NUL> over the null terminator
  1270 00002CAE 488D15E3D7FFFF      <1>     lea rdx, searchSpec
  1271 00002CB5 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1272 00002CBA B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1273 00002CBF CD21                <1>     int 21h
  1274 00002CC1 0F8267F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1275 00002CC7 F60565D4FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1276 00002CCE 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1277                              <1>     ;Else, we are dealing with a dir
  1278 00002CD0 4889D7              <1>     mov rdi, rdx
  1279 00002CD3 31C9                <1>     xor ecx, ecx
  1280 00002CD5 FFC9                <1>     dec ecx
  1281 00002CD7 F2AE                <1>     repne scasb ;Go to the end of the line!
  1282 00002CD9 48FFCF              <1>     dec rdi
  1283 00002CDC 0FB60546D3FFFF      <1>     movzx eax, byte [pathSep]
  1284 00002CE3 AA                  <1>     stosb
  1285 00002CE4 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1286 00002CE9 AB                  <1>     stosd
  1287 00002CEA E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1288                              <1> .delMain:   ;Call with rdx -> buffer!
  1289 00002CEF B800410000          <1>     mov eax, 4100h  ;Delete File 
  1290 00002CF4 CD21                <1>     int 21h
  1291                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002CF6 73(AD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1292 00002CF8 3C05                <1>     cmp al, errAccDen
  1293 00002CFA 0F84F8F0FFFF        <1>     je badAccError ;If the file is RO, fail!
  1294 00002D00 E917F1FFFF          <1>     jmp badFileError
  1295                              <1>     return
    13                              <2> %%_ret:
    14 00002D05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1296                              <1> 
  1297                              <1> date:
  1298 00002D06 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1299 00002D0D E830170000          <1>     call skipDelimiters
  1300 00002D12 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1301 00002D15 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1302                              <1>     ;Else, we do interactive mode!
  1303 00002D17 488D15A7DDFFFF      <1>     lea rdx, curDate
  1304 00002D1E B409                <1>     mov ah, 09h
  1305 00002D20 CD21                <1>     int 21h
  1306 00002D22 E811160000          <1>     call printFmtDate
  1307                              <1> .noCur:
  1308 00002D27 488D15A8DDFFFF      <1>     lea rdx, newDate
  1309 00002D2E B409                <1>     mov ah, 09h
  1310 00002D30 CD21                <1>     int 21h
  1311 00002D32 488D15BCDDFFFF      <1>     lea rdx, ukDate
  1312 00002D39 488D05A8DDFFFF      <1>     lea rax, usDate
  1313 00002D40 488D1DBBDDFFFF      <1>     lea rbx, jpDate
  1314 00002D47 803DE6D2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1315 00002D4E 480F47D3            <1>     cmova rdx, rbx
  1316 00002D52 480F42D0            <1>     cmovb rdx, rax
  1317 00002D56 B409                <1>     mov ah, 09h
  1318 00002D58 CD21                <1>     int 21h
  1319                              <1> 
  1320 00002D5A 488D158AD4FFFF      <1>     lea rdx, cpyBuffer
  1321 00002D61 C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1322 00002D64 B40A                <1>     mov ah, 0Ah
  1323 00002D66 CD21                <1>     int 21h
  1324 00002D68 52                  <1>     push rdx
  1325 00002D69 E894140000          <1>     call printCRLF
  1326 00002D6E 5A                  <1>     pop rdx
  1327 00002D6F 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1328                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D73 74(05)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1329                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1330 00002D75 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1331                              <1> .goDate:
  1332 00002D79 31C0                <1>     xor eax, eax    
  1333 00002D7B 803DB2D2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1334 00002D82 727B                <1>     jb .us
  1335 00002D84 0F87B7000000        <1>     ja .jpn
  1336                              <1>     ;Here for UK style dates
  1337 00002D8A E8F8180000          <1>     call getByte
  1338 00002D8F 725D                <1>     jc .badDate
  1339 00002D91 8805CCD8FFFF        <1>     mov byte [td3], al  ;Store the day
  1340 00002D97 E80C010000          <1>     call .validSep
  1341 00002D9C 7550                <1>     jne .badDate
  1342 00002D9E E8E4180000          <1>     call getByte
  1343 00002DA3 7249                <1>     jc .badDate
  1344 00002DA5 8805B9D8FFFF        <1>     mov byte [td4], al  ;Store month
  1345 00002DAB E8F8000000          <1>     call .validSep
  1346 00002DB0 753C                <1>     jne .badDate
  1347 00002DB2 E8DC180000          <1>     call getNum
  1348 00002DB7 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1349 00002DBC 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1350 00002DC1 732B                <1>     jae .badDate
  1351 00002DC3 66890597D8FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1352                              <1> .writeDate:
  1353 00002DCA E873160000          <1>     call skipDelimiters
  1354 00002DCF 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1355 00002DD2 751A                <1>     jne .badDate
  1356 00002DD4 0FB70D86D8FFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1357 00002DDB 668B1581D8FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1358 00002DE2 B8002B0000          <1>     mov eax, 2B00h
  1359 00002DE7 CD21                <1>     int 21h
  1360 00002DE9 84C0                <1>     test al, al
  1361                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002DEB 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002DED C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1362                              <1> .badDate:
  1363 00002DEE 488D15C1DCFFFF      <1>     lea rdx, badDate
  1364 00002DF5 E80F140000          <1>     call printString
  1365 00002DFA E928FFFFFF          <1>     jmp date.noCur
  1366                              <1> .us:
  1367 00002DFF E883180000          <1>     call getByte
  1368 00002E04 72E8                <1>     jc .badDate
  1369 00002E06 880558D8FFFF        <1>     mov byte [td4], al  ;Store the month
  1370 00002E0C E897000000          <1>     call .validSep
  1371 00002E11 75DB                <1>     jne .badDate
  1372 00002E13 E86F180000          <1>     call getByte
  1373 00002E18 72D4                <1>     jc .badDate
  1374 00002E1A 880543D8FFFF        <1>     mov byte [td3], al  ;Store day
  1375 00002E20 E883000000          <1>     call .validSep
  1376 00002E25 75C7                <1>     jne .badDate
  1377 00002E27 E867180000          <1>     call getNum
  1378 00002E2C E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1379 00002E31 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1380 00002E36 73B6                <1>     jae .badDate
  1381 00002E38 66890522D8FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1382                              <1> .writeHop:
  1383 00002E3F EB89                <1>     jmp short .writeDate
  1384                              <1> .jpn:
  1385 00002E41 E84D180000          <1>     call getNum
  1386 00002E46 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1387 00002E4B 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1388 00002E50 739C                <1>     jae .badDate
  1389 00002E52 66890508D8FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1390 00002E59 E84A000000          <1>     call .validSep
  1391 00002E5E 758E                <1>     jne .badDate
  1392 00002E60 E822180000          <1>     call getByte
  1393 00002E65 7287                <1>     jc .badDate
  1394 00002E67 8805F6D7FFFF        <1>     mov byte [td3], al  ;Store the day
  1395 00002E6D E836000000          <1>     call .validSep
  1396 00002E72 0F8576FFFFFF        <1>     jne .badDate
  1397 00002E78 E80A180000          <1>     call getByte
  1398 00002E7D 0F826BFFFFFF        <1>     jc .badDate
  1399 00002E83 8805DBD7FFFF        <1>     mov byte [td4], al  ;Store month
  1400 00002E89 EBB4                <1>     jmp short .writeHop
  1401                              <1> .doYear:
  1402 00002E8B 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1403                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002E90 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002E92 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1404                              <1> ;If the user specifies 80-99 it means 1980-1999
  1405                              <1> ;If the user specifies 00-79 it means 2000-2079
  1406 00002E93 BBD0070000          <1>     mov ebx, 2000
  1407 00002E98 B96C070000          <1>     mov ecx, 1900
  1408 00002E9D 3D50000000          <1>     cmp eax, 80     
  1409 00002EA2 0F42CB              <1>     cmovb ecx, ebx
  1410 00002EA5 01C8                <1>     add eax, ecx
  1411                              <1>     return
    13                              <2> %%_ret:
    14 00002EA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1412                              <1> .validSep:
  1413 00002EA8 AC                  <1>     lodsb           ;Get the char and return
  1414 00002EA9 3C2E                <1>     cmp al, "."
  1415                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002EAB 74(A7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1416 00002EAD 3C2F                <1>     cmp al, "/"
  1417                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002EAF 74(A7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1418 00002EB1 3C2D                <1>     cmp al, "-"
  1419                              <1>     return
    13                              <2> %%_ret:
    14 00002EB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1420                              <1> 
  1421                              <1> time:
  1422 00002EB4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1423 00002EBB E882150000          <1>     call skipDelimiters
  1424 00002EC0 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1425 00002EC3 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1426 00002EC5 488D1552DCFFFF      <1>     lea rdx, curTime
  1427 00002ECC B409                <1>     mov ah, 09h
  1428 00002ECE CD21                <1>     int 21h
  1429 00002ED0 E8FA130000          <1>     call printFmtTime
  1430                              <1> .noCur:
  1431 00002ED5 488D1553DCFFFF      <1>     lea rdx, newTime
  1432 00002EDC B409                <1>     mov ah, 09h
  1433 00002EDE CD21                <1>     int 21h
  1434                              <1> 
  1435 00002EE0 488D1582D2FFFF      <1>     lea rdx, inBuffer
  1436 00002EE7 C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1437 00002EEA B40A                <1>     mov ah, 0Ah
  1438 00002EEC CD21                <1>     int 21h
  1439 00002EEE 52                  <1>     push rdx
  1440 00002EEF 488D15B3D9FFFF      <1>     lea rdx, crlf
  1441 00002EF6 B409                <1>     mov ah, 09h
  1442 00002EF8 CD21                <1>     int 21h
  1443 00002EFA 5A                  <1>     pop rdx
  1444 00002EFB 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1445                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002EFF 74(B3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1446 00002F01 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1447                              <1> .goTime:
  1448 00002F05 C70552D7FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1448 00002F0E 00                  <1>
  1449 00002F0F 31C0                <1>     xor eax, eax   
  1450 00002F11 E871170000          <1>     call getByte
  1451 00002F16 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1452 00002F1C 880540D7FFFF        <1>     mov byte [td2], al  ;Save hours
  1453 00002F22 E89A000000          <1>     call .validsep
  1454 00002F27 0F8583000000        <1>     jne .badTime
  1455 00002F2D E855170000          <1>     call getByte
  1456 00002F32 727C                <1>     jc .badTime
  1457 00002F34 880527D7FFFF        <1>     mov byte [td1], al  ;Save minutes
  1458 00002F3A E882000000          <1>     call .validsep
  1459 00002F3F 740F                <1>     je .goSec
  1460 00002F41 48FFCE              <1>     dec rsi ;Go back a char
  1461 00002F44 E8F9140000          <1>     call skipDelimiters ;Skip any delimiters
  1462 00002F49 803E0D              <1>     cmp byte [rsi], CR
  1463 00002F4C 743E                <1>     je .setTime
  1464 00002F4E EB60                <1>     jmp short .badTime
  1465                              <1> .goSec:
  1466 00002F50 E878000000          <1>     call .checkNum
  1467 00002F55 7259                <1>     jc .badTime
  1468 00002F57 E82B170000          <1>     call getByte
  1469 00002F5C 7252                <1>     jc .badTime
  1470 00002F5E 880500D7FFFF        <1>     mov byte [td4], al  ;Save seconds
  1471 00002F64 AC                  <1>     lodsb       ;Move rsi forwards
  1472 00002F65 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1473 00002F67 740F                <1>     je .goMsec
  1474 00002F69 48FFCE              <1>     dec rsi ;Go back a char
  1475 00002F6C E8D1140000          <1>     call skipDelimiters ;Skip any delimiters
  1476 00002F71 803E0D              <1>     cmp byte [rsi], CR
  1477 00002F74 7416                <1>     je .setTime
  1478 00002F76 EB38                <1>     jmp short .badTime
  1479                              <1> .goMsec:
  1480 00002F78 E850000000          <1>     call .checkNum
  1481 00002F7D 7231                <1>     jc .badTime
  1482 00002F7F E803170000          <1>     call getByte
  1483 00002F84 722A                <1>     jc .badTime
  1484 00002F86 8805D7D6FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1485                              <1> .setTime:
  1486 00002F8C E8B1140000          <1>     call skipDelimiters
  1487 00002F91 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1488 00002F94 751A                <1>     jne .badTime
  1489 00002F96 0FB70DC4D6FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1490 00002F9D 0FB715BFD6FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1491 00002FA4 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1492 00002FA9 CD21                <1>     int 21h
  1493 00002FAB A8FF                <1>     test al, -1
  1494                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002FAD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002FAF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1495                              <1> .badTime:
  1496 00002FB0 488D1558DBFFFF      <1>     lea rdx, badTime
  1497 00002FB7 E84D120000          <1>     call printString
  1498 00002FBC E914FFFFFF          <1>     jmp time.noCur
  1499                              <1> .validsep:
  1500 00002FC1 AC                  <1>     lodsb
  1501 00002FC2 3A0579D0FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1502                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FC8 74(AF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1503 00002FCA 3C2E                <1>     cmp al, "."
  1504                              <1>     return
    13                              <2> %%_ret:
    14 00002FCC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1505                              <1> .checkNum:
  1506 00002FCD AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1507 00002FCE 48FFCE              <1>     dec rsi
  1508 00002FD1 3C30                <1>     cmp al, "0"
  1509 00002FD3 7206                <1>     jb .cnbad
  1510 00002FD5 3C39                <1>     cmp al, "9"
  1511 00002FD7 7702                <1>     ja .cnbad
  1512 00002FD9 F8                  <1>     clc
  1513                              <1>     return
    13                              <2> %%_ret:
    14 00002FDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1514                              <1> .cnbad:
  1515 00002FDB F9                  <1>     stc
  1516                              <1>     return
    13                              <2> %%_ret:
    14 00002FDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1517                              <1> ctty:
  1518 00002FDD F605C8D0FFFFFF      <1>     test byte [arg1Flg], -1
  1519 00002FE4 0F8429EEFFFF        <1>     jz badArgError
  1520 00002FEA F605BED0FFFFFF      <1>     test byte [arg2Flg], -1
  1521 00002FF1 0F851CEEFFFF        <1>     jnz badArgError
  1522 00002FF7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1523 00002FFE 0FB605A8D0FFFF      <1>     movzx eax, byte [arg1Off]
  1524 00003005 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1525 00003008 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1526 0000300C 750F                <1>     jne .noDrive
  1527 0000300E 0FB60599D0FFFF      <1>     movzx eax, byte [arg1FCBret]
  1528 00003015 3CFF                <1>     cmp al, -1
  1529 00003017 0F84EDEDFFFF        <1>     je badDriveError
  1530                              <1> .noDrive:
  1531                              <1>     ;Now we open the provided file
  1532 0000301D E8AC150000          <1>     call copyArgumentToSearchSpec
  1533 00003022 488D156FD4FFFF      <1>     lea rdx, searchSpec
  1534 00003029 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1535 0000302E CD21                <1>     int 21h
  1536 00003030 0F82E6EDFFFF        <1>     jc badFileError
  1537 00003036 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1538 00003039 B800440000          <1>     mov eax, 4400h  ;Get device word
  1539 0000303E CD21                <1>     int 21h
  1540 00003040 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1541 00003043 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1542                              <1>     ;Now we set this handle to be STDIO
  1543 00003045 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1544 00003048 30F6                <1>     xor dh, dh
  1545 0000304A B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1546 0000304F CD21                <1>     int 21h
  1547                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1548 00003051 31C9                <1>     xor ecx, ecx    ;STDIN
  1549 00003053 B446                <1>     mov ah, 46h
  1550 00003055 CD21                <1>     int 21h
  1551 00003057 FFC1                <1>     inc ecx         ;STDOUT
  1552 00003059 B446                <1>     mov ah, 46h
  1553 0000305B CD21                <1>     int 21h
  1554 0000305D FFC1                <1>     inc ecx         ;STDERR
  1555 0000305F B446                <1>     mov ah, 46h
  1556 00003061 CD21                <1>     int 21h
  1557 00003063 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
  1558 00003065 CD21                <1>     int 21h
  1559                              <1>     return
    13                              <2> %%_ret:
    14 00003067 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1560                              <1> .badCharDev:
  1561 00003068 488D15D1DBFFFF      <1>     lea rdx, badDev
  1562 0000306F B409                <1>     mov ah, 09h
  1563 00003071 CD21                <1>     int 21h
  1564 00003073 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1565 00003075 CD21                <1>     int 21h
  1566                              <1>     return
    13                              <2> %%_ret:
    14 00003077 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1567                              <1> 
  1568                              <1> cls:  
  1569 00003078 B800440000          <1>     mov eax, 4400h  ;Get device info
  1570 0000307D BB01000000          <1>     mov ebx, 1      ;for handle 1
  1571 00003082 CD21                <1>     int 21h         ;in dx
  1572 00003084 F7C280000000        <1>     test edx, devCharDev
  1573 0000308A 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1574 0000308C F7C210000000        <1>     test edx, charDevFastOut
  1575 00003092 743E                <1>     jz .doAnsi
  1576                              <1>     ;Test if Int 29h uses Int 30h
  1577                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1578                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1579 00003094 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1580 00003099 CD21                <1>     int 21h
  1581                              <1> .biosCheck:
  1582 0000309B 66813BCD30          <1>     cmp word [rbx], 30CDh
  1583 000030A0 740C                <1>     je .biosConfirmed
  1584 000030A2 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1585 000030A7 7429                <1>     je .doAnsi
  1586 000030A9 48FFC3              <1>     inc rbx
  1587 000030AC EBED                <1>     jmp short .biosCheck
  1588                              <1> .biosConfirmed:
  1589                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1590 000030AE B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1591 000030B0 31DB                <1>     xor ebx, ebx
  1592 000030B2 CD30                <1>     int 30h
  1593 000030B4 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1594 000030B6 CD30                <1>     int 30h
  1595 000030B8 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1596 000030BB FECA                <1>     dec dl
  1597 000030BD B619                <1>     mov dh, 25  ;Number of rows is standard
  1598 000030BF 31C0                <1>     xor eax, eax
  1599 000030C1 89C1                <1>     mov ecx, eax
  1600 000030C3 B707                <1>     mov bh, 7   ;Screen attributes
  1601 000030C5 B406                <1>     mov ah, 6   ;Scroll
  1602 000030C7 CD30                <1>     int 30h
  1603 000030C9 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1604 000030CB B700                <1>     mov bh, 0   ;Page 0
  1605 000030CD B402                <1>     mov ah, 2
  1606 000030CF CD30                <1>     int 30h
  1607                              <1>     return
    13                              <2> %%_ret:
    14 000030D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1608                              <1> .doAnsi:
  1609                              <1> ;4 chars in the ansi routine
  1610                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1611                              <1> ; understand ANSI codes
  1612 000030D2 488D35EEDDFFFF      <1>     lea rsi, ansiCls
  1613 000030D9 B904000000          <1>     mov ecx, 4
  1614 000030DE B406                <1>     mov ah, 06h ;Raw char output
  1615                              <1> .ansiLp:
  1616 000030E0 AC                  <1>     lodsb   ;Get the char in 
  1617 000030E1 88C2                <1>     mov dl, al
  1618 000030E3 CD21                <1>     int 21h
  1619 000030E5 FFC9                <1>     dec ecx
  1620 000030E7 75F7                <1>     jnz .ansiLp
  1621                              <1>     return
    13                              <2> %%_ret:
    14 000030E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1622                              <1> 
  1623                              <1> break:
  1624 000030EA F605BBCFFFFFFF      <1>     test byte [arg1Flg], -1
  1625 000030F1 752D                <1>     jnz .argumentProvided
  1626                              <1>     ;Here we just get the status of break
  1627 000030F3 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1628 000030F8 CD21                <1>     int 21h
  1629 000030FA 88D3                <1>     mov bl, dl
  1630 000030FC 488D15DFDBFFFF      <1>     lea rdx, breakIs
  1631 00003103 B409                <1>     mov ah, 09h
  1632 00003105 CD21                <1>     int 21h
  1633 00003107 488D15CFDBFFFF      <1>     lea rdx, onMes
  1634 0000310E 488D0DC2DBFFFF      <1>     lea rcx, offMes
  1635 00003115 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1636 00003117 480F44D1            <1>     cmovz rdx, rcx
  1637 0000311B B409                <1>     mov ah, 09h
  1638 0000311D CD21                <1>     int 21h
  1639                              <1>     return
    13                              <2> %%_ret:
    14 0000311F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1640                              <1> .argumentProvided:
  1641 00003120 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1642 00003124 AD                  <1>     lodsd   ;Read the word
  1643 00003125 89C3                <1>     mov ebx, eax
  1644 00003127 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1645 0000312C C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1646 0000312F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1647 00003134 7416                <1>     je .maybeOn
  1648 00003136 663D4F46            <1>     cmp ax, "OF"
  1649 0000313A 7523                <1>     jne .badOnOff
  1650 0000313C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1651 00003141 6681FB4620          <1>     cmp bx, "F "
  1652 00003146 7517                <1>     jne .badOnOff
  1653                              <1>     ;Set off
  1654 00003148 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1655 0000314A EB0B                <1>     jmp short .setBreak
  1656                              <1> .maybeOn:
  1657 0000314C 663D4F4E            <1>     cmp ax, "ON"
  1658 00003150 750D                <1>     jne .badOnOff
  1659                              <1>     ;Set on
  1660 00003152 BA01000000          <1>     mov edx, 1
  1661                              <1> .setBreak:
  1662 00003157 B801330000          <1>     mov eax, 3301h  ;Set break
  1663 0000315C CD21                <1>     int 21h
  1664                              <1>     return
    13                              <2> %%_ret:
    14 0000315E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1665                              <1> .badOnOff:
  1666 0000315F 488D1571DDFFFF      <1>     lea rdx, badOnOff
  1667 00003166 B409                <1>     mov ah, 09h
  1668 00003168 CD21                <1>     int 21h
  1669                              <1>     return
    13                              <2> %%_ret:
    14 0000316A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1670                              <1> 
  1671                              <1> verify:
  1672 0000316B F6053ACFFFFFFF      <1>     test byte [arg1Flg], -1
  1673 00003172 752D                <1>     jnz .argumentProvided
  1674                              <1>     ;Here we just get the status of break
  1675 00003174 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1676 00003179 CD21                <1>     int 21h
  1677 0000317B 88C3                <1>     mov bl, al
  1678 0000317D 488D1568DBFFFF      <1>     lea rdx, verifyIs
  1679 00003184 B409                <1>     mov ah, 09h
  1680 00003186 CD21                <1>     int 21h
  1681 00003188 488D154EDBFFFF      <1>     lea rdx, onMes
  1682 0000318F 488D0D41DBFFFF      <1>     lea rcx, offMes
  1683 00003196 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1684 00003198 480F44D1            <1>     cmovz rdx, rcx
  1685 0000319C B409                <1>     mov ah, 09h
  1686 0000319E CD21                <1>     int 21h
  1687                              <1>     return
    13                              <2> %%_ret:
    14 000031A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1688                              <1> .argumentProvided:
  1689 000031A1 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1690 000031A5 AD                  <1>     lodsd   ;Read the word
  1691 000031A6 89C3                <1>     mov ebx, eax
  1692 000031A8 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1693 000031AD C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1694 000031B0 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1695 000031B5 7416                <1>     je .maybeOn
  1696 000031B7 663D4F46            <1>     cmp ax, "OF"
  1697 000031BB 751F                <1>     jne .badOnOff
  1698 000031BD 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1699 000031C2 6681FB4620          <1>     cmp bx, "F "
  1700 000031C7 7513                <1>     jne .badOnOff
  1701                              <1>     ;Set off
  1702 000031C9 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1703 000031CB EB0A                <1>     jmp short .setVerify
  1704                              <1> .maybeOn:
  1705 000031CD 663D4F4E            <1>     cmp ax, "ON"
  1706 000031D1 7509                <1>     jne .badOnOff
  1707                              <1>     ;Set on
  1708 000031D3 31C0                <1>     xor eax, eax
  1709 000031D5 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1710                              <1> .setVerify:
  1711 000031D7 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1712 000031D9 CD21                <1>     int 21h
  1713                              <1>     return
    13                              <2> %%_ret:
    14 000031DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1714                              <1> .badOnOff:
  1715 000031DC 488D15F4DCFFFF      <1>     lea rdx, badOnOff
  1716 000031E3 B409                <1>     mov ah, 09h
  1717 000031E5 CD21                <1>     int 21h
  1718                              <1>     return
    13                              <2> %%_ret:
    14 000031E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1719                              <1> 
  1720                              <1> rename:
  1721 000031E8 F605BDCEFFFFFF      <1>     test byte [arg1Flg], -1
  1722 000031EF 0F841EECFFFF        <1>     jz badArgError
  1723 000031F5 F605B3CEFFFFFF      <1>     test byte [arg2Flg], -1
  1724 000031FC 0F8411ECFFFF        <1>     jz badArgError    
  1725                              <1>     ;Initialise the variables!
  1726 00003202 488D355CD4FFFF      <1>     lea rsi, srcSpec
  1727 00003209 48893559D5FFFF      <1>     mov qword [srcPtr], rsi
  1728 00003210 488D35D0D4FFFF      <1>     lea rsi, destSpec
  1729 00003217 48893553D5FFFF      <1>     mov qword [destPtr], rsi
  1730                              <1>     ;Check the second path is just a filename!
  1731 0000321E 0FB6058BCEFFFF      <1>     movzx eax, byte [arg2Off]
  1732 00003225 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1733 0000322C 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1734 0000322F 488D3D62D2FFFF      <1>     lea rdi, searchSpec
  1735 00003236 57                  <1>     push rdi
  1736 00003237 E837130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1737 0000323C 5F                  <1>     pop rdi
  1738 0000323D 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1739 00003241 0F84CCEBFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1740 00003247 4889FE              <1>     mov rsi, rdi
  1741                              <1> .destScan:
  1742 0000324A AC                  <1>     lodsb   ;Get the char
  1743 0000324B 3A05D8CDFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1744 00003251 0F84BCEBFFFF        <1>     je badArgError
  1745 00003257 84C0                <1>     test al, al
  1746 00003259 75EF                <1>     jnz .destScan
  1747                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1748 0000325B 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1749 0000325F 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1749 00003268 3F                  <1>
  1750 00003269 B903000000          <1>     mov ecx, 3  ;24 bytes
  1751 0000326E F348AB              <1>     rep stosq
  1752 00003271 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1753 00003272 488D351FD2FFFF      <1>     lea rsi, searchSpec
  1754 00003279 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1755 0000327D B80D290000          <1>     mov eax, 290Dh
  1756 00003282 CD21                <1>     int 21h     
  1757 00003284 50                  <1>     push rax    ;Save the WC signature
  1758 00003285 E82C130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1759 0000328A 488D3D07D2FFFF      <1>     lea rdi, searchSpec
  1760 00003291 E863120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1761 00003296 4889FE              <1>     mov rsi, rdi
  1762 00003299 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1763 0000329C 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1764 000032A0 B80D290000          <1>     mov eax, 290Dh
  1765 000032A5 CD21                <1>     int 21h
  1766 000032A7 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1767 000032A8 88CC                <1>     mov ah, cl
  1768 000032AA 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1769 000032AD 0F84EC000000        <1>     jz .noWC
  1770 000032B3 488D35DED1FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1771                              <1>     ;Now we check if we have a path to actually handle
  1772 000032BA 4839F3              <1>     cmp rbx, rsi
  1773 000032BD 7444                <1>     je .noPath
  1774 000032BF C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1775 000032C3 488D35CED1FFFF      <1>     lea rsi, searchSpec
  1776 000032CA 488D3D94D3FFFF      <1>     lea rdi, srcSpec
  1777 000032D1 56                  <1>     push rsi
  1778 000032D2 E82D110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1779 000032D7 5E                  <1>     pop rsi
  1780 000032D8 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1781 000032DB 8A0548CDFFFF        <1>     mov al, byte [pathSep]
  1782 000032E1 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1783 000032E2 48893D80D4FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1784 000032E9 488D3DF7D3FFFF      <1>     lea rdi, destSpec
  1785 000032F0 E80F110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1786 000032F5 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1787 000032F8 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1788 000032F9 48893D71D4FFFF      <1>     mov qword [destPtr], rdi
  1789 00003300 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1790                              <1> .noPath:
  1791                              <1>     ;Now we have where to copy the files to, we can start our work!
  1792 00003303 E8C5130000          <1>     call setDTA
  1793 00003308 488D1589D1FFFF      <1>     lea rdx, searchSpec
  1794 0000330F 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1795 00003311 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1796 00003316 CD21                <1>     int 21h
  1797 00003318 0F8207EBFFFF        <1>     jc badDupFnf    ;If no file was found!
  1798                              <1> .wcLoop:
  1799                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1800 0000331E 488D3517CEFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1801 00003325 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1802 00003329 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1803 0000332E CD21                <1>     int 21h 
  1804                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1805 00003330 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1806 00003334 488D3D3ED4FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1807 0000333B 57                  <1>     push rdi
  1808 0000333C 48A5                <1>     movsq
  1809 0000333E 66A5                <1>     movsw
  1810 00003340 A4                  <1>     movsb
  1811 00003341 5F                  <1>     pop rdi
  1812 00003342 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1813 00003346 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1814                              <1> .wcNameMake:
  1815 0000334B AC                  <1>     lodsb   ;Get the char from the source string
  1816 0000334C 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1817 0000334F 7502                <1>     jne .noStore    ;Dont store the char there
  1818 00003351 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1819                              <1> .noStore:
  1820 00003353 48FFC7              <1>     inc rdi ;Goto next char position
  1821 00003356 FFC9                <1>     dec ecx
  1822 00003358 75F1                <1>     jnz .wcNameMake
  1823                              <1> ;renName now has the FCB name for the file we wish to make!
  1824                              <1> ;Now make the two paths!
  1825 0000335A 488D35DBCDFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1826 00003361 488B3D01D4FFFF      <1>     mov rdi, qword [srcPtr]
  1827 00003368 E897100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1828 0000336D 488D3505D4FFFF      <1>     lea rsi, renName
  1829 00003374 488B3DF6D3FFFF      <1>     mov rdi, qword [destPtr]
  1830 0000337B E89D110000          <1>     call FCBToAsciiz
  1831 00003380 488D15DED2FFFF      <1>     lea rdx, srcSpec
  1832 00003387 488D3D59D3FFFF      <1>     lea rdi, destSpec
  1833 0000338E B800560000          <1>     mov eax, 5600h
  1834 00003393 CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1835 00003395 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1836 0000339A CD21                <1>     int 21h
  1837 0000339C 7380                <1>     jnc .wcLoop     ;And process it too!
  1838                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 0000339E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1839                              <1> .noWC:
  1840 0000339F E812120000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1841 000033A4 0FB60505CDFFFF      <1>     movzx eax, byte [arg2Off]
  1842 000033AB 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1843 000033B2 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1844 000033B5 488D3D2BD3FFFF      <1>     lea rdi, destSpec
  1845 000033BC 57                  <1>     push rdi
  1846 000033BD E8B1110000          <1>     call cpDelimPathToBufz
  1847 000033C2 5F                  <1>     pop rdi
  1848 000033C3 488D15CED0FFFF      <1>     lea rdx, searchSpec
  1849 000033CA B800560000          <1>     mov eax, 5600h
  1850 000033CF CD21                <1>     int 21h
  1851                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000033D1 73(9E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1852 000033D3 E94DEAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1853                              <1> 
  1854                              <1> 
  1855                              <1> touch:
  1856                              <1> ;Temporarily used to create files
  1857 000033D8 F605CDCCFFFFFF      <1>     test byte [arg1Flg], -1
  1858 000033DF 0F842EEAFFFF        <1>     jz badArgError
  1859 000033E5 E8CC110000          <1>     call buildCommandPath
  1860 000033EA 488D15A7D0FFFF      <1>     lea rdx, searchSpec
  1861 000033F1 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1862 000033F6 31C9                <1>     xor ecx, ecx
  1863 000033F8 CD21                <1>     int 21h
  1864 000033FA 721D                <1>     jc .touch1
  1865                              <1> .touchClose:
  1866 000033FC 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1867 000033FF B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1868 00003404 CD2F                <1>     int 2fh
  1869 00003406 89C1                <1>     mov ecx, eax    ;Move the time here
  1870 00003408 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1871 0000340A B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1872 0000340F CD21                <1>     int 21h
  1873 00003411 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1874 00003416 CD21                <1>     int 21h
  1875                              <1>     return
    13                              <2> %%_ret:
    14 00003418 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1876                              <1> .touch1:
  1877 00003419 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1878 0000341B 7509                <1>     jne .touchError ;If not, this is a proper error!
  1879 0000341D B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1880 00003422 CD21                <1>     int 21h
  1881 00003424 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1882                              <1> .touchError:
  1883 00003426 3C03                <1>     cmp al, errPnf
  1884 00003428 0F84E5E9FFFF        <1>     je badArgError
  1885 0000342E 3C02                <1>     cmp al, errFnf
  1886 00003430 0F84F8E9FFFF        <1>     je badFnf
  1887 00003436 E9BDE9FFFF          <1>     jmp badAccError
  1888                              <1>     
  1889                              <1> 
  1890                              <1> join:
  1891                              <1> ;Mock join command, to test join. Make an external command.
  1892                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1893 0000343B F605AF000000FF      <1>     test byte [.joinOn], -1
  1894 00003442 743D                <1>     jz .okJoin
  1895                              <1> .joindisable:
  1896 00003444 B800520000          <1>     mov eax, 5200h  
  1897 00003449 CD21                <1>     int 21h
  1898                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1899 0000344B B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1900 00003450 CD2A                <1>     int 2Ah
  1901 00003452 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1902 00003456 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1903 0000345A 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1904 00003460 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1905 00003463 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1906 00003467 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1907 0000346A B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1908 0000346F CD2A                <1>     int 2Ah
  1909 00003471 C6057900000000      <1>     mov byte [.joinOn], 0
  1910 00003478 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1911 0000347F EB45                <1>     jmp short .joinExit
  1912                              <1> .okJoin:
  1913 00003481 C60569000000FF      <1>     mov byte [.joinOn], -1
  1914 00003488 B800520000          <1>     mov eax, 5200h  
  1915 0000348D CD21                <1>     int 21h
  1916 0000348F 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1917 00003493 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1918                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1919 00003497 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1920 0000349C CD2A                <1>     int 2Ah
  1921 0000349E 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1922 000034A4 4889DF              <1>     mov rdi, rbx
  1923 000034A7 488D3544000000      <1>     lea rsi, .joinPath
  1924 000034AE B90C000000          <1>     mov ecx, .joinPathL
  1925 000034B3 F3A4                <1>     rep movsb   ;Copy chars over
  1926 000034B5 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1927 000034B8 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1928 000034BD CD2A                <1>     int 2Ah
  1929 000034BF 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1930                              <1> .joinExit:
  1931 000034C6 B800090000          <1>     mov eax, 0900h
  1932 000034CB CD21                <1>     int 21h
  1933                              <1>     return
    13                              <2> %%_ret:
    14 000034CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1934 000034CE 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1934 000034D7 61626C65640D0A24    <1>
  1935 000034DF 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1935 000034E8 7361626C65640D0A24  <1>
  1936 000034F1 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1937 000034F2 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1937 000034FB 535400              <1>
  1938                              <1> .joinPathL  equ $ - .joinPath 
  1939                              <1> 
  1940                              <1> subst:
  1941                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1942                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1943 000034FE F605D3000000FF      <1>     test byte [.substOn], -1
  1944 00003505 7443                <1>     jz .okSubst
  1945                              <1> .substdisable:
  1946 00003507 B800520000          <1>     mov eax, 5200h  
  1947 0000350C CD21                <1>     int 21h
  1948                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1949 0000350E B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1950 00003513 CD2A                <1>     int 2Ah
  1951 00003515 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1952 00003519 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1953 00003520 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1954 00003526 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1955 00003529 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1956 0000352D 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1957 00003533 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1958 00003538 CD2A                <1>     int 2Ah
  1959 0000353A C6059700000000      <1>     mov byte [.substOn], 0
  1960 00003541 488D157D000000      <1>     lea rdx, .substDisableMsg
  1961 00003548 EB61                <1>     jmp short .substExit
  1962                              <1> .okSubst:
  1963 0000354A C60587000000FF      <1>     mov byte [.substOn], -1
  1964 00003551 B800520000          <1>     mov eax, 5200h  
  1965 00003556 CD21                <1>     int 21h
  1966 00003558 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1967 0000355D CD2A                <1>     int 2Ah
  1968 0000355F 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1969 00003563 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1970 0000356A 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1971 0000356E 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1972 00003575 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1973 00003579 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1974                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1975 00003580 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1976 00003586 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1977 0000358C 4889DF              <1>     mov rdi, rbx
  1978 0000358F 488D3543000000      <1>     lea rsi, .substPath
  1979 00003596 B90C000000          <1>     mov ecx, .substPathL
  1980 0000359B F3A4                <1>     rep movsb   ;Copy chars over
  1981 0000359D B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1982 000035A2 CD2A                <1>     int 2Ah
  1983 000035A4 488D1508000000      <1>     lea rdx, .substEnableMsg
  1984                              <1> .substExit:
  1985 000035AB B800090000          <1>     mov eax, 0900h
  1986 000035B0 CD21                <1>     int 21h
  1987                              <1>     return
    13                              <2> %%_ret:
    14 000035B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1988 000035B3 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1988 000035BC 6E61626C65640D0A24  <1>
  1989 000035C5 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1989 000035CE 697361626C65640D0A- <1>
  1989 000035D7 24                  <1>
  1990 000035D8 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1991 000035D9 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1991 000035E2 535400              <1>
  1992                              <1> .substPathL  equ $ - .substPath 
  1993                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1994                              <1> truename:
  1995 000035E5 F605C0CAFFFFFF      <1>     test byte [arg1Flg], -1
  1996 000035EC 0F8421E8FFFF        <1>     jz badArgError
  1997 000035F2 E8BF0F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1998 000035F7 488D359ACEFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1999 000035FE 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  2000 00003601 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  2001 00003606 CD21                <1>     int 21h
  2002 00003608 730D                <1>     jnc .writePath
  2003 0000360A 3C02                <1>     cmp al, errFnf
  2004 0000360C 0F840AE8FFFF        <1>     je badFileError
  2005 00003612 E9EAE7FFFF          <1>     jmp badParamError
  2006                              <1> .writePath:
  2007 00003617 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  2008 0000361A B9FFFFFFFF          <1>     mov ecx, -1
  2009 0000361F 30C0                <1>     xor al, al
  2010 00003621 F2AE                <1>     repne scasb     ;Get the new len
  2011 00003623 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  2012 00003625 FFC9                <1>     dec ecx
  2013 00003627 BB01000000          <1>     mov ebx, 01
  2014 0000362C B440                <1>     mov ah, 40h
  2015 0000362E CD21                <1>     int 21h
  2016 00003630 E8CD0B0000          <1>     call printCRLF
  2017                              <1>     return
    13                              <2> %%_ret:
    14 00003635 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2018                              <1> 
  2019                              <1> label:
  2020                              <1> ;Displays/Changes/Deletes the file label
  2021 00003636 488D1508000000      <1>     lea rdx, .l1
  2022 0000363D B800090000          <1>     mov eax, 0900h
  2023 00003642 CD21                <1>     int 21h
  2024                              <1>     return
    13                              <2> %%_ret:
    14 00003644 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2025 00003645 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  2025 0000364E 6E20756E696D706C65- <1>
  2025 00003657 6D656E7465640D0A24  <1>
  2026                              <1> 
  2027                              <1> mklbl:
  2028                              <1>     ;lea rdx, .l1
  2029                              <1>     ;mov cx, 08h ;Make a label
  2030                              <1>     ;mov eax, 3C00h
  2031                              <1>     ;int 21h
  2032                              <1> 
  2033                              <1>     ;mov ebx, eax
  2034                              <1>     ;mov eax, 3E00h  ;Close the handle
  2035                              <1>     ;int 21h
  2036                              <1>     ;return
  2037                              <1> 
  2038                              <1> ;.l1: db "TESTLABEL",0
  2039 00003660 488D1508000000      <1>     lea rdx, .l1
  2040 00003667 B800160000          <1>     mov eax, 1600h  ;Create FCB
  2041 0000366C CD21                <1>     int 21h
  2042                              <1>     return
    13                              <2> %%_ret:
    14 0000366E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2043                              <1> .l1:
  2044                              <1>     istruc exFcb
  2045 0000366F FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2046 00003670 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2047 00003676 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2048 00003677 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  2049 0000367F 4C2020              <1>     at exFcb.fileext,   db "L  "
  2050 00003682 00000000            <1>     at exFcb.curBlock,  dd 0
  2051 00003686 00<rep 15h>         <1>     iend 
  2052                              <1> rmlbl:
  2053 0000369B 488D1508000000      <1>     lea rdx, .l1
  2054 000036A2 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  2055 000036A7 CD21                <1>     int 21h
  2056                              <1>     return
    13                              <2> %%_ret:
    14 000036A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2057                              <1> .l1:    ;FCB to volume label
  2058                              <1>     istruc exFcb
  2059 000036AA FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2060 000036AB 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2061 000036B1 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2062 000036B2 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  2063 000036BA 3F3F3F              <1>     at exFcb.fileext,   db "???"
  2064 000036BD 00000000            <1>     at exFcb.curBlock,  dd 0
  2065 000036C1 00<rep 15h>         <1>     iend 
  2066                              <1> 
  2067                              <1> rnlbl:
  2068 000036D6 488D1508000000      <1>     lea rdx, .l1
  2069 000036DD B800170000          <1>     mov eax, 1700h
  2070 000036E2 CD21                <1>     int 21h
  2071                              <1>     return
    13                              <2> %%_ret:
    14 000036E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2072                              <1> .l1:
  2073                              <1>     istruc exRenFcb
  2074 000036E5 FF                  <1>     at exRenFcb.extSig,     db -1
  2075 000036E6 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  2076 000036EC 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  2077 000036ED 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  2078 000036F5 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  2079 000036F8 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  2079 00003701 4C414245            <1>
  2080 00003705 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  2081 00003708 00<rep 4h>          <1>     iend
  2082                              <1> volume:
  2083                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  2084 0000370C F6059CC9FFFFFF      <1>     test byte [arg2Flg], -1
  2085 00003713 0F85FAE6FFFF        <1>     jnz badArgError
  2086 00003719 F6058CC9FFFFFF      <1>     test byte [arg1Flg], -1
  2087 00003720 7507                <1>     jnz .notCurrentDrive
  2088 00003722 E8D80C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  2089 00003727 EB31                <1>     jmp short .dirEP
  2090                              <1> .notCurrentDrive:
  2091 00003729 E8880E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2092 0000372E 488D3563CDFFFF      <1>     lea rsi, searchSpec
  2093 00003735 E8080D0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  2094 0000373A 66AD                <1>     lodsw                   ;Get this word
  2095 0000373C 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  2096 0000373F 0F85CEE6FFFF        <1>     jne badArgError
  2097 00003745 8A0563C9FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2098 0000374B A8FF                <1>     test al, -1
  2099 0000374D 0F85B7E6FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2100 00003753 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2101 00003758 FFC8                <1>     dec eax ;Convert to 0 based number
  2102                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2103 0000375A E86E0F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  2104 0000375F 488D15CFCEFFFF      <1>     lea rdx, volFcb
  2105 00003766 FFC0                <1>     inc eax ;Get 1 based drive number
  2106 00003768 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2107 0000376A 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2108 0000376D B800110000          <1>     mov eax, 1100h ;Find first FCB
  2109 00003772 CD21                <1>     int 21h
  2110 00003774 50                  <1>     push rax
  2111                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2112 00003775 488D152DD1FFFF      <1>     lea rdx, crlf
  2113 0000377C B409                <1>     mov ah, 09h
  2114 0000377E CD21                <1>     int 21h
  2115 00003780 488D15E2D3FFFF      <1>     lea rdx, volMes
  2116 00003787 B409                <1>     mov ah, 09h
  2117 00003789 CD21                <1>     int 21h
  2118 0000378B 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2119 0000378D 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2120 00003790 B402                <1>     mov ah, 02h
  2121 00003792 CD21                <1>     int 21h
  2122 00003794 58                  <1>     pop rax
  2123 00003795 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2124 00003797 7409                <1>     jz .volIDOk
  2125 00003799 488D15E0D3FFFF      <1>     lea rdx, volNo
  2126 000037A0 EB19                <1>     jmp short .volEndPrint
  2127                              <1> .volIDOk:
  2128 000037A2 488D15D2D3FFFF      <1>     lea rdx, volOk
  2129 000037A9 B409                <1>     mov ah, 09h
  2130 000037AB CD21                <1>     int 21h
  2131 000037AD C6057DC9FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2132 000037B4 488D156BC9FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2133                              <1> .volEndPrint:
  2134 000037BB B409                <1>     mov ah, 09h
  2135 000037BD CD21                <1>     int 21h
  2136 000037BF 488D15E3D0FFFF      <1>     lea rdx, crlf
  2137 000037C6 B409                <1>     mov ah, 09h
  2138 000037C8 CD21                <1>     int 21h
  2139                              <1>     return
    13                              <2> %%_ret:
    14 000037CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2140                              <1> 
  2141                              <1> version:
  2142 000037CB 488D15D7D0FFFF      <1>     lea rdx, crlf
  2143 000037D2 B409                <1>     mov ah, 09h
  2144 000037D4 CD21                <1>     int 21h
  2145 000037D6 488D157AD3FFFF      <1>     lea rdx, dosVer
  2146 000037DD B409                <1>     mov ah, 09h
  2147 000037DF CD21                <1>     int 21h
  2148 000037E1 E80C000000          <1>     call .printVersionNumber
  2149 000037E6 488D15BCD0FFFF      <1>     lea rdx, crlf
  2150 000037ED B409                <1>     mov ah, 09h
  2151 000037EF CD21                <1>     int 21h
  2152                              <1>     return
    13                              <2> %%_ret:
    14 000037F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2153                              <1> .printVersionNumber:
  2154 000037F2 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2155 000037F4 CD21                <1>     int 21h
  2156 000037F6 50                  <1>     push rax
  2157 000037F7 0FB6C0              <1>     movzx eax, al
  2158 000037FA E8F00D0000          <1>     call printDecimalWord
  2159 000037FF B22E                <1>     mov dl, "."
  2160 00003801 B402                <1>     mov ah, 02h
  2161 00003803 CD21                <1>     int 21h
  2162 00003805 58                  <1>     pop rax
  2163 00003806 0FB6C4              <1>     movzx eax, ah
  2164 00003809 E8E10D0000          <1>     call printDecimalWord
  2165                              <1>     return
    13                              <2> %%_ret:
    14 0000380E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2166                              <1> 
  2167                              <1> 
  2168                              <1> memory:
  2169 0000380F 488B1D09C8FFFF      <1>     mov rbx, qword [sysVars]
  2170 00003816 4885DB              <1>     test rbx, rbx
  2171 00003819 7510                <1>     jnz .sysvarsOK
  2172 0000381B 488D151CD6FFFF      <1>     lea rdx, memBad0
  2173 00003822 B409                <1>     mov ah, 09h
  2174 00003824 CD21                <1>     int 21h
  2175 00003826 E9920E0000          <1>     jmp freezePC.altEP
  2176                              <1> .sysvarsOK:
  2177                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2178                              <1>     ; and rcx to store Application memory
  2179 0000382B 31F6                <1>     xor esi, esi
  2180 0000382D 31FF                <1>     xor edi, edi
  2181 0000382F 31ED                <1>     xor ebp, ebp
  2182 00003831 31C9                <1>     xor ecx, ecx
  2183 00003833 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2184 00003837 488B1B              <1>     mov rbx, qword [rbx]
  2185                              <1> .memLp:
  2186 0000383A 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2187 0000383D 7409                <1>     je .validMCB
  2188 0000383F 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2189 00003842 0F8501010000        <1>     jne .badMCBFound
  2190                              <1> .validMCB:
  2191 00003848 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2192 0000384B 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2193 0000384F 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2194 00003857 7505                <1>     jne .notDOS
  2195 00003859 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2196 0000385C EB21                <1>     jmp short .gotoNext
  2197                              <1> .notDOS:
  2198 0000385E 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2199 00003866 7505                <1>     jne .notFree
  2200 00003868 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2201 0000386B EB12                <1>     jmp short .gotoNext
  2202                              <1> .notFree:
  2203 0000386D 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2204 00003875 7505                <1>     jne .notHole
  2205 00003877 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2206 0000387A EB03                <1>     jmp short .gotoNext
  2207                              <1> .notHole:
  2208 0000387C 4801C1              <1>     add rcx, rax    ;Add to Application count
  2209                              <1> .gotoNext:
  2210 0000387F 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2211 00003882 7407                <1>     je .endOfWalk
  2212 00003884 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2213 00003889 EBAF                <1>     jmp short .memLp
  2214                              <1> .endOfWalk:
  2215                              <1>     
  2216 0000388B 488D150DD5FFFF      <1>     lea rdx, memDOS
  2217 00003892 B409                <1>     mov ah, 09h
  2218 00003894 CD21                <1>     int 21h
  2219 00003896 4889F0              <1>     mov rax, rsi
  2220 00003899 E89D000000          <1>     call .mcbPrintAmount
  2221 0000389E 488D1592D5FFFF      <1>     lea rdx, memByte
  2222 000038A5 B409                <1>     mov ah, 09h
  2223 000038A7 CD21                <1>     int 21h
  2224                              <1> 
  2225 000038A9 4885ED              <1>     test rbp, rbp
  2226 000038AC 741E                <1>     jz .skipHole
  2227 000038AE 488D1536D5FFFF      <1>     lea rdx, memHole
  2228 000038B5 B409                <1>     mov ah, 09h
  2229 000038B7 CD21                <1>     int 21h
  2230 000038B9 4889E8              <1>     mov rax, rbp
  2231 000038BC E87A000000          <1>     call .mcbPrintAmount
  2232 000038C1 488D156FD5FFFF      <1>     lea rdx, memByte
  2233 000038C8 B409                <1>     mov ah, 09h
  2234 000038CA CD21                <1>     int 21h
  2235                              <1> .skipHole:
  2236                              <1> 
  2237 000038CC 488D15F2D4FFFF      <1>     lea rdx, memApp
  2238 000038D3 B409                <1>     mov ah, 09h
  2239 000038D5 CD21                <1>     int 21h
  2240 000038D7 4889C8              <1>     mov rax, rcx
  2241 000038DA E85C000000          <1>     call .mcbPrintAmount
  2242 000038DF 488D1551D5FFFF      <1>     lea rdx, memByte
  2243 000038E6 B409                <1>     mov ah, 09h
  2244 000038E8 CD21                <1>     int 21h
  2245                              <1> 
  2246 000038EA 488D1520D5FFFF      <1>     lea rdx, memFree
  2247 000038F1 B409                <1>     mov ah, 09h
  2248 000038F3 CD21                <1>     int 21h
  2249 000038F5 4889F8              <1>     mov rax, rdi
  2250 000038F8 E83E000000          <1>     call .mcbPrintAmount
  2251 000038FD 488D1533D5FFFF      <1>     lea rdx, memByte
  2252 00003904 B409                <1>     mov ah, 09h
  2253 00003906 CD21                <1>     int 21h
  2254                              <1> 
  2255 00003908 488D156AD4FFFF      <1>     lea rdx, memSys
  2256 0000390F B409                <1>     mov ah, 09h
  2257 00003911 CD21                <1>     int 21h
  2258 00003913 4889F0              <1>     mov rax, rsi
  2259 00003916 4801F8              <1>     add rax, rdi
  2260 00003919 4801C8              <1>     add rax, rcx
  2261 0000391C 4801E8              <1>     add rax, rbp
  2262 0000391F E817000000          <1>     call .mcbPrintAmount
  2263 00003924 488D150CD5FFFF      <1>     lea rdx, memByte
  2264 0000392B B409                <1>     mov ah, 09h
  2265 0000392D CD21                <1>     int 21h
  2266                              <1> 
  2267 0000392F 488D1573CFFFFF      <1>     lea rdx, crlf
  2268 00003936 B409                <1>     mov ah, 09h
  2269 00003938 CD21                <1>     int 21h
  2270                              <1>     return
    13                              <2> %%_ret:
    14 0000393A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2271                              <1> 
  2272                              <1> .mcbPrintAmount:
  2273 0000393B 51                  <1>     push rcx
  2274 0000393C 56                  <1>     push rsi
  2275 0000393D 57                  <1>     push rdi
  2276 0000393E 55                  <1>     push rbp
  2277 0000393F E8AB0C0000          <1>     call printDecimalWord
  2278 00003944 5D                  <1>     pop rbp
  2279 00003945 5F                  <1>     pop rdi
  2280 00003946 5E                  <1>     pop rsi
  2281 00003947 59                  <1>     pop rcx
  2282                              <1>     return
    13                              <2> %%_ret:
    14 00003948 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2283                              <1> .badMCBFound:
  2284 00003949 488D152ED5FFFF      <1>     lea rdx, memBad2
  2285 00003950 B409                <1>     mov ah, 09h
  2286 00003952 CD21                <1>     int 21h
  2287 00003954 E9640D0000          <1>     jmp freezePC.altEP
  2288                              <1> 
  2289                              <1> type:
  2290 00003959 F6054CC7FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2291 00003960 0F84ADE4FFFF        <1>     jz badArgError
  2292 00003966 F60542C7FFFFFF      <1>     test byte [arg2Flg], -1
  2293 0000396D 0F85A0E4FFFF        <1>     jnz badArgError         ;If this set, error
  2294 00003973 4C8B0595C6FFFF      <1>     mov r8, [pspPtr]
  2295 0000397A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2296 00003981 0FB60525C7FFFF      <1>     movzx eax, byte [arg1Off]
  2297 00003988 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2298 0000398B 803E0D              <1>     cmp byte [rsi], CR
  2299 0000398E 0F847FE4FFFF        <1>     je badArgError
  2300 00003994 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2301 00003998 750F                <1>     jne .noDrive
  2302 0000399A 0FB6050DC7FFFF      <1>     movzx eax, byte [arg1FCBret]
  2303 000039A1 3CFF                <1>     cmp al, -1
  2304 000039A3 0F8461E4FFFF        <1>     je badDriveError
  2305                              <1> .noDrive:
  2306                              <1>     ;Now we open the provided file
  2307 000039A9 E8080C0000          <1>     call buildCommandPath
  2308 000039AE 488D15E3CAFFFF      <1>     lea rdx, searchSpec
  2309 000039B5 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2310 000039BA CD21                <1>     int 21h
  2311 000039BC 0F825AE4FFFF        <1>     jc badFileError
  2312 000039C2 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2313 000039C9 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2314                              <1> .lp:
  2315 000039CC B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2316 000039D1 B43F                <1>     mov ah, 3Fh ;Read handle
  2317 000039D3 CD21                <1>     int 21h
  2318 000039D5 89C1                <1>     mov ecx, eax
  2319 000039D7 67E317              <1>     jecxz .exit
  2320 000039DA 53                  <1>     push rbx    ;Save the original in handle
  2321 000039DB BB01000000          <1>     mov ebx, 1  ;STDOUT
  2322 000039E0 B440                <1>     mov ah, 40h
  2323 000039E2 CD21                <1>     int 21h
  2324 000039E4 5B                  <1>     pop rbx ;Get back the original read handle
  2325 000039E5 720F                <1>     jc .exitBad
  2326 000039E7 39C8                <1>     cmp eax, ecx
  2327 000039E9 74E1                <1>     je .lp
  2328 000039EB FFC9                <1>     dec ecx ;One less for a ^Z
  2329 000039ED 39C8                <1>     cmp eax, ecx
  2330 000039EF 7505                <1>     jne .exitBad
  2331                              <1> .exit:
  2332 000039F1 B43E                <1>     mov ah, 3Eh ;Close handle
  2333 000039F3 CD21                <1>     int 21h
  2334                              <1>     return
    13                              <2> %%_ret:
    14 000039F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2335                              <1> .exitBad:
  2336                              <1>     ;If it is a char device, don't print an error
  2337 000039F6 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2338 000039FB BB01000000          <1>     mov ebx, 1
  2339 00003A00 CD21                <1>     int 21h
  2340 00003A02 F6C280              <1>     test dl, devCharDev
  2341                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A05 75(F5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2342 00003A07 E9ACE3FFFF          <1>     jmp badDiskFull
  2343                              <1> 
  2344                              <1> exit:
  2345 00003A0C F60518C6FFFFFF      <1>     test byte [permaSwitch], -1
  2346                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A13 75(F5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2347 00003A15 488B05FBC5FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  2348 00003A1C 483DFFFFFFFF        <1>     cmp rax, -1
  2349                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A22 74(F5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2350 00003A24 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  2351                              <1> 
  2352 00003A28 488B15FDC5FFFF      <1>     mov rdx, qword [parentInt22]
  2353 00003A2F 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  2354 00003A33 B822250000          <1>     mov eax, 2522h
  2355 00003A38 CD21                <1>     int 21h
  2356                              <1> 
  2357 00003A3A B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2358 00003A3F CD21                <1>     int 21h
  2359                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003A41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2360                              <1> 
  2361                              <1> launchChild:
  2362                              <1>     ;We execute an external command here.
  2363                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2364                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2365                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2366                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2367                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2368 00003A42 E8860C0000          <1>     call setDTA         
  2369                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2370 00003A47 488D3DA1C8FFFF      <1>     lea rdi, cmdPathSpec
  2371 00003A4E 4889FE              <1>     mov rsi, rdi
  2372 00003A51 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2373 00003A56 CD2F                <1>     int 2fh
  2374 00003A58 E89C0A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2375 00003A5D 4889FE              <1>     mov rsi, rdi    ;Source here
  2376 00003A60 488D3DA7C6FFFF      <1>     lea rdi, cmdFcb
  2377 00003A67 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2378 00003A6C CD21                <1>     int 21h
  2379 00003A6E 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2380 00003A70 0F85CDE3FFFF        <1>     jnz badCmdError
  2381 00003A76 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2382                              <1> .pathLoop:
  2383 00003A79 488D3597C6FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2384 00003A80 488D3D71D4FFFF      <1>     lea rdi, extStr
  2385 00003A87 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2386                              <1> .extLp:
  2387 00003A8C 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2388 00003A8D B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2389 00003A92 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2390 00003A94 5E                  <1>     pop rsi
  2391 00003A95 85C9                <1>     test ecx, ecx
  2392 00003A97 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2393 00003A99 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2394 00003A9C FFCA                <1>     dec edx         ;Else one less extension type to check
  2395 00003A9E 75EC                <1>     jnz .extLp
  2396                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2397                              <1>     ;If not, error.
  2398 00003AA0 B903000000          <1>     mov ecx, 3
  2399 00003AA5 4889F7              <1>     mov rdi, rsi
  2400 00003AA8 B020                <1>     mov al, SPC
  2401 00003AAA F3AE                <1>     rep scasb   
  2402 00003AAC 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2403 00003AAE 0F858FE3FFFF        <1>     jnz badCmdError    ;If not, error!
  2404                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2405 00003AB4 488D353DD4FFFF      <1>     lea rsi, extStr
  2406 00003ABB BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2407                              <1> .extSrchLp:
  2408 00003AC0 488D3D50C6FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2409 00003AC7 B903000000          <1>     mov ecx, 3
  2410 00003ACC F3A4                <1>     rep movsb   ;Copy the extension over!
  2411 00003ACE E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2412 00003AD3 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2413 00003AD5 FFCB                <1>     dec ebx                 ;Decrement extension counter
  2414 00003AD7 75E7                <1>     jnz .extSrchLp
  2415                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2416                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2417                              <1> ; by setting the fcb extension back to all spaces.
  2418 00003AD9 488D3D37C6FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2419 00003AE0 B903000000          <1>     mov ecx, 3
  2420 00003AE5 B020                <1>     mov al, SPC
  2421 00003AE7 F3AA                <1>     rep stosb   ;Store back the empty extension!
  2422 00003AE9 EB70                <1>     jmp short .pathHandle
  2423                              <1> .extFnd:
  2424                              <1> ;Here if the file had the right extension.
  2425 00003AEB E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2426 00003AF0 7269                <1>     jc .pathHandle
  2427                              <1> .extSrchFnd:
  2428                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2429                              <1> ; a BAT. If it is, separate handling!
  2430 00003AF2 803D1EC6FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2431 00003AF9 0F84DEDFFFFF        <1>     je batLaunch
  2432 00003AFF 488D1D43C6FFFF      <1>     lea rbx, launchBlock
  2433 00003B06 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2434 00003B0A 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2435 00003B0D 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2436 00003B14 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2437 00003B18 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2438 00003B1C 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2439 00003B20 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2440 00003B24 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2441 00003B28 488D15C0C7FFFF      <1>     lea rdx, cmdPathSpec
  2442 00003B2F B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2443 00003B34 CD21                <1>     int 21h
  2444                              <1> ;If the program failed to start, verify why!
  2445 00003B36 B800590000          <1>     mov eax, 5900h      ;Get extended error
  2446 00003B3B 31DB                <1>     xor ebx, ebx
  2447 00003B3D CD21                <1>     int 21h
  2448 00003B3F 668905C7C4FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2449 00003B46 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2450 00003B48 0F84AAE2FFFF        <1>     je badAccError
  2451 00003B4E 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2452 00003B50 0F845C0B0000        <1>     je freezePC
  2453 00003B56 E9E8E2FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2454                              <1> .pathHandle:        
  2455                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2456                              <1> ;al has error code!
  2457 00003B5B 4885ED              <1>     test rbp, rbp
  2458 00003B5E 0F85A3000000        <1>     jnz .pathReentry
  2459                              <1> ;Now check if the command we recieved included an absolute path.
  2460                              <1> ;If so, we don't do path substitution and just fail at this point
  2461 00003B64 488D3584C7FFFF      <1>     lea rsi, cmdPathSpec
  2462 00003B6B 66AD                <1>     lodsw   ;Get the first two chars
  2463 00003B6D 3A05B6C4FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2464 00003B73 0F84CAE2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2465 00003B79 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2466 00003B7B 7412                <1>     je .pathGetEnv
  2467 00003B7D 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2468 00003B80 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2469 00003B82 AC                  <1>     lodsb   ;Get the third char
  2470 00003B83 3A05A0C4FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2471 00003B89 0F84B4E2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2472                              <1> .pathGetEnv:
  2473                              <1> ;Now get a pointer to the environment and search for PATH=
  2474                              <1> ;We only take the final portion of the path and add it to each path componant
  2475                              <1> ;This agrees with DOS 3.3
  2476 00003B8F E8A60B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2477 00003B94 0F84A9E2FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2478                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2479                              <1>     ;Now we know we dont have to keep track of chars!!
  2480 00003B9A 488D3DFFD4FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2481 00003BA1 E8EE0B0000          <1>     call searchForEnvVar
  2482 00003BA6 0F8297E2FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2483 00003BAC 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2484 00003BAF 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2485                              <1> .pathRejoin:
  2486 00003BB6 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2487 00003BB9 0F8484E2FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2488 00003BBF 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2489 00003BC2 488D3DCFC8FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2490                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2491                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2492                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2493                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2494 00003BC9 E88F090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2495 00003BCE 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2496 00003BD1 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2497 00003BD4 48FFCF              <1>     dec rdi ;Point to the null terminator
  2498 00003BD7 8A054CC4FFFF        <1>     mov al, byte [pathSep]
  2499 00003BDD 3847FF              <1>     cmp byte [rdi - 1], al
  2500 00003BE0 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2501 00003BE2 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2502                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2503 00003BE3 488D3525C5FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2504 00003BEA E82E090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2505 00003BEF 488D35A2C8FFFF      <1>     lea rsi, searchSpec 
  2506 00003BF6 488D3DF2C6FFFF      <1>     lea rdi, cmdPathSpec
  2507 00003BFD E802080000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2508 00003C02 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2509                              <1> .pathReentry:
  2510 00003C07 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2511 00003C0B 0F8432E2FFFF        <1>     je badCmdError
  2512                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2513                              <1> ;Not really a big deal...
  2514                              <1>     ;cmp al, errBadDrv
  2515                              <1>     ;jne .pathDrvOk
  2516                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2517                              <1>     ;mov eax, 0900h
  2518                              <1>     ;int 21h
  2519                              <1> ;.pathDrvOk:
  2520 00003C11 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2521 00003C14 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2522 00003C17 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2523                              <1> 
  2524                              <1> .prepAndSearch:
  2525                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2526                              <1> ;cmdPathSpec and null terminates. 
  2527                              <1> ;Input: cmdFcb name + ext setup. 
  2528                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2529                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2530 00003C19 51                  <1>     push rcx
  2531 00003C1A 56                  <1>     push rsi
  2532 00003C1B 57                  <1>     push rdi
  2533 00003C1C 488D3DCCC6FFFF      <1>     lea rdi, cmdPathSpec 
  2534 00003C23 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2535 00003C26 E8CE080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2536 00003C2B 488D35DDC4FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2537 00003C32 E8E6080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2538 00003C37 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2539 00003C3C 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2540 00003C3E CD21                <1>     int 21h
  2541 00003C40 5F                  <1>     pop rdi
  2542 00003C41 5E                  <1>     pop rsi
  2543 00003C42 59                  <1>     pop rcx
  2544                              <1>     return
    13                              <2> %%_ret:
    14 00003C43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2545                              <1> 
  2546                              <1> set:
  2547 00003C44 F60561C4FFFFFF      <1>     test byte [arg1Flg], -1
  2548 00003C4B 7539                <1>     jnz .editEnv
  2549                              <1>     ;Here we just print the environment.
  2550 00003C4D E8E80A0000          <1>     call checkEnvGoodAndGet 
  2551 00003C52 0F8497E1FFFF        <1>     jz badEnvSpaceError
  2552                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2553 00003C58 4889F7              <1>     mov rdi, rsi
  2554 00003C5B 4889F2              <1>     mov rdx, rsi
  2555                              <1> .findLp:
  2556 00003C5E B9FFFFFFFF          <1>     mov ecx, -1
  2557 00003C63 31C0                <1>     xor eax, eax
  2558                              <1> .scanLp:
  2559 00003C65 F2AE                <1>     repne scasb
  2560 00003C67 75FC                <1>     jne .scanLp
  2561 00003C69 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2562                              <1>     ;Else, we now print this environment variable and CRLF it
  2563                              <1>     ;rdx points to the start of the string aleady
  2564                              <1>     ;ecx has the bytes to print
  2565 00003C6B BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2566 00003C70 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2567 00003C75 CD21                <1>     int 21h
  2568 00003C77 E886050000          <1>     call printCRLF
  2569 00003C7C 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2570                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C7F 74(43)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2571 00003C81 4889FA              <1>     mov rdx, rdi   
  2572 00003C84 EBD8                <1>     jmp short .findLp
  2573                              <1> .editEnv:
  2574 00003C86 E8AF0A0000          <1>     call checkEnvGoodAndGet
  2575 00003C8B 0F845EE1FFFF        <1>     jz badEnvSpaceError
  2576 00003C91 0FB60515C4FFFF      <1>     movzx eax, byte [arg1Off]
  2577 00003C98 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2578 00003C9F 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2579                              <1> .altEp:
  2580 00003CA2 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2581 00003CA5 B00D                <1>     mov al, CR              ;Search for the CR
  2582 00003CA7 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2583 00003CAF 89CB                <1>     mov ebx, ecx            ;Save this count 
  2584 00003CB1 53                  <1>     push rbx                ;Save this count on the stack too!
  2585 00003CB2 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2586 00003CB4 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2587 00003CB6 66891DDDCAFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2588 00003CBD 59                  <1>     pop rcx                 ;Get the char count back!
  2589 00003CBE 89CB                <1>     mov ebx, ecx            
  2590 00003CC0 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2591 00003CC3 B03D                <1>     mov al, "="             ;Scan for an equals sign
  2592 00003CC5 F2AE                <1>     repne scasb
  2593 00003CC7 0F8519E1FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2594 00003CCD 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2595 00003CCF 66891DC6CAFFFF      <1>     mov word [envVarNamSz], bx
  2596 00003CD6 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2597 00003CD9 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2598 00003CDB 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2599 00003CDC 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2600 00003CDF E8B00A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2601 00003CE4 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2602 00003CE6 E8D70A0000          <1>     call envFree            ;Free the var in rsi
  2603                              <1> .editNewEnv:
  2604 00003CEB E80B0B0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2605 00003CF0 E82B0B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2606 00003CF5 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2607 00003CF6 31C0                <1>     xor eax, eax            ;Prepare null length!
  2608 00003CF8 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2609 00003CFE 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2610 00003D01 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2611 00003D03 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2612 00003D05 663B0D8ECAFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2613 00003D0C 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2614                              <1> .reallocTry:
  2615                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2616                              <1>     ; we proceed with the environment size.
  2617 00003D0E E8220B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2618 00003D13 7319                <1>     jnc .reallocOk
  2619 00003D15 0F84D4E0FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2620                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2621                              <1>     ; partially the variable into the env. If so we do that. If the name
  2622                              <1>     ; cannot fit, we don't bother
  2623                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2624 00003D1B 663B0D7ACAFFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2625                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003D22 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003D24 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2626 00003D25 E8C5E0FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2627 00003D2A FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2628 00003D2C EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2629                              <1> .reallocOk:
  2630                              <1>     ;Here we have all the space to just copy the full path
  2631 00003D2E 0FB70D65CAFFFF      <1>     movzx ecx, word [envVarSz]
  2632                              <1> .nameCp:
  2633                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2634                              <1> ;Always enough memory for name= here
  2635 00003D35 AC                  <1>     lodsb
  2636 00003D36 E8EC060000          <1>     call ucChar
  2637 00003D3B AA                  <1>     stosb
  2638 00003D3C 66FFC9              <1>     dec cx      ;Always decrement this count
  2639 00003D3F 3C3D                <1>     cmp al, "="
  2640 00003D41 75F2                <1>     jne .nameCp
  2641                              <1> .exitNameCp:
  2642 00003D43 AC                  <1>     lodsb
  2643 00003D44 3C0D                <1>     cmp al, CR
  2644 00003D46 7405                <1>     je .exitCp
  2645 00003D48 AA                  <1>     stosb
  2646 00003D49 FFC9                <1>     dec ecx
  2647 00003D4B 75F6                <1>     jnz .exitNameCp
  2648                              <1> .exitCp:
  2649 00003D4D 31C0                <1>     xor eax, eax
  2650 00003D4F 66AB                <1>     stosw   ;Store the final null word
  2651                              <1>     return
    13                              <2> %%_ret:
    14 00003D51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2652                              <1> .delEnvVar:
  2653                              <1>     ;rsi -> Start of the envvar name in user buffer
  2654 00003D52 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2655 00003D55 E83A0A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2656 00003D5A 7205                <1>     jc .delEnvVarSkip
  2657 00003D5C E8610A0000          <1>     call envFree    ;Free the env var at rsi
  2658                              <1> .delEnvVarSkip:
  2659 00003D61 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2660                              <1>     return
    13                              <2> %%_ret:
    14 00003D62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2661                              <1> 
  2662                              <1> pathEdit:
  2663                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2664                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2665                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2666                              <1> ; end there. Error with too many arguments error!
  2667                              <1> ;If after the equals sign there is nothing, we just print the path!
  2668                              <1> ;Gotta process the command line ourselves first
  2669 00003D63 E8D2090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2670 00003D68 0F8481E0FFFF        <1>     jz badEnvSpaceError
  2671                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2672 00003D6E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2673 00003D75 E8AD000000          <1>     call .skipPathDelimiters
  2674 00003D7A 3C0D                <1>     cmp al, CR
  2675 00003D7C 7466                <1>     je .printPath
  2676                              <1> ;Else use the set command to setup the path in the searchSpec.
  2677 00003D7E 56                  <1>     push rsi    ;Save the first char of the command line string
  2678 00003D7F 488D351AD3FFFF      <1>     lea rsi, pathEVar
  2679 00003D86 488D3D0BC7FFFF      <1>     lea rdi, searchSpec
  2680 00003D8D E872060000          <1>     call strcpy
  2681 00003D92 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2682 00003D95 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2683 00003D96 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2684                              <1> .cpLp:
  2685 00003D98 AC                  <1>     lodsb
  2686 00003D99 3C0D                <1>     cmp al, CR
  2687 00003D9B 7411                <1>     je .cpLpExit
  2688 00003D9D E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2689 00003DA2 740A                <1>     je .cpLpExit
  2690 00003DA4 E87E060000          <1>     call ucChar ;Uppercase the char
  2691 00003DA9 AA                  <1>     stosb       ;Store it
  2692 00003DAA FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2693 00003DAC EBEA                <1>     jmp short .cpLp
  2694                              <1> .cpLpExit:
  2695                              <1>     ;Remove trailing semicolons
  2696 00003DAE 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2697 00003DB2 7507                <1>     jne .cpLpNoIntervene
  2698 00003DB4 FFC9                <1>     dec ecx     ;Reduce the count by one
  2699 00003DB6 48FFCF              <1>     dec rdi     ;Go back a char
  2700 00003DB9 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2701                              <1> .cpLpNoIntervene:
  2702 00003DBB B00D                <1>     mov al, CR  ;Now we store the terminator!
  2703 00003DBD AA                  <1>     stosb       ;Store it!
  2704 00003DBE 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2705 00003DC4 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2706 00003DCB FFC1                <1>     inc ecx     ;Add the CR for copying over
  2707 00003DCD 488D35C4C6FFFF      <1>     lea rsi, searchSpec
  2708 00003DD4 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2709 00003DDB 57                  <1>     push rdi
  2710 00003DDC F3A4                <1>     rep movsb
  2711 00003DDE 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2712 00003DDF E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2713                              <1> .printPath:
  2714 00003DE4 488D3DB5D2FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2715 00003DEB E8A4090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2716 00003DF0 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2717 00003DF2 4889F7              <1>     mov rdi, rsi        
  2718 00003DF5 E823060000          <1>     call strlen         ;Get the length of the path in rdi
  2719 00003DFA 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2720 00003E00 7411                <1>     je .noPathPrnt      ;Print no path!
  2721 00003E02 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2722 00003E04 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2723 00003E07 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2724 00003E0C B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2725 00003E11 EB0C                <1>     jmp short .pathExit
  2726                              <1> .noPathPrnt:
  2727 00003E13 488D15ECCDFFFF      <1>     lea rdx, noPath
  2728 00003E1A B800090000          <1>     mov eax, 0900h
  2729                              <1> .pathExit:
  2730 00003E1F CD21                <1>     int 21h
  2731 00003E21 E8DC030000          <1>     call printCRLF      ;Print a crlf at the end
  2732                              <1>     return
    13                              <2> %%_ret:
    14 00003E26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2733                              <1> .skipPathDelimiters:
  2734                              <1> ;Input: rsi -> Start of string to parse
  2735                              <1> ;Output: rsi -> First non-delimiter char of string
  2736                              <1> ;        al = First non delim char
  2737 00003E27 AC                  <1>     lodsb
  2738 00003E28 E806000000          <1>     call .isALPathDelimiter
  2739 00003E2D 74F8                <1>     je .skipPathDelimiters
  2740 00003E2F 48FFCE              <1>     dec rsi
  2741                              <1>     return
    13                              <2> %%_ret:
    14 00003E32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2742                              <1> .isALPathDelimiter:
  2743                              <1> ;Same as before without semicolon
  2744 00003E33 3C20                <1>     cmp al, SPC
  2745                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003E35 74(32)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2746 00003E37 3C09                <1>     cmp al, TAB
  2747                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003E39 74(32)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2748 00003E3B 3C2C                <1>     cmp al, ","
  2749                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003E3D 74(32)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2750 00003E3F 3C3D                <1>     cmp al, "="
  2751                              <1>     return
    13                              <2> %%_ret:
    14 00003E41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2752                              <1> 
  2753                              <1> prompt:
  2754 00003E42 E8F3080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2755 00003E47 0F84A2DFFFFF        <1>     jz badEnvSpaceError
  2756                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2757 00003E4D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2758 00003E54 E8E9050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2759 00003E59 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2760 00003E5C 742C                <1>     je .reset   ;Reset if so
  2761 00003E5E 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2762 00003E5F 488D358AD0FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2763 00003E66 488D3D2BC6FFFF      <1>     lea rdi, searchSpec
  2764 00003E6D B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2765 00003E72 F3A4                <1>     rep movsb
  2766 00003E74 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2767 00003E75 31C9                <1>     xor ecx, ecx    ;Get char count
  2768                              <1> .cp:    ;Now copy the user string over
  2769 00003E77 AC                  <1>     lodsb
  2770 00003E78 AA                  <1>     stosb 
  2771 00003E79 3C0D                <1>     cmp al, CR
  2772 00003E7B 7404                <1>     je .cpOk
  2773 00003E7D FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2774 00003E7F EBF6                <1>     jmp short .cp
  2775                              <1> .cpOk:
  2776 00003E81 488D3510C6FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2777 00003E88 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2778                              <1> .reset:
  2779                              <1> ;Delete the environment variable!
  2780 00003E8A 488D355FD0FFFF      <1>     lea rsi, promptEVar 
  2781 00003E91 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2782                              <1> .goSet:
  2783 00003E93 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2784 00003E99 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2785 00003EA0 FFC1                <1>     inc ecx     ;Include CR in copy
  2786 00003EA2 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2787 00003EA9 57                  <1>     push rdi
  2788 00003EAA F3A4                <1>     rep movsb
  2789 00003EAC 5E                  <1>     pop rsi
  2790 00003EAD E9F0FDFFFF          <1>     jmp set.altEp
  2791                              <1> 
  2792                              <1> echo:
  2793 00003EB2 F605F3C1FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2794 00003EB9 752A                <1>     jnz .argGiven
  2795 00003EBB 488D1535CEFFFF      <1>     lea rdx, echoIs
  2796 00003EC2 E842030000          <1>     call printString
  2797 00003EC7 488D150FCEFFFF      <1>     lea rdx, onMes
  2798 00003ECE 488D0D02CEFFFF      <1>     lea rcx, offMes
  2799 00003ED5 F605C2C1FFFFFF      <1>     test byte [echoFlg], -1
  2800 00003EDC 480F44D1            <1>     cmovz rdx, rcx
  2801 00003EE0 E924030000          <1>     jmp printString
  2802                              <1> .argGiven:
  2803 00003EE5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2804 00003EEC 0FB605BAC1FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2805 00003EF3 4801C6              <1>     add rsi, rax
  2806 00003EF6 AC                  <1>     lodsb   ;Get this char
  2807 00003EF7 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2808 00003EFA E828050000          <1>     call ucChar
  2809 00003EFF 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2810 00003F01 755A                <1>     jne .directEcho
  2811 00003F03 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2812 00003F06 E81C050000          <1>     call ucChar
  2813 00003F0B 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2814 00003F0D 751B                <1>     jne .checkOff
  2815 00003F0F 56                  <1>     push rsi
  2816 00003F10 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2817 00003F17 E826050000          <1>     call skipDelimiters
  2818 00003F1C 803E0D              <1>     cmp byte [rsi], CR
  2819 00003F1F 5E                  <1>     pop rsi
  2820 00003F20 753B                <1>     jne .directEcho ;If its not, just echo the string
  2821 00003F22 C60575C1FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2822                              <1>     return
    13                              <2> %%_ret:
    14 00003F29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2823                              <1> .checkOff:
  2824 00003F2A 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2825 00003F2D E8F5040000          <1>     call ucChar
  2826 00003F32 3C46                <1>     cmp al, "F" ;Is it an F?
  2827 00003F34 7527                <1>     jne .directEcho ;No, just direct echo
  2828 00003F36 8A4602              <1>     mov al, byte [rsi + 2]
  2829 00003F39 E8E9040000          <1>     call ucChar
  2830 00003F3E 3C46                <1>     cmp al, "F"
  2831 00003F40 751B                <1>     jne .directEcho
  2832 00003F42 56                  <1>     push rsi
  2833 00003F43 4881C603000000      <1>     add rsi, 3
  2834 00003F4A E8F3040000          <1>     call skipDelimiters
  2835 00003F4F 803E0D              <1>     cmp byte [rsi], CR
  2836 00003F52 5E                  <1>     pop rsi
  2837 00003F53 7508                <1>     jne .directEcho
  2838 00003F55 C60542C1FFFF00      <1>     mov byte [echoFlg], 0
  2839                              <1>     return
    13                              <2> %%_ret:
    14 00003F5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2840                              <1> .directEcho: 
  2841 00003F5D AC                  <1>     lodsb
  2842 00003F5E 3C0D                <1>     cmp al, CR
  2843 00003F60 0F849C020000        <1>     je printCRLF    ;Prints a crlf and returns
  2844 00003F66 88C2                <1>     mov dl, al
  2845 00003F68 E80C030000          <1>     call outChar
  2846 00003F6D EBEE                <1>     jmp short .directEcho
  2847                              <1> 
  2848                              <1> pauza:  ;Well... pause is an instruction in english 0:)
  2849                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
  2850                              <1> ; with just... the actual command tail being echoed with the command -_-
  2851 00003F6F F60528C1FFFFFF      <1>     test byte [echoFlg], -1
  2852 00003F76 7528                <1>     jnz .echoTail
  2853                              <1> ;Since we havent echoed the command out, type the tail out manually
  2854 00003F78 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
  2855 00003F7F E8BE040000          <1>     call skipDelimiters ;Skip leading delims
  2856 00003F84 4889F2              <1>     mov rdx, rsi
  2857 00003F87 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
  2858 00003F8F BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
  2859 00003F94 B800400000          <1>     mov eax, 4000h  ;Write
  2860 00003F99 CD21                <1>     int 21h
  2861 00003F9B E862020000          <1>     call printCRLF
  2862                              <1> .echoTail:
  2863 00003FA0 488D15C7CAFFFF      <1>     lea rdx, pauseMes
  2864 00003FA7 E85D020000          <1>     call printString
  2865 00003FAC B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
  2866 00003FB1 CD21                <1>     int 21h
  2867 00003FB3 E84A020000          <1>     call printCRLF
  2868                              <1> remark:
  2869                              <1>     return
    13                              <2> %%_ret:
    14 00003FB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003FB9 53                  <1>     push rbx
    11 00003FBA 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003FBC 803D71C0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003FC3 7240                <1>     jb .usDate
    14 00003FC5 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003FC7 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003FCC E8B0000000          <1>     call .printFirst
    18 00003FD1 8A1568C0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003FD7 B402                <1>     mov ah, 02h
    20 00003FD9 CD21                <1>     int 21h
    21                              <1> 
    22 00003FDB 89C8                <1>     mov eax, ecx
    23 00003FDD 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003FE2 C1E805              <1>     shr eax, 5
    25 00003FE5 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003FEA 8A154FC0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003FF0 B402                <1>     mov ah, 02h
    29 00003FF2 CD21                <1>     int 21h
    30                              <1> 
    31 00003FF4 89C8                <1>     mov eax, ecx
    32 00003FF6 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00003FFB C1E809              <1>     shr eax, 9
    34 00003FFE 5B                  <1>     pop rbx ;Get the year signature back
    35 00003FFF E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00004004 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00004005 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 0000400A C1E805              <1>     shr eax, 5
    41 0000400D E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00004012 8A1527C0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00004018 B402                <1>     mov ah, 02h
    45 0000401A CD21                <1>     int 21h
    46                              <1> 
    47 0000401C 89C8                <1>     mov eax, ecx
    48 0000401E 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00004023 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00004028 8A1511C0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 0000402E B402                <1>     mov ah, 02h
    53 00004030 CD21                <1>     int 21h
    54                              <1> 
    55 00004032 89C8                <1>     mov eax, ecx
    56 00004034 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00004039 C1E809              <1>     shr eax, 9
    58 0000403C 5B                  <1>     pop rbx ;Get the year signature back
    59 0000403D E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00004042 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00004043 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00004048 C1E809              <1>     shr eax, 9
    65 0000404B 5B                  <1>     pop rbx ;Get the year signature back
    66 0000404C E85C000000          <1>     call .printYear
    67                              <1> 
    68 00004051 8A15E8BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00004057 B402                <1>     mov ah, 02h
    70 00004059 CD21                <1>     int 21h
    71                              <1> 
    72 0000405B 89C8                <1>     mov eax, ecx
    73 0000405D 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00004062 C1E805              <1>     shr eax, 5
    75 00004065 E833000000          <1>     call .printSecond
    76                              <1> 
    77 0000406A 8A15CFBFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00004070 B402                <1>     mov ah, 02h
    79 00004072 CD21                <1>     int 21h
    80                              <1> 
    81 00004074 89C8                <1>     mov eax, ecx
    82 00004076 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 0000407B E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00004080 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00004081 51                  <1>     push rcx
    89 00004082 E8D9050000          <1>     call getDecimalWord
    90 00004087 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00004089 7504                <1>     jnz .skipSpace
    92 0000408B 88CD                <1>     mov ch, cl
    93 0000408D B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 0000408F 88CA                <1>     mov dl, cl
    96 00004091 B402                <1>     mov ah, 02h
    97 00004093 CD21                <1>     int 21h
    98 00004095 88EA                <1>     mov dl, ch
    99 00004097 B402                <1>     mov ah, 02h
   100 00004099 CD21                <1>     int 21h
   101 0000409B 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 0000409C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 0000409D 51                  <1>     push rcx
   105 0000409E E8BD050000          <1>     call getDecimalWord
   106 000040A3 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 000040A5 75E8                <1>     jnz .skipSpace
   108 000040A7 88CD                <1>     mov ch, cl
   109 000040A9 B130                <1>     mov cl, "0"
   110 000040AB EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 000040AD 05BC070000          <1>     add eax, 1980
   113 000040B2 51                  <1>     push rcx
   114 000040B3 53                  <1>     push rbx
   115 000040B4 E8A7050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 000040B9 5B                  <1>     pop rbx
   117 000040BA 84DB                <1>     test bl, bl
   118 000040BC 740C                <1>     jz .twoDigitYear
   119 000040BE 88CA                <1>     mov dl, cl  ;Print the first digit
   120 000040C0 B402                <1>     mov ah, 02h
   121 000040C2 CD21                <1>     int 21h
   122 000040C4 88EA                <1>     mov dl, ch  ;Print the second digit
   123 000040C6 B402                <1>     mov ah, 02h
   124 000040C8 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 000040CA C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 000040CD 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 000040CF B402                <1>     mov ah, 02h
   129 000040D1 CD21                <1>     int 21h
   130 000040D3 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 000040D5 B402                <1>     mov ah, 02h
   132 000040D7 CD21                <1>     int 21h
   133 000040D9 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 000040DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 000040DB 89C1                <1>     mov ecx, eax
   142 000040DD 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 000040E2 C1E80B              <1>     shr eax, 11
   144 000040E5 803D59BFFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 000040EC 750B                <1>     jne .ampm
   146 000040EE E85A000000          <1>     call .printHours
   147 000040F3 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 000040F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 000040F9 3D0C000000          <1>     cmp eax, 12
   151 000040FE 7713                <1>     ja .pm
   152 00004100 7416                <1>     je .pm2
   153 00004102 E846000000          <1>     call .printHours
   154 00004107 E81D000000          <1>     call .printMinutes
   155 0000410C B261                <1>     mov dl, "a"
   156 0000410E B402                <1>     mov ah, 02h
   157 00004110 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00004112 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00004113 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00004118 E830000000          <1>     call .printHours
   163 0000411D E807000000          <1>     call .printMinutes
   164 00004122 B270                <1>     mov dl, "p"
   165 00004124 B402                <1>     mov ah, 02h
   166 00004126 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00004128 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00004129 8A1512BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 0000412F B402                <1>     mov ah, 02h
   171 00004131 CD21                <1>     int 21h
   172                              <1> 
   173 00004133 89C8                <1>     mov eax, ecx
   174 00004135 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 0000413A C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 0000413D 51                  <1>     push rcx
   178 0000413E E81D050000          <1>     call getDecimalWord
   179 00004143 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00004145 7514                <1>     jnz .skipSpace
   181 00004147 88CD                <1>     mov ch, cl
   182 00004149 B130                <1>     mov cl, "0"
   183 0000414B EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 0000414D 51                  <1>     push rcx
   186 0000414E E80D050000          <1>     call getDecimalWord
   187 00004153 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00004155 7504                <1>     jnz .skipSpace
   189 00004157 88CD                <1>     mov ch, cl
   190 00004159 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 0000415B 88CA                <1>     mov dl, cl
   193 0000415D B402                <1>     mov ah, 02h
   194 0000415F CD21                <1>     int 21h
   195 00004161 88EA                <1>     mov dl, ch
   196 00004163 B402                <1>     mov ah, 02h
   197 00004165 CD21                <1>     int 21h
   198 00004167 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00004168 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00004169 F6052EBFFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004170 74(68)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00004172 488D3D77CDFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 00004179 E816060000          <1>     call searchForEnvVar
   206 0000417E 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 00004180 E8F9000000          <1>     call putCWDInPrompt
   209 00004185 E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 0000418A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 0000418B 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00004192 AC                  <1>     lodsb   ;Get the char
   216 00004193 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004195 74(8A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00004197 3C24                <1>     cmp al, "$"
   219 00004199 7409                <1>     je .escapeChar
   220 0000419B 88C2                <1>     mov dl, al
   221 0000419D E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 000041A2 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 000041A4 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 000041A5 E87D020000          <1>     call ucChar ;Uppercase this char in al
   226 000041AA 488D1D2A000000      <1>     lea rbx, .pTbl
   227 000041B1 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 000041B6 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 000041B8 740D                <1>     je .escapeFnd
   231 000041BA 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 000041C1 FFC9                <1>     dec ecx
   233 000041C3 75F1                <1>     jnz .escapeLp
   234 000041C5 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 000041C7 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 000041CE 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 000041D2 4801D8              <1>     add rax, rbx                ;Add these
   239 000041D5 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 000041D6 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 000041D8 5E                  <1>     pop rsi
   242 000041D9 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 000041DB 42                  <1>     db "B", 
   247 000041DC 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 000041DE 44                  <1>     db "D", 
   249 000041DF 5D01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 000041E1 45                  <1>     db "E", 
   251 000041E2 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 000041E4 47                  <1>     db "G", 
   253 000041E5 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 000041E7 48                  <1>     db "H", 
   255 000041E8 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 000041EA 4C                  <1>     db "L", 
   257 000041EB 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 000041ED 4E                  <1>     db "N", 
   259 000041EE 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 000041F0 50                  <1>     db "P", 
   261 000041F1 A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 000041F3 51                  <1>     db "Q", 
   263 000041F4 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 000041F6 54                  <1>     db "T", 
   265 000041F7 F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 000041F9 56                  <1>     db "V", 
   267 000041FA 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 000041FC 5F                  <1>     db "_", 
   269 000041FD 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 000041FF 24                  <1>     db "$", 
   271 00004200 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 00004202 488D15A0C6FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 00004209 B800090000          <1>     mov eax, 0900h  ;Print string
   278 0000420E CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 00004210 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 00004211 488D153FC9FFFF      <1>     lea rdx, dosVer
   283 00004218 B409                <1>     mov ah, 09h ;Print String
   284 0000421A CD21                <1>     int 21h
   285 0000421C B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 0000421E CD21                <1>     int 21h
   287 00004220 50                  <1>     push rax    ;Save minor version
   288 00004221 E884010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 00004226 E89C010000          <1>     call printPackedBCD ;Print al
   290 0000422B B22E                <1>     mov dl, "."
   291 0000422D B402                <1>     mov ah, 02h
   292 0000422F CD21                <1>     int 21h
   293 00004231 58                  <1>     pop rax
   294 00004232 88E0                <1>     mov al, ah  ;Get the minor version low
   295 00004234 E871010000          <1>     call hexToBCD
   296 00004239 E889010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 0000423E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 0000423F B21B                <1>     mov dl, ESC
   300 00004241 EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 00004243 B224                <1>     mov dl, "$"
   304 00004245 EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 00004247 B23D                <1>     mov dl, "="
   308 00004249 EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 0000424B B27C                <1>     mov dl, "|"
   312 0000424D EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 0000424F B23E                <1>     mov dl, ">"
   316 00004251 EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 00004253 B23C                <1>     mov dl, "<"
   320 00004255 EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 00004257 488D15F4CAFFFF      <1>     lea rdx, backSpace
   324 0000425E B903000000          <1>     mov ecx, 3
   325 00004263 BB01000000          <1>     mov ebx, 1
   326 00004268 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 0000426D CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 0000426F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 00004270 E88A010000          <1>     call getCurrentDrive
   332 00004275 0441                <1>     add al, "A" ;Convert to letter
   333 00004277 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 00004279 B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 0000427B CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 0000427D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 0000427E E87C010000          <1>     call getCurrentDrive
   340 00004283 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 00004285 FEC2                <1>     inc dl
   342 00004287 0441                <1>     add al, "A" ;Convert to letter
   343 00004289 B43A                <1>     mov ah, ":"
   344 0000428B 488D3DC8BDFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 00004292 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 00004294 8A058FBDFFFF        <1>     mov al, byte [pathSep]
   347 0000429A AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 0000429B B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 0000429D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 000042A0 CD21                <1>     int 21h
   351 000042A2 721F                <1>     jc .badDrive
   352 000042A4 E874010000          <1>     call strlen
   353 000042A9 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 000042AF B800400000          <1>     mov eax, 4000h ;Write to handle
   356 000042B4 BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 000042B9 488D159ABDFFFF      <1>     lea rdx, currDirStr
   358 000042C0 CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 000042C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 000042C3 488D1555C9FFFF      <1>     lea rdx, badDrvMsg
   363 000042CA E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 000042CF E847000000          <1>     call getTime
   367 000042D4 0FB6C5              <1>     movzx eax, ch
   368 000042D7 E871FEFFFF          <1>     call printTime.printHours
   369 000042DC 8A155FBDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   370 000042E2 B402                <1>     mov ah, 02h
   371 000042E4 CD21                <1>     int 21h
   372 000042E6 0FB60574C3FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   373 000042ED E84BFEFFFF          <1>     call printTime.printMinutesAlt
   374 000042F2 8A1549BDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   375 000042F8 B402                <1>     mov ah, 02h
   376 000042FA CD21                <1>     int 21h
   377 000042FC 0FB60561C3FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   378 00004303 E835FEFFFF          <1>     call printTime.printMinutesAlt
   379 00004308 B22E                <1>     mov dl, "."
   380 0000430A B402                <1>     mov ah, 02h
   381 0000430C CD21                <1>     int 21h
   382 0000430E 0FB6054EC3FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   383 00004315 E823FEFFFF          <1>     call printTime.printMinutesAlt
   384                              <1>     return
    13                              <2> %%_ret:
    14 0000431A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> getTime:
   386 0000431B B42C                <1>     mov ah, 2Ch ;DOS get time
   387 0000431D CD21                <1>     int 21h
   388                              <1>     ;CH = hour (0-23)
   389                              <1> 	;CL = minutes (0-59)
   390                              <1> 	;DH = seconds (0-59)
   391                              <1> 	;DL = hundredths (0-99)
   392 0000431F 880D3CC3FFFF        <1>     mov byte [td1], cl
   393 00004325 882D37C3FFFF        <1>     mov byte [td2], ch
   394 0000432B 881532C3FFFF        <1>     mov byte [td3], dl
   395 00004331 88352DC3FFFF        <1>     mov byte [td4], dh
   396                              <1>     return
    13                              <2> %%_ret:
    14 00004337 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> printFmtDate:
   399                              <1> ;Outputs the formatted date
   400 00004338 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   401 0000433D CD21                <1>     int 21h
   402                              <1> 	;AL = day of the week (0=Sunday)
   403                              <1> 	;CX = year (1980-2099)
   404                              <1> 	;DH = month (1-12)
   405                              <1> 	;DL = day (1-31)
   406 0000433F 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   407 00004344 66890D16C3FFFF      <1>     mov word [td1], cx
   408 0000434B 881512C3FFFF        <1>     mov byte [td3], dl
   409 00004351 88350DC3FFFF        <1>     mov byte [td4], dh
   410 00004357 0FB6C0              <1>     movzx eax, al
   411 0000435A 89C3                <1>     mov ebx, eax
   412 0000435C D1E3                <1>     shl ebx, 1   ;Multiply by 2
   413 0000435E 01D8                <1>     add eax, ebx ;Make it 3 times 
   414 00004360 488D153AC7FFFF      <1>     lea rdx, dayName
   415 00004367 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   416 0000436B B903000000          <1>     mov ecx, 3  ;Print three chars
   417 00004370 BB01000000          <1>     mov ebx, 1  ;STDOUT
   418 00004375 B440                <1>     mov ah, 40h ;Write to handle
   419 00004377 CD21                <1>     int 21h
   420 00004379 B220                <1>     mov dl, " "
   421 0000437B E8F9FEFFFF          <1>     call outChar
   422                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   423                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   424                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   425 00004380 0FB705DAC2FFFF      <1>     movzx eax, word [td1]   ;Get this word
   426 00004387 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   427 0000438A 0FB61DD3C2FFFF      <1>     movzx ebx, byte [td4]
   428 00004391 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   429 00004394 09D8                <1>     or eax, ebx ;Add this date to eax
   430 00004396 0FB61DC6C2FFFF      <1>     movzx ebx, byte [td3]
   431 0000439D 09D8                <1>     or eax, ebx
   432 0000439F BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   433 000043A4 E810FCFFFF          <1>     call printDate
   434                              <1>     return
    13                              <2> %%_ret:
    14 000043A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> 
   437                              <1> hexToBCD:
   438                              <1> ;Converts a Hex byte into two BCD digits
   439                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   440 000043AA 51                  <1>     push rcx
   441 000043AB 0FB6C0              <1>     movzx eax, al   ;Zero extend
   442 000043AE 31C9                <1>     xor ecx, ecx
   443                              <1> .htb0:
   444 000043B0 3D0A000000          <1>     cmp eax, 10
   445 000043B5 7209                <1>     jb .htb1
   446 000043B7 2D0A000000          <1>     sub eax, 10
   447 000043BC FFC1                <1>     inc ecx
   448 000043BE EBF0                <1>     jmp short .htb0
   449                              <1> .htb1:
   450 000043C0 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   451 000043C3 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   452 000043C5 59                  <1>     pop rcx
   453 000043C6 C3                  <1>     ret
   454                              <1> 
   455                              <1> printPackedBCD:
   456                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   457                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   458                              <1> ;Preserves all registers
   459 000043C7 50                  <1>     push rax
   460 000043C8 52                  <1>     push rdx
   461 000043C9 88C4                <1>     mov ah, al
   462 000043CB 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   463 000043CD 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   464 000043D0 7508                <1>     jnz .upperNybble
   465 000043D2 B220                <1>     mov dl, " "
   466 000043D4 B402                <1>     mov ah, 02h
   467 000043D6 CD21                <1>     int 21h
   468 000043D8 EB0E                <1>     jmp short .lowerNybble
   469                              <1> .upperNybble:
   470 000043DA 50                  <1>     push rax
   471 000043DB C0EC04              <1>     shr ah, 4
   472 000043DE 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   473 000043E1 88E2                <1>     mov dl, ah
   474 000043E3 B402                <1>     mov ah, 02h ;Print DL
   475 000043E5 CD21                <1>     int 21h
   476 000043E7 58                  <1>     pop rax
   477                              <1> .lowerNybble:
   478 000043E8 0430                <1>     add al, "0"
   479 000043EA 88C2                <1>     mov dl, al
   480 000043EC B402                <1>     mov ah, 02h ;Print DL
   481 000043EE CD21                <1>     int 21h
   482 000043F0 5A                  <1>     pop rdx
   483 000043F1 58                  <1>     pop rax
   484                              <1>     return
    13                              <2> %%_ret:
    14 000043F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> setDrive:
   487                              <1> ;Input: dl = 0 based Drive number to set to
   488                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   489                              <1> ;AX trashed.
   490 000043F3 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   491 000043F5 CD21                <1>     int 21h 
   492 000043F7 E803000000          <1>     call getCurrentDrive
   493 000043FC 38D0                <1>     cmp al, dl  ;Is this the same drive?
   494                              <1>     return
    13                              <2> %%_ret:
    14 000043FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> getCurrentDrive:
   496                              <1> ;Returns the 0 based current drive in al
   497 000043FF B419                <1>     mov ah, 19h
   498 00004401 CD21                <1>     int 21h
   499                              <1>     return
    13                              <2> %%_ret:
    14 00004403 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strcpy:
   502                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   503                              <1> ;rsi -> Source
   504                              <1> ;rdi -> Destination
   505 00004404 51                  <1>     push rcx
   506 00004405 57                  <1>     push rdi
   507 00004406 4889F7              <1>     mov rdi, rsi
   508 00004409 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   509 0000440E 5F                  <1>     pop rdi
   510 0000440F F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   511 00004411 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 00004412 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> strcpy2:
   515                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   516                              <1> ;rsi -> Source
   517                              <1> ;rdi -> Destination
   518 00004413 56                  <1>     push rsi
   519 00004414 57                  <1>     push rdi
   520 00004415 E8EAFFFFFF          <1>     call strcpy 
   521 0000441A 5F                  <1>     pop rdi
   522 0000441B 5E                  <1>     pop rsi
   523                              <1>     return
    13                              <2> %%_ret:
    14 0000441C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strlen:
   526                              <1> ;Gets the length of a ASCIIZ string
   527                              <1> ;Input: rdi = Source buffer
   528                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   529 0000441D 50                  <1>     push rax
   530 0000441E B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   531 00004423 CD2F                <1>     int 2fh
   532 00004425 58                  <1>     pop rax
   533                              <1>     return
    13                              <2> %%_ret:
    14 00004426 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> 
   535                              <1> ucChar:
   536                              <1> ;Input: al = Char to uppercase
   537                              <1> ;Output: al = Adjusted char 
   538 00004427 53                  <1>     push rbx
   539 00004428 50                  <1>     push rax    ;Push the char twice on the stack
   540 00004429 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   541 0000442E CD2F                <1>     int 2fh         ;Returns the processed char in al
   542 00004430 5B                  <1>     pop rbx         ;Pop the old word off the stack
   543 00004431 5B                  <1>     pop rbx
   544                              <1>     return
    13                              <2> %%_ret:
    14 00004432 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> 
   546                              <1> normalisePath:
   547                              <1> ;Uppercases chars and flips pathseps
   548                              <1> ;Input: rsi -> Path to normalise
   549 00004433 50                  <1>     push rax
   550 00004434 57                  <1>     push rdi
   551 00004435 4889F7              <1>     mov rdi, rsi
   552 00004438 B811120000          <1>     mov eax, 1211h
   553 0000443D CD2F                <1>     int 2fh
   554 0000443F 5F                  <1>     pop rdi
   555 00004440 58                  <1>     pop rax
   556                              <1>     return
    13                              <2> %%_ret:
    14 00004441 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> skipDelimiters:
   559                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   560                              <1> ; command delimiters but a subset thereof. 
   561                              <1> ;These are the same across all codepages.
   562                              <1> ;Input: rsi must point to the start of the data string
   563                              <1> ;Output: rsi points to the first non-delimiter char
   564 00004442 50                  <1>     push rax
   565                              <1> .l1:
   566 00004443 AC                  <1>     lodsb
   567 00004444 E807000000          <1>     call isALdelimiter
   568 00004449 74F8                <1>     jz .l1
   569                              <1> .exit:
   570 0000444B 58                  <1>     pop rax
   571 0000444C 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   572                              <1>     return
    13                              <2> %%_ret:
    14 0000444F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> isALdelimiter:
   575                              <1> ;Returns: ZF=NZ if al is not a command separator 
   576                              <1> ;         ZF=ZE if al is a command separator
   577 00004450 3C20                <1>     cmp al, " "
   578                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004452 74(4F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   579 00004454 3C3B                <1>     cmp al, ";"
   580                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004456 74(4F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   581 00004458 3C3D                <1>     cmp al, "="
   582                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000445A 74(4F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   583 0000445C 3C2C                <1>     cmp al, ","
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000445E 74(4F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 00004460 3C09                <1>     cmp al, TAB
   586                              <1>     return
    13                              <2> %%_ret:
    14 00004462 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   587                              <1> 
   588                              <1> clearCommandState:
   589                              <1> ;Clears the command state
   590 00004463 488D3D42BCFFFF      <1>     lea rdi, cmdStatePtr
   591 0000446A B907000000          <1>     mov ecx, cmdStateL
   592 0000446F 31C0                <1>     xor eax, eax
   593 00004471 F3AA                <1>     rep stosb
   594                              <1>     return
    13                              <2> %%_ret:
    14 00004473 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   595                              <1> 
   596                              <1> clearCommandLineState:
   597                              <1> ;Clears the command line state after a 0Dh encountered
   598 00004474 488D3D26BCFFFF      <1>     lea rdi, cmdLineStatePtr
   599 0000447B B912000000          <1>     mov ecx, cmdLineStateL
   600 00004480 31C0                <1>     xor eax, eax
   601 00004482 F3AA                <1>     rep stosb
   602 00004484 C70514BCFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   602 0000448D FF                  <1>
   603 0000448E C70510BCFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   603 00004497 FF                  <1>
   604                              <1> ;Close all handles from 5->MAX
   605 00004498 0FB70D88BBFFFF      <1>     movzx ecx, word [numHdls]
   606 0000449F BB05000000          <1>     mov ebx, 5
   607                              <1> .lp:
   608 000044A4 B43E                <1>     mov ah, 3Eh ;File close
   609 000044A6 CD21                <1>     int 21h
   610 000044A8 FFC3                <1>     inc ebx ;Goto next file
   611 000044AA 39CB                <1>     cmp ebx, ecx
   612 000044AC 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   613                              <1>     return
    13                              <2> %%_ret:
    14 000044AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   614                              <1> 
   615                              <1> asciiFilenameToFCB:
   616                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   617                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   618                              <1> ;Also doesn't check if chars are valid
   619                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   620                              <1> ;Name is space padded.
   621                              <1> ;Input: rsi = ASCII string buffer
   622                              <1> ;       rdi = FCB name buffer
   623                              <1> ;Output: al = Char that terminated the source string 
   624 000044AF 53                  <1>     push rbx    
   625 000044B0 57                  <1>     push rdi
   626 000044B1 B90B000000          <1>     mov ecx, 11
   627 000044B6 B020                <1>     mov al, " "
   628 000044B8 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   629 000044BA 5F                  <1>     pop rdi
   630 000044BB 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   631                              <1>     ;Preprocess for Dir Searches
   632 000044BE 803E2E              <1>     cmp byte [rsi], "."
   633 000044C1 7509                <1>     jne .processName
   634 000044C3 A4                  <1>     movsb   ;Store the first dot
   635 000044C4 803E2E              <1>     cmp byte [rsi], "."
   636 000044C7 752C                <1>     jne .exitBadChar
   637 000044C9 A4                  <1>     movsb
   638 000044CA EB29                <1>     jmp short .exitBadChar
   639                              <1> .processName:
   640 000044CC AC                  <1>     lodsb   ;Get the char in al
   641 000044CD 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   642 000044CF 7426                <1>     jz .exit
   643 000044D1 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   644 000044D3 7407                <1>     je .extSpace
   645 000044D5 3C2E                <1>     cmp al, "."
   646 000044D7 740C                <1>     je .ext
   647 000044D9 AA                  <1>     stosb   ;Store the char
   648 000044DA EBF0                <1>     jmp short .processName
   649                              <1> .extSpace:
   650                              <1> ;Now we scan for a period in the name
   651 000044DC AC                  <1>     lodsb   ;Get a char and increase rsi
   652 000044DD 84C0                <1>     test al, al
   653 000044DF 7416                <1>     jz .exit
   654 000044E1 3C2E                <1>     cmp al, "."     ;If al is not a period...
   655 000044E3 75F7                <1>     jne .extSpace   ; keep searching
   656                              <1> .ext:
   657 000044E5 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   658                              <1> .processExt:
   659 000044E9 AC                  <1>     lodsb
   660 000044EA 84C0                <1>     test al, al
   661 000044EC 7409                <1>     jz .exit
   662 000044EE 3C20                <1>     cmp al, " "
   663 000044F0 7405                <1>     je .exit
   664 000044F2 AA                  <1>     stosb
   665 000044F3 EBF4                <1>     jmp short .processExt
   666                              <1> .exitBadChar:
   667 000044F5 30C0                <1>     xor al, al  ;Return a null terminator
   668                              <1> .exit:
   669 000044F7 5B                  <1>     pop rbx
   670                              <1>     return
    13                              <2> %%_ret:
    14 000044F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> 
   672                              <1> findLastPathComponant:
   673                              <1> ;Finds the last path componant of an ASCIIZ path string
   674                              <1> ;Input: rdi -> Head of the path to find last componant on
   675                              <1> ;Output: rdi -> Start of the last componant
   676 000044F9 50                  <1>     push rax
   677 000044FA 51                  <1>     push rcx
   678 000044FB 31C9                <1>     xor ecx, ecx
   679 000044FD FFC9                <1>     dec ecx
   680 000044FF 31C0                <1>     xor eax, eax
   681 00004501 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   682 00004503 F7D1                <1>     not ecx     ;This gets the count of chars  
   683 00004505 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   684 00004508 8A051BBBFFFF        <1>     mov al, byte [pathSep]
   685 0000450E FD                  <1>     std
   686 0000450F F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   687 00004511 FC                  <1>     cld
   688 00004512 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   689 00004514 48FFC7              <1>     inc rdi     ;Point at pathsep
   690                              <1> .exit:
   691 00004517 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   692 0000451A 59                  <1>     pop rcx
   693 0000451B 58                  <1>     pop rax
   694                              <1>     return
    13                              <2> %%_ret:
    14 0000451C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> FCBToAsciiz:
   697                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   698                              <1> ;Name is space padded too
   699                              <1> ;Input: rsi = FCB name buffer
   700                              <1> ;       rdi = ASCIIZ string buffer
   701 0000451D B908000000          <1>     mov ecx, 8
   702 00004522 F3A4                <1>     rep movsb   ;Move the name over
   703                              <1> .scanNameSpace:
   704 00004524 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   705 00004528 750D                <1>     jne .ext
   706 0000452A 48FFCF              <1>     dec rdi
   707 0000452D FFC1                <1>     inc ecx
   708 0000452F 81F908000000        <1>     cmp ecx, 8
   709 00004535 72ED                <1>     jb .scanNameSpace
   710                              <1> .ext:
   711 00004537 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   712 0000453C 7506                <1>     jne .validExt
   713 0000453E 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   714 00004542 7415                <1>     je .exit
   715                              <1> .validExt:
   716 00004544 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   717 00004546 AA                  <1>     stosb
   718 00004547 B903000000          <1>     mov ecx, 3
   719 0000454C F3A4                <1>     rep movsb   ;Move the three extension chars over
   720                              <1> .scanExtSpace:
   721 0000454E 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   722 00004552 7505                <1>     jne .exit
   723 00004554 48FFCF              <1>     dec rdi
   724 00004557 EBF5                <1>     jmp short .scanExtSpace
   725                              <1> .exit:
   726 00004559 31C0                <1>     xor eax, eax
   727 0000455B AA                  <1>     stosb   ;Store a null at the end
   728                              <1>     return
    13                              <2> %%_ret:
    14 0000455C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   729                              <1> 
   730                              <1> cpDelimOrCtrlStringToBufz:
   731                              <1> ;Copy a delimited or control char terminated string to a buffer
   732                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   733                              <1> ;       rdi -> Buffer to store null terminated string in
   734                              <1> ;Output: rsi -> First char past string end
   735                              <1> ;       rdi -> One char past null terminator on string buffer
   736 0000455D C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   737                              <1> .lp:
   738 00004560 AC                  <1>     lodsb
   739 00004561 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   740 00004563 760A                <1>     jbe .exit
   741 00004565 E8E6FEFFFF          <1>     call isALdelimiter
   742 0000456A 7403                <1>     je .exit
   743 0000456C AA                  <1>     stosb
   744 0000456D EBF1                <1>     jmp short .lp
   745                              <1> .exit:
   746 0000456F 31C0                <1>     xor eax, eax
   747 00004571 AA                  <1>     stosb   ;Store a null terminator
   748                              <1>     return
    13                              <2> %%_ret:
    14 00004572 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   749                              <1> 
   750                              <1> 
   751                              <1> cpDelimPathToBufz:
   752                              <1> ;Copy a delimited path into buffer and null terminate.
   753                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   754                              <1> ;       rdi -> Buffer to store null terminated path in
   755                              <1> ;Output: rsi -> First char past pathname delimiter
   756                              <1> ;       rdi -> One char past null terminator on pathname buffer
   757 00004573 53                  <1>     push rbx
   758 00004574 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   759 00004577 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   760                              <1> .lp:
   761 0000457A AC                  <1>     lodsb   ;Get the char
   762 0000457B 3C0D                <1>     cmp al, CR
   763 0000457D 7412                <1>     je .gotRedirPath
   764 0000457F E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   765 00004584 740B                <1>     jz .gotRedirPath 
   766 00004586 3A059EBAFFFF        <1>     cmp al, byte [switchChar]
   767 0000458C 7403                <1>     je .gotRedirPath
   768 0000458E AA                  <1>     stosb   ;Store this char and loop next char
   769 0000458F EBE9                <1>     jmp short .lp
   770                              <1> .gotRedirPath:
   771 00004591 50                  <1>     push rax    ;Save the char on stack
   772 00004592 30C0                <1>     xor al, al  ;Get null terminator char
   773 00004594 4829FB              <1>     sub rbx, rdi
   774 00004597 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   775 0000459E 7412                <1>     je .notColon
   776 000045A0 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   777 000045A7 7409                <1>     je .notColon
   778 000045A9 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   779 000045AD 7503                <1>     jne .notColon
   780 000045AF 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   781                              <1> .notColon:
   782 000045B2 AA                  <1>     stosb   ;Store the null terminator for the redir path
   783 000045B3 58                  <1>     pop rax ;Get back the char in al
   784 000045B4 5B                  <1>     pop rbx
   785                              <1>     return
    13                              <2> %%_ret:
    14 000045B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   786                              <1> 
   787                              <1> buildCommandPath:
   788                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   789 000045B6 0FB605F0BAFFFF      <1>     movzx eax, byte [arg1Off]
   790 000045BD 4C8B054BBAFFFF      <1>     mov r8, [pspPtr]
   791 000045C4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   792 000045CB 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   793                              <1> copyArgumentToSearchSpec:
   794                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   795                              <1> ; and null terminates
   796 000045CE 488D3DC3BEFFFF      <1>     lea rdi, searchSpec
   797 000045D5 E899FFFFFF          <1>     call cpDelimPathToBufz
   798                              <1>     return
    13                              <2> %%_ret:
    14 000045DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> 
   800                              <1> scanForWildcards:
   801                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   802                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   803 000045DB 50                  <1>     push rax
   804 000045DC 56                  <1>     push rsi
   805                              <1> .lp:
   806 000045DD AC                  <1>     lodsb
   807 000045DE 3C3F                <1>     cmp al, "?"
   808 000045E0 740A                <1>     je .exit
   809 000045E2 3C2A                <1>     cmp al, "*"
   810 000045E4 7406                <1>     je .exit
   811 000045E6 84C0                <1>     test al, al
   812 000045E8 75F3                <1>     jnz .lp
   813 000045EA FEC0                <1>     inc al  ;This will clear the ZF
   814                              <1> .exit:
   815 000045EC 5E                  <1>     pop rsi
   816 000045ED 58                  <1>     pop rax
   817                              <1>     return
    13                              <2> %%_ret:
    14 000045EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> 
   819                              <1> printDecimalWord:
   820                              <1> ;Takes qword in rax and print it's decimal representation
   821                              <1> ;Takes the qword in eax and prints its decimal representation
   822 000045EF 31C9                <1>     xor ecx, ecx
   823 000045F1 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   824 000045F3 85C0                <1>     test eax, eax
   825 000045F5 750C                <1>     jnz .notZero
   826 000045F7 B930000000          <1>     mov ecx, "0"
   827 000045FC BD01000000          <1>     mov ebp, 1  ;Print one digit
   828 00004601 EB3E                <1>     jmp short .dpfb2
   829                              <1> .notZero:
   830 00004603 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   831 00004605 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   832                              <1> .dpfb0:
   833 0000460A FFC5                <1>     inc ebp
   834 0000460C 81FD08000000        <1>     cmp ebp, 8
   835 00004612 7206                <1>     jb .dpfb00
   836 00004614 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   837 00004618 EB04                <1>     jmp short .dpfb01
   838                              <1> .dpfb00:
   839 0000461A 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   840                              <1> .dpfb01:
   841 0000461E 31D2                <1>     xor edx, edx
   842 00004620 48F7F6              <1>     div rsi
   843 00004623 80C230              <1>     add dl, '0'
   844 00004626 80FA39              <1>     cmp dl, '9'
   845 00004629 7603                <1>     jbe .dpfb1
   846 0000462B 80C207              <1>     add dl, 'A'-'0'-10
   847                              <1> .dpfb1:
   848 0000462E 81FD08000000        <1>     cmp ebp, 8
   849 00004634 7204                <1>     jb .dpfb10
   850 00004636 88D3                <1>     mov bl, dl ;Add the bottom bits
   851 00004638 EB02                <1>     jmp short .dpfb11
   852                              <1> .dpfb10:
   853 0000463A 88D1                <1>     mov cl, dl    ;Save remainder byte
   854                              <1> .dpfb11:
   855 0000463C 4885C0              <1>     test rax, rax
   856 0000463F 75C9                <1>     jnz .dpfb0
   857                              <1> .dpfb2:
   858 00004641 81FD08000000        <1>     cmp ebp, 8
   859 00004647 7208                <1>     jb .dpfb20
   860 00004649 88DA                <1>     mov dl, bl
   861 0000464B 48C1EB08            <1>     shr rbx, 8
   862 0000464F EB06                <1>     jmp short .dpfb21
   863                              <1> .dpfb20:
   864 00004651 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   865 00004653 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   866                              <1> .dpfb21:
   867 00004657 B402                <1>     mov ah, 02h
   868 00004659 CD21                <1>     int 21h
   869 0000465B FFCD                <1>     dec ebp
   870 0000465D 75E2                <1>     jnz .dpfb2
   871                              <1>     return
    13                              <2> %%_ret:
    14 0000465F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   872                              <1> 
   873                              <1> getDecimalWord:
   874                              <1> ;Works on MAX A dword in eax
   875                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   876 00004660 31C9                <1>     xor ecx, ecx
   877 00004662 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   878 00004664 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   879                              <1> .dpfb0:
   880 00004669 FFC5                <1>     inc ebp
   881 0000466B 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   882 0000466F 31D2                <1>     xor edx, edx
   883 00004671 48F7F3              <1>     div rbx
   884 00004674 80C230              <1>     add dl, '0'
   885 00004677 80FA39              <1>     cmp dl, '9'
   886 0000467A 7603                <1>     jbe .dpfb1
   887 0000467C 80C207              <1>     add dl, 'A'-'0'-10
   888                              <1> .dpfb1:
   889 0000467F 88D1                <1>     mov cl, dl    ;Save remainder byte
   890 00004681 4885C0              <1>     test rax, rax
   891 00004684 75E3                <1>     jnz .dpfb0
   892                              <1>     return
    13                              <2> %%_ret:
    14 00004686 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   893                              <1> getByte:
   894                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   895 00004687 E807000000          <1>     call getNum
   896 0000468C 3D00010000          <1>     cmp eax, 100h
   897 00004691 F5                  <1>     cmc
   898                              <1>     return
    13                              <2> %%_ret:
    14 00004692 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   899                              <1> getNum:
   900                              <1> ;Gets a number from a command line.
   901                              <1> ;Input: rsi -> String to get number from
   902                              <1> ;Output: rsi -> Char which terminated the accumulation
   903                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   904 00004693 51                  <1>     push rcx
   905 00004694 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   906                              <1> .lp:
   907 00004696 AC                  <1>     lodsb
   908 00004697 3C30                <1>     cmp al, "0"
   909 00004699 7210                <1>     jb .exit
   910 0000469B 3C39                <1>     cmp al, "9"
   911 0000469D 770C                <1>     ja .exit
   912 0000469F 2C30                <1>     sub al, "0"                     ;Convert to binary 
   913 000046A1 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   914 000046A5 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   915 000046A7 01C1                <1>     add ecx, eax
   916 000046A9 EBEB                <1>     jmp short .lp   ;Get next digit
   917                              <1> .exit:
   918 000046AB 89C8                <1>     mov eax, ecx
   919 000046AD 59                  <1>     pop rcx
   920 000046AE 48FFCE              <1>     dec rsi
   921                              <1>     return
    13                              <2> %%_ret:
    14 000046B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   922                              <1> 
   923                              <1> 
   924                              <1> freezePC:
   925 000046B2 488D15ABC7FFFF      <1>     lea rdx, memBad1
   926 000046B9 B409                <1>     mov ah, 09h
   927 000046BB CD21                <1>     int 21h
   928                              <1> .altEP:
   929 000046BD 488D15C9C7FFFF      <1>     lea rdx, memBad3
   930 000046C4 B409                <1>     mov ah, 09h
   931 000046C6 CD21                <1>     int 21h
   932                              <1> .lp:
   933 000046C8 F390                <1>     pause
   934 000046CA F4                  <1>     hlt
   935 000046CB EBFB                <1>     jmp short .lp
   936                              <1> 
   937                              <1> setDTA:
   938 000046CD 50                  <1>     push rax
   939 000046CE 52                  <1>     push rdx
   940 000046CF 488D1548BAFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   941 000046D6 B8001A0000          <1>     mov eax, 1A00h
   942 000046DB CD21                <1>     int 21h
   943 000046DD 5A                  <1>     pop rdx
   944 000046DE 58                  <1>     pop rax
   945                              <1>     return
    13                              <2> %%_ret:
    14 000046DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   946                              <1> 
   947                              <1> getDTA:
   948 000046E0 488D1537BAFFFF      <1>     lea rdx, cmdFFBlock
   949                              <1>     return
    13                              <2> %%_ret:
    14 000046E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   950                              <1> 
   951                              <1> resetIDTentries:
   952                              <1> ;Resets the IDT entries
   953 000046E8 488D15B0020000      <1>     lea rdx, critErrorHandler
   954 000046EF 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
   955 000046F3 B824250000          <1>     mov eax, 2524h
   956 000046F8 CD21                <1>     int 21h
   957 000046FA 488D157F010000      <1>     lea rdx, int23h
   958 00004701 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
   959 00004705 B823250000          <1>     mov eax, 2523h
   960 0000470A CD21                <1>     int 21h
   961 0000470C 488D15F8CDFFFF      <1>     lea rdx, appRet
   962 00004713 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
   963 00004717 B822250000          <1>     mov eax, 2522h
   964 0000471C CD21                <1>     int 21h
   965                              <1>     return
    13                              <2> %%_ret:
    14 0000471E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   966                              <1> 
   967                              <1> ;-------------------------------
   968                              <1> ; Environment utility functions
   969                              <1> ;-------------------------------
   970                              <1> 
   971                              <1> cmpEnvVar:
   972                              <1> ;Checks that we have found the environment variable we are looking for.
   973                              <1> ;Input: rsi -> Environment var to verify the name of
   974                              <1> ;       rdi -> Environment var name to compare against
   975                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   976 0000471F 56                  <1>     push rsi
   977 00004720 57                  <1>     push rdi
   978 00004721 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   979                              <1> .lp:
   980 00004724 AC                  <1>     lodsb               ;Pick up from user string
   981 00004725 E8FDFCFFFF          <1>     call ucChar         ;Upper case it!
   982 0000472A 3807                <1>     cmp byte [rdi], al  
   983 0000472C 7509                <1>     jne .exit
   984 0000472E 3C3D                <1>     cmp al, "="         ;Are we at the end?
   985 00004730 7405                <1>     je .exit
   986 00004732 48FFC7              <1>     inc rdi
   987 00004735 EBED                <1>     jmp short .lp
   988                              <1> .exit:
   989 00004737 5F                  <1>     pop rdi
   990 00004738 5E                  <1>     pop rsi
   991                              <1>     return
    13                              <2> %%_ret:
    14 00004739 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   992                              <1> 
   993                              <1> checkEnvGoodAndGet:
   994                              <1> ;Gets the env ptr and checks that it is double null terminated.
   995                              <1> ;Output:
   996                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   997                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   998                              <1> ;           rsi -> Environment pointer
   999 0000473A 50                  <1>     push rax
  1000 0000473B 51                  <1>     push rcx
  1001 0000473C 57                  <1>     push rdi
  1002 0000473D 4150                <1>     push r8
  1003 0000473F 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1004 00004743 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1005 00004746 741A                <1>     jz .badExit
  1006 00004748 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1007 0000474B C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1008                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1009 0000474E 31C0                <1>     xor eax, eax
  1010                              <1> .pathNulScan:
  1011 00004750 F2AE                <1>     repne scasb
  1012 00004752 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1013 00004754 740C                <1>     jz .badExit
  1014 00004756 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1015 00004758 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1016 0000475A 31C0                <1>     xor eax, eax
  1017 0000475C FFC0                <1>     inc eax ;Clear the ZF
  1018 0000475E 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1019                              <1> .badExit:
  1020 00004762 4158                <1>     pop r8
  1021 00004764 5F                  <1>     pop rdi
  1022 00004765 59                  <1>     pop rcx
  1023 00004766 58                  <1>     pop rax
  1024                              <1>     return
    13                              <2> %%_ret:
    14 00004767 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1025                              <1> 
  1026                              <1> 
  1027                              <1> findEnvSpace:
  1028                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1029                              <1> ; free space in the pointer and a count of free space in the environment.
  1030                              <1> ;If count is zero, pointer is not to be used.
  1031                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1032 00004768 31C9                <1>     xor ecx, ecx
  1033 0000476A 31C0                <1>     xor eax, eax    ;Clear eax too
  1034 0000476C 51                  <1>     push rcx
  1035 0000476D E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1036 00004772 59                  <1>     pop rcx
  1037                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004773 74(67)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1038 00004775 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1039 00004779 FFC9                <1>     dec ecx ;Make into a large counter
  1040 0000477B 4889F7              <1>     mov rdi, rsi    
  1041                              <1> .endsearch:
  1042 0000477E F2AE                <1>     repne scasb ;Scan
  1043 00004780 803F00              <1>     cmp byte [rdi], 0
  1044 00004783 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1045                              <1>     ;Here we are at the end of the environment
  1046 00004785 F7D9                <1>     neg ecx
  1047 00004787 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1048 00004789 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1049 0000478C 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1050 0000478F 29C8                <1>     sub eax, ecx
  1051 00004791 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1052                              <1>     return
    13                              <2> %%_ret:
    14 00004793 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1053                              <1> 
  1054                              <1> searchForEnvVar:
  1055                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1056                              <1> ;Input: rdi -> Var name to look for.
  1057                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1058 00004794 57                  <1>     push rdi
  1059 00004795 51                  <1>     push rcx
  1060 00004796 52                  <1>     push rdx
  1061 00004797 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1062 0000479B 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1063                              <1> .varLp:
  1064 0000479E 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1065 000047A1 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1066 000047A6 7416                <1>     je .varFound
  1067 000047A8 31C0                <1>     xor eax, eax        ;Search for a null
  1068 000047AA 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1069 000047AD B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1070 000047B2 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1071 000047B4 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1072 000047B6 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1073 000047B8 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1074 000047BB EBE1                <1>     jmp short .varLp    ;And scan again!
  1075                              <1> .varNotFound:
  1076 000047BD F9                  <1>     stc
  1077                              <1> .varFound:
  1078 000047BE 59                  <1>     pop rcx
  1079 000047BF 5A                  <1>     pop rdx
  1080 000047C0 5F                  <1>     pop rdi
  1081                              <1>     return
    13                              <2> %%_ret:
    14 000047C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1082                              <1> 
  1083                              <1> envFree:
  1084                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1085                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1086                              <1> ; free byte of the environment!
  1087                              <1> ;Input: rsi -> Variable to free.
  1088                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1089                              <1> ;        ecx = Number of free bytes in env
  1090 000047C2 4889F7              <1>     mov rdi, rsi
  1091 000047C5 31C0                <1>     xor eax, eax
  1092                              <1> .freeLp:
  1093 000047C7 803F00              <1>     cmp byte [rdi], 0
  1094 000047CA 7403                <1>     je .exitLp
  1095 000047CC AA                  <1>     stosb
  1096 000047CD EBF8                <1>     jmp short .freeLp
  1097                              <1> .exitLp:
  1098                              <1> ;rdi points to the terminating null of the var we just deleted
  1099                              <1> ;rsi points to the start of the free space
  1100 000047CF 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1101 000047D2 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1102 000047D7 7504                <1>     jne .prepPullup
  1103 000047D9 31C0                <1>     xor eax, eax
  1104 000047DB EB0E                <1>     jmp short .cleanEnv
  1105                              <1> .prepPullup:
  1106 000047DD 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1107                              <1> .pullUp:
  1108 000047E0 AC                  <1>     lodsb
  1109 000047E1 AA                  <1>     stosb
  1110 000047E2 84C0                <1>     test al, al ;Did we pick up a zero
  1111 000047E4 75FA                <1>     jne .pullUp ;If not, keep copying
  1112 000047E6 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1113 000047E9 75F5                <1>     jne .pullUp
  1114                              <1> ;We are at the end of the copy!
  1115                              <1> .cleanEnv:
  1116 000047EB AA                  <1>     stosb   ;Store the famous second null
  1117 000047EC 48FFCF              <1>     dec rdi ;without incrementing it!!
  1118 000047EF E807000000          <1>     call getFreeSpace
  1119 000047F4 31C0                <1>     xor eax, eax
  1120 000047F6 51                  <1>     push rcx
  1121 000047F7 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1122 000047F9 59                  <1>     pop rcx
  1123                              <1>     return
    13                              <2> %%_ret:
    14 000047FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> 
  1125                              <1> getFreeSpace:
  1126                              <1> ;Output: ecx = Number of free bytes in the environment block
  1127 000047FB 56                  <1>     push rsi
  1128 000047FC 57                  <1>     push rdi
  1129 000047FD E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1130 00004802 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1131 00004806 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1132 00004809 E805000000          <1>     call getEnvSize ;Get total block size
  1133 0000480E 29F9                <1>     sub ecx, edi    ;Get difference!
  1134 00004810 5F                  <1>     pop rdi
  1135 00004811 5E                  <1>     pop rsi
  1136                              <1>     return
    13                              <2> %%_ret:
    14 00004812 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> 
  1138                              <1> getEnvSize:
  1139                              <1> ;Gets the number of bytes in the environment allocation
  1140                              <1> ;Output: ecx = Number of bytes in the environment!
  1141 00004813 53                  <1>     push rbx
  1142 00004814 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1143 00004818 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1144 0000481B C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1145 0000481E 5B                  <1>     pop rbx
  1146                              <1>     return
    13                              <2> %%_ret:
    14 0000481F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1147                              <1> 
  1148                              <1> getPtrToEndOfEnv:
  1149                              <1> ;Gets ptr to end of the environment
  1150                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1151 00004820 50                  <1>     push rax
  1152 00004821 51                  <1>     push rcx
  1153 00004822 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1154 00004826 31C0                <1>     xor eax, eax
  1155 00004828 31C9                <1>     xor ecx, ecx
  1156 0000482A FFC9                <1>     dec ecx
  1157                              <1> .lp:
  1158 0000482C F2AE                <1>     repne scasb
  1159 0000482E 3807                <1>     cmp byte [rdi], al
  1160 00004830 75FA                <1>     jne .lp
  1161 00004832 59                  <1>     pop rcx
  1162 00004833 58                  <1>     pop rax
  1163                              <1>     return
    13                              <2> %%_ret:
    14 00004834 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1164                              <1> 
  1165                              <1> growEnvBlock:
  1166                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1167                              <1> ; newly allocated 160 byte block of the environment.
  1168                              <1> ;Returns:   CF=NC - Environment grown ok!
  1169                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1170                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1171 00004835 50                  <1>     push rax
  1172 00004836 53                  <1>     push rbx
  1173 00004837 51                  <1>     push rcx
  1174 00004838 56                  <1>     push rsi
  1175 00004839 57                  <1>     push rdi
  1176 0000483A E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1177 0000483F E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1178 00004844 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1179 00004848 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1180 0000484B 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1181 00004851 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1182 00004857 7321                <1>     jae .tooLarge
  1183                              <1>     ;Here ZF must be NZ.
  1184 00004859 4150                <1>     push r8
  1185 0000485B 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1186 0000485F B8004A0000          <1>     mov eax, 4A00h
  1187 00004864 CD21                <1>     int 21h
  1188 00004866 4158                <1>     pop r8
  1189 00004868 720A                <1>     jc .exit
  1190                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1191                              <1>     ; so we add 160 zeros to the count of bytes
  1192 0000486A 81C1A0000000        <1>     add ecx, 0A0h
  1193 00004870 31C0                <1>     xor eax, eax
  1194 00004872 F3AA                <1>     rep stosb
  1195                              <1> .exit:
  1196 00004874 5F                  <1>     pop rdi
  1197 00004875 5E                  <1>     pop rsi
  1198 00004876 59                  <1>     pop rcx
  1199 00004877 5B                  <1>     pop rbx
  1200 00004878 58                  <1>     pop rax
  1201                              <1>     return
    13                              <2> %%_ret:
    14 00004879 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1202                              <1> .tooLarge:
  1203 0000487A 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1204 0000487D F9                  <1>     stc             ;Set CF
  1205 0000487E EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> int23h:
     2 00004880 F60516B8FFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 00004887 7411                <1>     jz .notLoading
     4 00004889 F6050DB8FFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 00004890 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 00004892 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 00004898 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 0000489A F605FCB7FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 000048A1 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 000048A3 84E4                <1>     test ah, ah
    17 000048A5 7424                <1>     jz .inInt23 
    18 000048A7 80FC0C              <1>     cmp ah, 0Ch
    19 000048AA 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 000048AC 50                  <1>     push rax
    23 000048AD 488D0512000000      <1>     lea rax, .i23Bounce
    24 000048B4 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 000048B9 31C0                <1>     xor eax, eax
    26 000048BB 668CC8              <1>     mov ax, cs
    27 000048BE 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 000048C3 58                  <1>     pop rax
    29 000048C4 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 000048C6 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 000048CB 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 000048CD 800DC9B7FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 000048D4 F605C2B7FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 000048DB 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 000048DD 50                  <1>     push rax
    43 000048DE B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 000048E3 CD21                <1>     int 21h
    45 000048E5 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 000048E6 F605B0B7FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 000048ED 7462                <1>     jz .notBat
    49 000048EF F605A7B7FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 000048F6 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 000048F8 E819020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 000048FD 488D1502C0FFFF      <1>     lea rdx, batFail
    57 00004904 E800F9FFFF          <1>     call printString
    58 00004909 488D15FAB7FFFF      <1>     lea rdx, batYNstr
    59 00004910 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004916 B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 0000491B CD21                <1>     int 21h
    62 0000491D 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 0000491F 8A4202              <1>     mov al, byte [rdx + 2]
    64 00004922 E800FBFFFF          <1>     call ucChar         ;UC using DOS
    65 00004927 3C59                <1>     cmp al, "Y"
    66 00004929 740E                <1>     je .killBat
    67 0000492B 3C4E                <1>     cmp al, "N"
    68 0000492D 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 0000492F E8CEF8FFFF          <1>     call printCRLF
    74 00004934 E956000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 00004939 E844D4FFFF          <1>     call batCleanup
    77 0000493E EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 00004940 E83DD4FFFF          <1>     call batCleanup
    80 00004945 802551B7FFFFFD      <1>     and byte [statFlg1], ~inCtrlC   
    81 0000494C E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 00004951 50                  <1>     push rax        ;Save rax, ah contains call we are in that ^C'ed
    84 00004952 53                  <1>     push rbx
    85 00004953 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
    86 00004958 CD21                <1>     int 21h
    87 0000495A 58                  <1>     pop rax
    88 0000495B 483B1DADB6FFFF      <1>     cmp rbx, qword [pspPtr] ;Was the task us?
    89 00004962 5B                  <1>     pop rbx
    90 00004963 752F                <1>     jne .exit       ;If not, then immediately abort it!
    91 00004965 F605BFB6FFFFFF      <1>     test byte [permaSwitch], -1 ;If not permanent, skip parent PSP swap
    92 0000496C 7516                <1>     jnz .noJuggle   ;Avoid setting "real parent"
    93                              <1>     ;Else, we juggle parent PSP's. This is done when /P is not specified
    94 0000496E 50                  <1>     push rax
    95 0000496F 53                  <1>     push rbx
    96 00004970 488B05A0B6FFFF      <1>     mov rax, qword [realParent]
    97 00004977 488B1D91B6FFFF      <1>     mov rbx, qword [pspPtr]
    98 0000497E 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
    99 00004982 5B                  <1>     pop rbx
   100 00004983 58                  <1>     pop rax
   101                              <1> .noJuggle:
   102 00004984 66813D12B7FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
   103 0000498D 7405                <1>     je .exit
   104                              <1> .exitBat:
   105 0000498F E89F010000          <1>     call errRetHdls 
   106                              <1> .exit:
   107 00004994 802502B7FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
   108                              <1> .exitIn:
   109 0000499B F9                  <1>     stc     ;Set CF to kill the task
   110 0000499C C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
   111                              <1> ;All we need is that the stack pointer is not at the address we had it
   112                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
   113                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 0000499F 53                  <1>     push rbx
    25 000049A0 51                  <1>     push rcx
    26 000049A1 52                  <1>     push rdx
    27 000049A2 57                  <1>     push rdi
    28 000049A3 56                  <1>     push rsi
    29 000049A4 E86D010000          <1>     call errSwapHdls
    30 000049A9 FC                  <1>     cld         ;Make String ops go forward
    31 000049AA 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 000049AD 488D15F5BEFFFF      <1>     lea rdx, crlf
    33 000049B4 E850F8FFFF          <1>     call printString
    34                              <1> 
    35 000049B9 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36                              <1> ;    cmp edi, 0Fh     ;Is this special case error 15h?
    37                              <1> ;    jne .notError15
    38                              <1> ; Need to do Extended Error call to get the ptr to the volume label.
    39                              <1> ; Disk driver doesnt currently update the volume label in the BPB and doesn't
    40                              <1> ; place the volume label in the field in the driver block, but DOS assumes it 
    41                              <1> ; does. Once that is implemented, I will activate this section of code!
    42                              <1> .notError15:
    43 000049BF B90C000000          <1>     mov ecx, 0Ch
    44 000049C4 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    45 000049C6 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    46 000049C9 480FB7FF            <1>     movzx rdi, di
    47 000049CD 4889FA              <1>     mov rdx, rdi    ;Copy error code
    48 000049D0 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    49 000049D4 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    50 000049D7 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    51 000049DA 488D1534C5FFFF      <1>     lea rdx, errorMsgTable
    52 000049E1 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    53 000049E5 E81FF8FFFF          <1>     call printString     ;Call DOS to print first part of message
    54                              <1> 
    55 000049EA 488D1558C6FFFF      <1>     lea rdx, readMsg
    56 000049F1 488D3D60C6FFFF      <1>     lea rdi, writeMsg
    57 000049F8 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    58 000049FB 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    59 000049FF E805F8FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    60                              <1> 
    61 00004A04 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    62 00004A07 0F85EF000000        <1>     jnz .charError
    63                              <1> ;Disk error continues here
    64 00004A0D 488D152EC6FFFF      <1>     lea rdx, drvMsg ;Drive message
    65 00004A14 E8F0F7FFFF          <1>     call printString
    66 00004A19 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    67 00004A1B 80C241              <1>     add dl, "A" ;Add ASCII code
    68 00004A1E B402                <1>     mov ah, 02h ;Print char in dl
    69 00004A20 CD21                <1>     int 21h
    70                              <1> .userInput:
    71 00004A22 E8DBF7FFFF          <1>     call printCRLF  ;Print new line
    72                              <1> ;Abort, Retry, Ignore, Fail is word order
    73                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    74                              <1> .userAbort:
    75                              <1> ;Abort is always an option
    76 00004A27 488D1539C6FFFF      <1>     lea rdx, abortMsg
    77 00004A2E E8D6F7FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 00004A33 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 00004A36 7418                <1>     jz .userIgnore    ;If clear, dont print message
    81 00004A38 488D1540C6FFFF      <1>     lea rdx, betweenMsg
    82 00004A3F E8C5F7FFFF          <1>     call printString
    83 00004A44 488D1529C6FFFF      <1>     lea rdx, retryMsg
    84 00004A4B E8B9F7FFFF          <1>     call printString
    85                              <1> .userIgnore:
    86 00004A50 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    87 00004A53 7418                <1>     jz .userFail
    88 00004A55 488D1523C6FFFF      <1>     lea rdx, betweenMsg
    89 00004A5C E8A8F7FFFF          <1>     call printString
    90 00004A61 488D1505C6FFFF      <1>     lea rdx, ignoreMsg
    91 00004A68 E89CF7FFFF          <1>     call printString
    92                              <1> .userFail:
    93 00004A6D F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    94 00004A70 7418                <1>     jz .userMsgEnd
    95 00004A72 488D1506C6FFFF      <1>     lea rdx, betweenMsg
    96 00004A79 E88BF7FFFF          <1>     call printString
    97 00004A7E 488D15F5C5FFFF      <1>     lea rdx, failMsg
    98 00004A85 E87FF7FFFF          <1>     call printString
    99                              <1> .userMsgEnd:
   100 00004A8A 488D15F1C5FFFF      <1>     lea rdx, endMsg
   101 00004A91 E873F7FFFF          <1>     call printString
   102                              <1> ;Get user input now 
   103 00004A96 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   104 00004A98 488D3DE6C5FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   105 00004A9F B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   106 00004AA4 CD21                <1>     int 21h ;Get char in al
   107 00004AA6 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   108 00004AA8 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   109 00004AAA 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   110                              <1> .uip1:
   111 00004AAC AE                  <1>     scasb   ;Compare char to list, offset gives return code
   112 00004AAD 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   113 00004AAF FFC1                <1>     inc ecx
   114 00004AB1 81F904000000        <1>     cmp ecx, 4
   115 00004AB7 75F3                <1>     jne .uip1
   116 00004AB9 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   117                              <1> .validInput:
   118 00004ABE E83FF7FFFF          <1>     call printCRLF   ;Note the input was accepted
   119 00004AC3 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   120                              <1> ;Now check if the input is permitted
   121 00004AC5 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   122 00004AC7 7427                <1>     je .cehExit
   123 00004AC9 84C0                <1>     test al, al ;Check if 0 => Ignore
   124 00004ACB 740F                <1>     je .viIgnore
   125 00004ACD 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   126 00004ACF 7416                <1>     je .viRetry
   127                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   128 00004AD1 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   129 00004AD4 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   130 00004ADA EB14                <1>     jmp short .cehExit
   131                              <1> .viIgnore:
   132 00004ADC F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   133 00004ADF 0F843DFFFFFF        <1>     jz .userInput
   134 00004AE5 EB09                <1>     jmp short .cehExit
   135                              <1> .viRetry:
   136 00004AE7 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   137 00004AEA 0F8432FFFFFF        <1>     jz .userInput
   138                              <1> .cehExit:
   139 00004AF0 E83E000000          <1>     call errRetHdls
   140 00004AF5 5E                  <1>     pop rsi
   141 00004AF6 5F                  <1>     pop rdi
   142 00004AF7 5A                  <1>     pop rdx
   143 00004AF8 59                  <1>     pop rcx
   144 00004AF9 5B                  <1>     pop rbx
   145 00004AFA 48CF                <1>     iretq
   146                              <1> .charError:
   147 00004AFC B908000000          <1>     mov ecx, 8  ;8 chars in device name
   148 00004B01 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   149                              <1> .ce1:
   150 00004B08 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   151 00004B09 88C2                <1>     mov dl, al  ;Move char into dl
   152 00004B0B B402                <1>     mov ah, 02h
   153 00004B0D CD21                <1>     int 21h ;Print char
   154 00004B0F E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   155 00004B11 E90CFFFFFF          <1>     jmp .userInput
   156                              <1> 
   157                              <1> 
   158                              <1> errSwapHdls:
   159                              <1> ;Swaps STDIO to STDERR
   160                              <1> ;Start by tmporarily moving the stderr handler into stdio
   161                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   162 00004B16 50                  <1>     push rax
   163 00004B17 53                  <1>     push rbx
   164 00004B18 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   165 00004B1D 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   166 00004B20 66890578B5FFFF      <1>     mov word [errHdls], ax      ;Save em
   167 00004B27 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   168 00004B2B 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   169 00004B2D 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   170 00004B30 5B                  <1>     pop rbx
   171 00004B31 58                  <1>     pop rax
   172                              <1>     return
    13                              <2> %%_ret:
    14 00004B32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> errRetHdls:
   175                              <1> ;Returns STDIO from STDERR.
   176 00004B33 50                  <1>     push rax
   177 00004B34 53                  <1>     push rbx
   178 00004B35 E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   179 00004B3A 0FB7055EB5FFFF      <1>     movzx eax, word [errHdls]
   180 00004B41 66C70555B5FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   181 00004B4A 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   182 00004B4D 5B                  <1>     pop rbx
   183 00004B4E 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 00004B4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> 
   186                              <1> getJftPtr:
   187                              <1> ;Preserves all registers except rbx.
   188                              <1> ;Output: rbx -> JFT of current task
   189 00004B50 50                  <1>     push rax        ;Save rax
   190 00004B51 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   191 00004B56 CD21                <1>     int 21h
   192 00004B58 58                  <1>     pop rax
   193 00004B59 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   194 00004B5F 7605                <1>     jbe .pspJftExit
   195 00004B61 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   196                              <1>     return
    13                              <2> %%_ret:
    14 00004B65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> .pspJftExit:
   198 00004B66 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   199                              <1>     return
    13                              <2> %%_ret:
    14 00004B6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D150F020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 800D(9D000000)80    <1>     or byte [statFlg1], inLdr  ;Ok now we start our special work
    15 0000001C 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    16 00000023 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    17 00000027 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    18 0000002B 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    19                              <1> ;Setup Int 22h, Int 23h and Int 24h
    20 00000032 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    21 00000036 488905(2C000000)    <1>     mov qword [parentInt22], rax
    22 0000003D E8(E8460000)        <1>     call resetIDTentries
    23                              <1> ;Get a pointer to DOS Sysvars
    24 00000042 B452                <1>     mov ah, 52h ;Get sysvars
    25 00000044 CD21                <1>     int 21h
    26 00000046 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    27                              <1> ;Call for simple internationalisation data
    28 0000004D B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    29 00000052 CD21                <1>     int 21h
    30 00000054 3CFF                <1>     cmp al, -1
    31 00000056 7412                <1>     je .skipSwitch
    32 00000058 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    33 0000005E 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    34 00000061 7507                <1>     jne .skipSwitch
    35 00000063 C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    36                              <1> .skipSwitch:
    37 0000006A B800380000          <1>     mov eax, 3800h  ;Get current country data
    38 0000006F 488D15(34000000)    <1>     lea rdx, ctryData
    39 00000076 CD21                <1>     int 21h ;Write the data to the internal country table
    40                              <1> ;Now determine if this is the master copy of COMMAND.COM
    41                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    42 00000078 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    43 0000007D CD21                <1>     int 21h
    44 0000007F 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    45 00000082 B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    46 00000087 CD21                <1>     int 21h
    47 00000089 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    48 0000008C 0F85B9000000        <1>     jne .skipMaster
    49                              <1> ;Ok so we are master command.com
    50                              <1> ;Now make myself the real parent
    51 00000092 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    52 00000099 4C8905(17000000)    <1>     mov qword [realParent], r8
    53                              <1> ;Set current Drive in COMSPEC
    54 000000A0 B800190000          <1>     mov eax, 1900h ;Get current Drive
    55 000000A5 CD21                <1>     int 21h
    56 000000A7 0441                <1>     add al, "A"
    57 000000A9 8805(91100000)      <1>     mov byte [comspecEvar.cspec], al
    58 000000AF 8805(050F0000)      <1>     mov byte [autoSpec], al 
    59                              <1> ;Set Int 2Eh up
    60 000000B5 488D15(A91A0000)    <1>     lea rdx, int2Eh
    61 000000BC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    62 000000C1 CD21                <1>     int 21h
    63                              <1> ;Now allocate the master environment!
    64 000000C3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    65 000000C8 B800480000          <1>     mov eax, 4800h
    66 000000CD CD21                <1>     int 21h
    67 000000CF 0F823EFFFFFF        <1>     jc .exitBad
    68                              <1> ;Set master environment as mine
    69 000000D5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    70 000000D9 488D35(89100000)    <1>     lea rsi, masterEnv
    71 000000E0 4889C7              <1>     mov rdi, rax
    72 000000E3 B91E000000          <1>     mov ecx, menv_len
    73 000000E8 F3A4                <1>     rep movsb   ;Copy the chars over!
    74                              <1> ;Now, open AUTOEXEC.BAT. 
    75 000000EA 488D15(050F0000)    <1>     lea rdx, autoSpec
    76 000000F1 B8003D0000          <1>     mov eax, 3D00h  ;Open file
    77 000000F6 CD21                <1>     int 21h
    78 000000F8 7221                <1>     jc .noAutoexec
    79                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    80                              <1>     ; the normal hello there! string
    81 000000FA 89C3                <1>     mov ebx, eax
    82 000000FC B8003E0000          <1>     mov eax, 3E00h  ;Close file
    83 00000101 CD21                <1>     int 21h
    84                              <1> ;Now we do the same as at the end, prepping for jettisoning
    85 00000103 E82E010000          <1>     call computeStackPtr    ;Returns the stack ptr in rbx and var
    86 00000108 4889DC              <1>     mov rsp, rbx        ;Move the stack pointer to this address
    87 0000010B 8025(9D000000)7F    <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
    88 00000112 31D2                <1>     xor edx, edx
    89 00000114 FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    90 00000116 E9(A7100000)        <1>     jmp commandStart
    91                              <1> .noAutoexec:
    92                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    93 0000011B 488D15(A9080000)    <1>     lea rdx, crlf
    94 00000122 B409                <1>     mov ah, 09h
    95 00000124 CD21                <1>     int 21h
    96 00000126 800D(9D000000)40    <1>     or byte [statFlg1], inLdrDT
    97 0000012D E8(B42E0000)        <1>     call time
    98 00000132 E8(062D0000)        <1>     call date
    99 00000137 8025(9D000000)BF    <1>     and byte [statFlg1], ~inLdrDT
   100 0000013E 488D15(A9080000)    <1>     lea rdx, crlf
   101 00000145 B409                <1>     mov ah, 09h
   102 00000147 CD21                <1>     int 21h
   103 00000149 EB2E                <1>     jmp short .printInit
   104                              <1> .skipMaster:    
   105                              <1> ;We now search for the master environment!!
   106                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
   107                              <1>     ; parent. This is the previous master command interpreter! This means
   108                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
   109                              <1>     ; then set our environment ptr in the PSP to the master environment.
   110 0000014B 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   111 00000152 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   112 0000015A 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
   113 00000161 F2AE                <1>     repne scasb
   114 00000163 67E313              <1>     jecxz .printInit
   115 00000166 0FB607              <1>     movzx eax, byte [rdi]   ;rdi points to the char after the switch
   116 00000169 E8(27440000)        <1>     call ucChar
   117 0000016E 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   118 00000170 7507                <1>     jne .printInit
   119 00000172 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   120                              <1> .printInit:
   121                              <1> ;Finish by printing INIT string.
   122 00000179 488D152A000000      <1>     lea rdx, initString
   123 00000180 B409                <1>     mov ah, 09h
   124 00000182 CD21                <1>     int 21h ;Print init string
   125 00000184 E8(F2370000)        <1>     call version.printVersionNumber
   126 00000189 488D1550000000      <1>     lea rdx, initString2
   127 00000190 B409                <1>     mov ah, 09h
   128 00000192 CD21                <1>     int 21h ;Print init string
   129 00000194 E89D000000          <1>     call computeStackPtr    ;Returns the stack ptr in rbx and var
   130 00000199 4889DC              <1>     mov rsp, rbx        ;Move the stack pointer to this address
   131 0000019C 8025(9D000000)7F    <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   132 000001A3 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   133 000001A5 E9(A7100000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   134                              <1> ;Loader Data here
   135                              <1> initString: 
   136 000001AA 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   136 000001B3 66696320436F6D7075- <1>
   136 000001BC 746572205265736561- <1>
   136 000001C5 726368285229205343- <1>
   136 000001CE 502F444F5328522920- <1>
   136 000001D7 56657273696F6E2024  <1>
   137                              <1> initString2:
   138 000001E0 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   138 000001E9 202020284329436F70- <1>
   138 000001F2 797269676874205363- <1>
   138 000001FB 69656E746966696320- <1>
   138 00000204 436F6D707574657220- <1>
   138 0000020D 526573656172636820- <1>
   138 00000216 323032342E0D0A24    <1>
   139 0000021E 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   139 00000227 20444F532076657273- <1>
   139 00000230 696F6E0D0A24        <1>
   140                              <1> 
   141                              <1> computeStackPtr:
   142                              <1>     ;Now we add the stack to the alloc and paragraph align
   143 00000236 488D1D(6B4B0000)    <1>     lea rbx, endOfAlloc
   144 0000023D 4881C340060000      <1>     add rbx, stackSize
   145 00000244 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   146 0000024B 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   147 0000024F 48C1E304            <1>     shl rbx, 4
   148 00000253 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   149                              <1>     return
    13                              <2> %%_ret:
    14 0000025A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+7+2 passes

