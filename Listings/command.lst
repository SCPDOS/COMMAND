     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    33 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    34 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    35                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    36                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    37                              <1> endstruc
    38                              <1> bbNoParam   equ -1
    39                              <1> bbNull      equ 0
    40                              <1> bbEchoOn    equ 1
    41                              <1> bbEchoOff   equ 0
    42                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    43                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    48 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    49 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    50 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    51 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    52 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc execProg  ;For use with EXEC-ing a child task
    56 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    60                              <1> endstruc
    61                              <1> 
    62                              <1> ;Directory attribute equates
    63                              <1>     dirReadOnly     equ 01h
    64                              <1>     dirHidden       equ 02h
    65                              <1>     dirSystem       equ 04h
    66                              <1>     dirVolumeID     equ 08h
    67                              <1>     dirDirectory    equ 10h
    68                              <1>     dirArchive      equ 20h
    69                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    70                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    71                              <1>     ;If any of the three bits are set, then ALL three bits are set
    72                              <1>     ; in addition to whatever the user passed to search for.
    73                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    74                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT kills
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17 0000009D 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    18                              <1> inCritical  equ 1   ;Up if processing a command
    19                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    20                              <1> inSingle    equ 4   ;Up if processing a single command (\C mode)
    21                              <1> inBatch     equ 8   ;Up if processing a batch file
    22                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    23                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    24                              <1> inLdr       equ 80h ;Up if in loader
    25 0000009E 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    26 0000009F FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    27                              <1> 
    28                              <1> cmdLineStatePtr:
    29 000000A1 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    30 000000A2 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    31 000000A4 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    32                              <1> ;These variables are valid for a SINGLE command in a command line
    33                              <1> ;Next two bytes, if set to -1, flags error
    34 000000A6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    35 000000A7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    36                              <1> ;                    If 2, we are redirecting output to a file, by appending
    37 000000A8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    38 000000AA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    39                              <1> 
    40                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    41 000000AC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    42 000000AD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    43 000000AE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    44                              <1> 
    45 000000AF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    46 000000B0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    47 000000B1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    48                              <1> 
    49 000000B2 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> 
    53                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    54 000000B3 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    55 000000BB 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    55 000000C4 000000000000000000- <1>
    55 000000CD 000000000000000000- <1>
    55 000000D6 000000000000000000- <1>
    55 000000DF 000000000000000000- <1>
    55 000000E8 000000000000000000- <1>
    55 000000F1 000000000000000000- <1>
    55 000000FA 000000000000000000- <1>
    55 00000103 00000000000000      <1>
    56 0000010A 000000000000000000- <1> batCurDir   db fileSpecZL dup (0)   ;Get dir on bat drive and save here.
    56 00000113 000000000000000000- <1>
    56 0000011C 000000000000000000- <1>
    56 00000125 000000000000000000- <1>
    56 0000012E 000000000000000000- <1>
    56 00000137 000000000000000000- <1>
    56 00000140 000000000000000000- <1>
    56 00000149 000000000000000000- <1>
    56 00000152 00000000000000      <1>
    57 00000159 04014E0D            <1> batYNstr    db 4,1,"N",CR           ;String for buffered Y/N input
    58                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    59                              <1> 
    60                              <1> ;Structs and strings
    61                              <1> 
    62 0000015D 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    62 00000166 00000000000000      <1>
    63 0000016D 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    63 00000176 000000000000000000- <1>
    63 0000017F 000000000000000000- <1>
    63 00000188 000000000000000000- <1>
    63 00000191 00000000000000      <1>
    64                              <1> 
    65 00000198 000000000000000000- <1> launchBlock db execProg_size dup (0)
    65 000001A1 000000000000000000- <1>
    65 000001AA 000000000000000000- <1>
    65 000001B3 0000000000          <1>
    66                              <1> 
    67 000001B8 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Original input from user! 128 chars max! 
    67 000001C1 000000000000000000- <1>
    67 000001CA 000000000000000000- <1>
    67 000001D3 000000000000000000- <1>
    67 000001DC 000000000000000000- <1>
    67 000001E5 000000000000000000- <1>
    67 000001EE 000000000000000000- <1>
    67 000001F7 000000000000000000- <1>
    67 00000200 000000000000000000- <1>
    67 00000209 000000000000000000- <1>
    67 00000212 000000000000000000- <1>
    67 0000021B 000000000000000000- <1>
    67 00000224 000000000000000000- <1>
    67 0000022D 000000000000000000- <1>
    67 00000236 00000000            <1>
    68                              <1> inBufferL   equ 128 ;Will be enuf space for PSP copy to have terminating CR
    69 0000023A 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    69 00000243 000000000000000000- <1>
    69 0000024C 000000000000000000- <1>
    69 00000255 000000000000000000- <1>
    69 0000025E 000000000000000000- <1>
    69 00000267 000000000000000000- <1>
    69 00000270 000000000000000000- <1>
    69 00000279 000000000000000000- <1>
    69 00000282 000000000000000000- <1>
    69 0000028B 000000000000000000- <1>
    69 00000294 000000000000000000- <1>
    69 0000029D 000000000000000000- <1>
    69 000002A6 000000000000000000- <1>
    69 000002AF 000000000000000000- <1>
    69 000002B8 00000000            <1>
    70 000002BC 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    70 000002C5 000000000000000000- <1>
    70 000002CE 000000000000000000- <1>
    70 000002D7 000000000000000000- <1>
    70 000002E0 000000000000000000- <1>
    70 000002E9 000000000000000000- <1>
    70 000002F2 000000000000000000- <1>
    70 000002FB 000000000000000000- <1>
    70 00000304 000000000000000000- <1>
    70 0000030D 000000000000000000- <1>
    70 00000316 000000000000000000- <1>
    70 0000031F 000000000000000000- <1>
    70 00000328 000000000000000000- <1>
    70 00000331 000000000000000000- <1>
    70 0000033A 00000000            <1>
    71 0000033E 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    71 00000347 000000000000000000- <1>
    71 00000350 000000000000000000- <1>
    71 00000359 000000000000000000- <1>
    71 00000362 000000000000000000- <1>
    71 0000036B 000000000000000000- <1>
    71 00000374 000000000000000000- <1>
    71 0000037D 000000000000000000- <1>
    71 00000386 00000000000000      <1>
    72 0000038D 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    72 00000396 0000000000          <1>
    73                              <1> 
    74 0000039B 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    74 000003A4 000000000000000000- <1>
    74 000003AD 000000000000000000- <1>
    74 000003B6 000000000000000000- <1>
    74 000003BF 000000000000000000- <1>
    74 000003C8 000000000000000000- <1>
    74 000003D1 000000000000000000- <1>
    74 000003DA 000000000000000000- <1>
    74 000003E3 00000000000000      <1>
    75 000003EA 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    75 000003F3 000000000000000000- <1>
    75 000003FC 000000000000000000- <1>
    75 00000405 000000000000000000- <1>
    75 0000040E 000000000000000000- <1>
    75 00000417 000000000000000000- <1>
    75 00000420 000000000000000000- <1>
    75 00000429 000000000000000000- <1>
    75 00000432 00000000000000      <1>
    76                              <1> 
    77                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    78 00000439 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    78 00000442 000000000000000000- <1>
    78 0000044B 000000000000000000- <1>
    78 00000454 000000000000000000- <1>
    78 0000045D 000000000000000000- <1>
    78 00000466 000000000000000000- <1>
    78 0000046F 000000000000000000- <1>
    78 00000478 000000000000000000- <1>
    78 00000481 00000000000000      <1>
    79 00000488 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    79 00000491 000000000000000000- <1>
    79 0000049A 000000000000000000- <1>
    79 000004A3 000000000000000000- <1>
    79 000004AC 000000000000000000- <1>
    79 000004B5 000000000000000000- <1>
    79 000004BE 000000000000000000- <1>
    79 000004C7 000000000000000000- <1>
    79 000004D0 00000000000000      <1>
    80                              <1> 
    81 000004D7 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    82 000004DF 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    83                              <1> 
    84                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    85                              <1> ; a really long invalid DOS path for PATH to work properly.
    86 000004E7 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    86 000004F0 000000000000000000- <1>
    86 000004F9 000000000000000000- <1>
    86 00000502 000000000000000000- <1>
    86 0000050B 000000000000000000- <1>
    86 00000514 000000000000000000- <1>
    86 0000051D 000000000000000000- <1>
    86 00000526 000000000000000000- <1>
    86 0000052F 000000000000000000- <1>
    86 00000538 000000000000000000- <1>
    86 00000541 000000000000000000- <1>
    86 0000054A 000000000000000000- <1>
    86 00000553 000000000000000000- <1>
    86 0000055C 000000000000000000- <1>
    86 00000565 000000000000000000- <1>
    86 0000056E 000000000000000000- <1>
    86 00000577 000000000000000000- <1>
    86 00000580 000000000000000000- <1>
    86 00000589 000000000000000000- <1>
    86 00000592 000000000000000000- <1>
    86 0000059B 000000000000000000- <1>
    86 000005A4 000000000000000000- <1>
    86 000005AD 000000000000000000- <1>
    86 000005B6 000000000000000000- <1>
    86 000005BF 000000000000000000- <1>
    86 000005C8 000000000000000000- <1>
    86 000005D1 000000000000000000- <1>
    86 000005DA 000000000000000000- <1>
    86 000005E3 0000000000000000    <1>
    87                              <1> 
    88                              <1> ;Internal Function vars
    89                              <1> ;Dir Vars
    90 000005EB 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    91                              <1> ;                                   Bit[1] set => /P or /p specified
    92                              <1> ;                                   Bit[2] set => A file/path specified
    93 000005EC 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    94 000005ED 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
    95 000005F1 00                  <1> dirDrv      db 0    ;0 based drive number to use
    96 000005F2 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    96 000005FB 000000000000000000- <1>
    96 00000604 000000000000000000- <1>
    96 0000060D 000000000000000000- <1>
    96 00000616 000000000000000000- <1>
    96 0000061F 000000000000000000- <1>
    96 00000628 000000000000000000- <1>
    96 00000631 000000000000000000- <1>
    96 0000063A 000000000000000000- <1>
    96 00000643 000000000000000000- <1>
    96 0000064C 000000000000000000- <1>
    96 00000655 000000000000000000- <1>
    96 0000065E 000000000000000000- <1>
    96 00000667 000000000000000000- <1>
    96 00000670 00000000            <1>
    97 00000674 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    97 0000067D 3F3F3F3F3F3F3F      <1>
    98                              <1> dirWideType equ 1
    99                              <1> dirPageType equ 2
   100                              <1> dirFileType equ 4
   101                              <1> ;Volume Vars
   102                              <1> volFcb:
   103                              <1>     istruc exFcb
   104 00000684 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   105 00000685 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   106 0000068B 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   107 0000068C 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   108 00000694 3F3F3F              <1>     at exFcb.fileext,   db "???"
   109 00000697 00000000            <1>     at exFcb.curBlock,  dd 0
   110 0000069B 00<rep 15h>         <1>     iend 
   111                              <1> 
   112                              <1> ;Time/Date vars
   113 000006B0 00                  <1> td1 db 0    ;Minutes/Year
   114 000006B1 00                  <1> td2 db 0    ;Hours/Zero
   115 000006B2 00                  <1> td3 db 0    ;Hundredths/Day
   116 000006B3 00                  <1> td4 db 0    ;Seconds/Month
   117                              <1> 
   118                              <1> ;Rename/Copy/Delete Buffers
   119                              <1> delPath:
   120 000006B4 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   120 000006BD 000000000000000000- <1>
   120 000006C6 000000000000000000- <1>
   120 000006CF 000000000000000000- <1>
   120 000006D8 000000000000000000- <1>
   120 000006E1 000000000000000000- <1>
   120 000006EA 000000000000000000- <1>
   120 000006F3 000000000000000000- <1>
   120 000006FC 000000000000000000- <1>
   120 00000705 000000000000000000- <1>
   120 0000070E 000000000000000000- <1>
   120 00000717 000000000000000000- <1>
   120 00000720 000000000000000000- <1>
   120 00000729 000000000000000000- <1>
   120 00000732 00000000            <1>
   121 00000736 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   121 0000073F 000000000000000000- <1>
   121 00000748 000000000000000000- <1>
   121 00000751 000000000000000000- <1>
   121 0000075A 000000000000000000- <1>
   121 00000763 000000000000000000- <1>
   121 0000076C 000000000000000000- <1>
   121 00000775 000000000000000000- <1>
   121 0000077E 000000000000000000- <1>
   121 00000787 000000000000000000- <1>
   121 00000790 000000000000000000- <1>
   121 00000799 000000000000000000- <1>
   121 000007A2 000000000000000000- <1>
   121 000007AB 000000000000000000- <1>
   121 000007B4 00000000            <1>
   122 000007B8 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   123 000007C0 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   124 000007C8 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   124 000007D1 2020                <1>
   125                              <1> ;Copy vars
   126 000007D3 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   127 000007D4 FFFF                <1> sourceHdl   dw -1
   128 000007D6 FFFF                <1> destHdl     dw -1
   129 000007D8 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   130 000007DA 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   131 000007E2 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   132 000007E4 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   133 000007E8 00                  <1> bCpFlg      db 0    ;Copy state flag
   134                              <1> 
   135                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   136                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   137                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   138                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   139                              <1> oneDest     equ 10h ;Single destination, not dir 
   140                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   141                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   142                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   143                              <1> 
   144                              <1> ;Environment manipulation vars
   145 000007E9 0000                <1> envVarSz        dw 0    ;Env var size
   146 000007EB 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000007ED 03444952            <1>     db 3, "DIR"
     8 000007F1 411D                <1>     dw dir - startLbl
     9                              <1> 
    10 000007F3 024344              <1>     db 2, "CD"
    11 000007F6 3122                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007F8 054348444952        <1>     db 5, "CHDIR"
    14 000007FE 3122                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000800 024D44              <1>     db 2, "MD"
    17 00000803 AC22                <1>     dw mkdir - startLbl
    18                              <1> 
    19 00000805 054D4B444952        <1>     db 5, "MKDIR"
    20 0000080B AC22                <1>     dw mkdir - startLbl
    21                              <1> 
    22 0000080D 025244              <1>     db 2, "RD"
    23 00000810 F522                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000812 05524D444952        <1>     db 5, "RMDIR"
    26 00000818 F522                <1>     dw rmdir - startLbl
    27                              <1> 
    28 0000081A 0344454C            <1>     db 3, "DEL"
    29 0000081E B82A                <1>     dw erase - startLbl
    30                              <1> 
    31 00000820 054552415345        <1>     db 5, "ERASE"
    32 00000826 B82A                <1>     dw erase - startLbl
    33                              <1> 
    34 00000828 0444415445          <1>     db 4, "DATE"
    35 0000082D FB2B                <1>     dw date - startLbl
    36                              <1> 
    37 0000082F 0454494D45          <1>     db 4, "TIME"
    38 00000834 A92D                <1>     dw time - startLbl
    39                              <1> 
    40 00000836 04434F5059          <1>     db 4, "COPY"
    41 0000083B 3F23                <1>     dw copy - startLbl
    42                              <1> 
    43 0000083D 0443545459          <1>     db 4, "CTTY"
    44 00000842 D22E                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000844 03434C53            <1>     db 3, "CLS"
    47 00000848 6D2F                <1>     dw cls - startLbl
    48                              <1> 
    49 0000084A 05425245414B        <1>     db 5, "BREAK"
    50 00000850 DF2F                <1>     dw break - startLbl
    51                              <1> 
    52 00000852 06564552494659      <1>     db 6, "VERIFY"
    53 00000859 6030                <1>     dw verify - startLbl
    54                              <1> 
    55 0000085B 0652454E414D45      <1>     db 6, "RENAME"
    56 00000862 DD30                <1>     dw rename - startLbl
    57                              <1> 
    58 00000864 0352454E            <1>     db 3, "REN"
    59 00000868 DD30                <1>     dw rename - startLbl
    60                              <1>     
    61 0000086A 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000873 DA34                <1>     dw truename - startLbl
    63                              <1> 
    64 00000875 03564552            <1>     db 3, "VER"
    65 00000879 C036                <1>     dw version - startLbl
    66                              <1> 
    67 0000087B 03564F4C            <1>     db 3, "VOL"
    68 0000087F 0136                <1>     dw volume - startLbl
    69                              <1> 
    70 00000881 034D454D            <1>     db 3, "MEM"
    71 00000885 0437                <1>     dw memory - startLbl
    72                              <1> 
    73 00000887 0445584954          <1>     db 4, "EXIT"
    74 0000088C 0139                <1>     dw exit - startLbl
    75                              <1> 
    76 0000088E 0454595045          <1>     db 4, "TYPE"
    77 00000893 4E38                <1>     dw type - startLbl
    78                              <1> 
    79 00000895 054C4142454C        <1>     db 5, "LABEL"
    80 0000089B 2B35                <1>     dw label - startLbl
    81                              <1> 
    82 0000089D 0450415448          <1>     db 4, "PATH"
    83 000008A2 583C                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 000008A4 03534554            <1>     db 3, "SET"
    86 000008A8 393B                <1>     dw set - startLbl
    87                              <1> 
    88 000008AA 0650524F4D5054      <1>     db 6, "PROMPT"
    89 000008B1 373D                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 000008B3 054D4B4C424C        <1>     db 5, "MKLBL"
    92 000008B9 5535                <1>     dw mklbl - startLbl
    93                              <1> 
    94 000008BB 05524D4C424C        <1>     db 5, "RMLBL"
    95 000008C1 9035                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 000008C3 05524E4C424C        <1>     db 5, "RNLBL"
    98 000008C9 CB35                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 000008CB 05544F554348        <1>     db 5, "TOUCH"
   101 000008D1 CD32                <1>     dw touch - startLbl
   102                              <1> 
   103 000008D3 044A4F494E          <1>     db 4, "JOIN"
   104 000008D8 3033                <1>     dw join - startLbl
   105                              <1> 
   106 000008DA 055355425354        <1>     db 5, "SUBST"
   107 000008E0 F333                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110 000008E2 044543484F          <1>     db 4, "ECHO"
   111 000008E7 A73D                <1>     dw echo - startLbl
   112 000008E9 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000008EA 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000008ED 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000008F2 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008FB 696C65206D69737369- <1>
     4 00000904 6E670D0A24          <1>
     5 00000909 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000912 6469736B2077697468- <1>
     5 0000091B 206261746368206669- <1>
     5 00000924 6C65                <1>
     6 00000926 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 0000092F 737320616E79206B65- <1>
     6 00000938 79207768656E207265- <1>
     6 00000941 6164790D0A24        <1>
     7 00000947 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 00000950 746520626174636820- <1>
     7 00000959 6A6F622028592F4E29- <1>
     7 00000962 3F2024              <1>
     8 00000965 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 0000096E 6E64206F722066696C- <1>
     8 00000977 65206E616D650D0A24  <1>
     9 00000980 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000989 2066696C65206E616D- <1>
     9 00000992 65206F7220          <1>
    10 00000997 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 000009A0 666F756E640D0A24    <1>
    11 000009A8 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 000009B1 656E74206469736B20- <1>
    11 000009BA 73706163650D0A24    <1>
    12 000009C2 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 000009CB 7669726F6E6D656E74- <1>
    12 000009D4 2073706163650D0A24  <1>
    13 000009DD 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 000009E6 74696F6E206572726F- <1>
    13 000009EF 720D0A24            <1>
    14 000009F3 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 000009FC 6F7420626520636F70- <1>
    14 00000A05 696564206F6E746F20- <1>
    14 00000A0E 697473656C660D0A24  <1>
    15 00000A17 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 00000A20 662064657374696E61- <1>
    15 00000A29 74696F6E206C6F7374- <1>
    15 00000A32 206265666F72652063- <1>
    15 00000A3B 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 00000A41 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 00000A4A 636F706965640D0A24  <1>
    18 00000A53 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 00000A5C 68206D656D6F727920- <1>
    18 00000A65 666F7220434F50590D- <1>
    18 00000A6E 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 00000A70 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 00000A79 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 00000A7A 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A83 65650D0A24          <1>
    23 00000A88 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A91 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A9A 726976652073706563- <1>
    25 00000AA3 696669636174696F6E- <1>
    25 00000AAC 0D0A24              <1>
    26 00000AAF 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000AB8 6B6579207768656E20- <1>
    26 00000AC1 7265616479202E202E- <1>
    26 00000ACA 202E2024            <1>
    27 00000ACE 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000AD7 6172616D657465720D- <1>
    27 00000AE0 0A24                <1>
    28                              <1> 
    29 00000AE2 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000AEB 576564546875467269- <1>
    29 00000AF4 536174              <1>
    30 00000AF7 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000B00 206461746524        <1>
    31 00000B06 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000B0F 6174652069732024    <1>
    32 00000B17 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000B20 657720646174652024  <1>
    33 00000B29 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000B32 293A2024            <1>
    34 00000B36 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000B3F 293A2024            <1>
    35 00000B43 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000B4C 293A2024            <1>
    36 00000B50 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000B59 2074696D6524        <1>
    37 00000B5F 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000B68 696D652069732024    <1>
    38 00000B70 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000B79 65772074696D653A20- <1>
    38 00000B82 24                  <1>
    39                              <1> 
    40 00000B83 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B8C 7572652028592F4E29- <1>
    40 00000B95 3F2024              <1>
    41                              <1> 
    42 00000B98 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000BA1 56657273696F6E2024  <1>
    43                              <1> 
    44 00000BAA 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000BB3 6E2064726976652024  <1>
    45 00000BBC 2069732024          <1> volOk   db " is $"
    46 00000BC1 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000BCA 6162656C24          <1>
    47                              <1> 
    48 00000BCF 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000BD8 69726563746F72790D- <1>
    48 00000BE1 0A24                <1>
    49 00000BE3 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000BEC 206372656174652064- <1>
    49 00000BF5 69726563746F72790D- <1>
    49 00000BFE 0A24                <1>
    50 00000C00 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000C09 6174682C206E6F7420- <1>
    50 00000C12 6469726563746F7279- <1>
    50 00000C1B 2C0D0A              <1>
    51 00000C1E 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000C27 6F7279206E6F742065- <1>
    51 00000C30 6D7074790D0A24      <1>
    52 00000C37 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000C40 79206F66202024      <1>
    53 00000C47 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000C50 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000C59 6E6965640D0A24      <1>
    55 00000C60 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000C69 72697665206973206E- <1>
    55 00000C72 6F206C6F6E67657220- <1>
    55 00000C7B 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C81 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C8A 65766963650D0A24    <1>
    58 00000C92 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C9B 20666F756E640D0A24  <1>
    59 00000CA4 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000CAD 726F720D0A24        <1>
    60 00000CB3 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000CBC 6F74206265206E6573- <1>
    60 00000CC5 7465640D0A24        <1>
    61 00000CCB 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000CD4 6174652066696C6520- <1>
    61 00000CDD 6572726F7220647572- <1>
    61 00000CE6 696E6720706970650D- <1>
    61 00000CEF 0A24                <1>
    62 00000CF1 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000CFA 2062696E6172792072- <1>
    62 00000D03 656164732066726F6D- <1>
    62 00000D0C 206120646576696365- <1>
    62 00000D15 0D0A24              <1>
    63 00000D18 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000D1E 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000D23 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000D2C 24                  <1>
    66 00000D2D 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000D36 2024                <1>
    67 00000D38 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000D41 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000D4A 617468206F72206669- <1>
    68 00000D53 6C65206E616D650D0A- <1>
    68 00000D5C 24                  <1>
    69 00000D5D 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000D66 756D626572206F6620- <1>
    69 00000D6F 706172616D65746572- <1>
    69 00000D78 730D0A24            <1>
    70 00000D7C 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D85 74696E6720746F2064- <1>
    70 00000D8E 6576696365          <1>
    71 00000D93 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D97 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    72 00000DA0 6F6F2062696720746F- <1>
    72 00000DA9 2066697420696E206D- <1>
    72 00000DB2 656D6F72790D0A24    <1>
    73                              <1> 
    74                              <1> 
    75 00000DBA 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    75 00000DC3 20202020202020546F- <1>
    75 00000DCC 74616C207379737465- <1>
    75 00000DD5 6D206D656D6F72793A- <1>
    75 00000DDE 2024                <1>
    76 00000DE0 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    76 00000DE9 20202020202020204D- <1>
    76 00000DF2 656D6F727920757365- <1>
    76 00000DFB 6420627920444F533A- <1>
    76 00000E04 2024                <1>
    77 00000E06 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    77 00000E0F 656D6F727920757365- <1>
    77 00000E18 64206279206170706C- <1>
    77 00000E21 69636174696F6E733A- <1>
    77 00000E2A 2024                <1>
    78 00000E2C 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    78 00000E35 656D6F727920726573- <1>
    78 00000E3E 657276656420627920- <1>
    78 00000E47 68617264776172653A- <1>
    78 00000E50 2024                <1>
    79 00000E52 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    79 00000E5B 202020202020202020- <1>
    79 00000E64 2020202020204D656D- <1>
    79 00000E6D 6F727920667265653A- <1>
    79 00000E76 2024                <1>
    80 00000E78 20627974657324      <1> memByte db " bytes$"
    81 00000E7F 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    81 00000E88 6F7420417373657274- <1>
    81 00000E91 61696E20444F532045- <1>
    81 00000E9A 6E74727920506F696E- <1>
    81 00000EA3 7424                <1>
    82 00000EA5 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    82 00000EAE 416C6C6F636174696F- <1>
    82 00000EB7 6E204572726F7224    <1>
    83 00000EBF 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    83 00000EC8 4572726F7224        <1>
    84 00000ECE 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    84 00000ED7 68616C74656424      <1>
    85                              <1> 
    86 00000EDE 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    86 00000EE7 206372656174652070- <1>
    86 00000EF0 6970650D0A          <1>
    87                              <1> pipeErrMsgL equ $ - pipeErrMsg
    88 00000EF5 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    88 00000EFE 6F6E206572726F720D- <1>
    88 00000F07 0A                  <1>
    89                              <1> redirErrMsgL   equ $ - redirErrMsg
    90                              <1> 
    91 00000F08 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    92 00000F0C 2020202024          <1> fourSpc  db "    $"
    93 00000F11 20202024            <1> threeSpc db "   $"
    94 00000F15 202024              <1> twoSpc   db "  $"
    95                              <1> 
    96 00000F18 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    96 00000F21 696679204F4E206F72- <1>
    96 00000F2A 204F46460D0A24      <1>
    97                              <1> 
    98 00000F31 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    99 00000F39 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   100                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   101                              <1> ; handles and reopen CON
   102 00000F42 434F4E00            <1> conName db "CON",0    
   103                              <1>   
   104                              <1> ;Int 24h strings
   105                              <1> errorMsgTable: ;Each table entry is 18 chars long
   106 00000F46 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   106 00000F4F 746563742024202020  <1>
   107 00000F58 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   107 00000F61 6E6974202420202020  <1>
   108 00000F6A 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   108 00000F73 202420202020202020  <1>
   109 00000F7C 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   109 00000F85 6F6D6D616E64202420  <1>
   110 00000F8E 446174612024202020- <1>             db "Data $            "       ;Error 4
   110 00000F97 202020202020202020  <1>
   111 00000FA0 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   111 00000FA9 737420242020202020  <1>
   112 00000FB2 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   112 00000FBB 202020202020202020  <1>
   113 00000FC4 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   113 00000FCD 656469612024202020  <1>
   114 00000FD6 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   114 00000FDF 7420466F756E642024  <1>
   115 00000FE8 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   115 00000FF1 706572202420202020  <1>
   116 00000FFA 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   116 00001003 6C7420242020202020  <1>
   117 0000100C 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   117 00001015 742024202020202020  <1>
   118 0000101E 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   118 00001027 61696C757265202420  <1>
   119                              <1> 
   120 00001030 506C6561736520496E- <1> errMsg0Fh   db "Please Insert disk "      ;Error F
   120 00001039 73657274206469736B- <1>
   120 00001042 20                  <1>
   121 00001043 202020202020202020- <1> vol0Fh      db 11 dup (" ")
   121 0000104C 2020                <1>
   122 0000104E 0D0A24              <1>             db CR,LF,"$"
   123                              <1> 
   124 00001051 64726976652024      <1> drvMsg     db "drive $"
   125 00001058 6572726F7220726561- <1> readMsg    db "error reading $"
   125 00001061 64696E672024        <1>
   126 00001067 6572726F7220777269- <1> writeMsg   db "error writing $"
   126 00001070 74696E672024        <1>
   127 00001076 41626F727424        <1> abortMsg   db "Abort$" 
   128 0000107C 49676E6F726524      <1> ignoreMsg  db "Ignore$"
   129 00001083 526574727924        <1> retryMsg   db "Retry$"
   130 00001089 4661696C24          <1> failMsg    db "Fail$"
   131 0000108E 2C2024              <1> betweenMsg db ", $"
   132 00001091 3F2024              <1> endMsg     db "? $"
   133 00001094 49524146            <1> i24Resp    db "IRAF"   ;Abort Retry Ignore Fail
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00001098 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 000010A0 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 000010A9 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 000010AF 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 000010B6 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 000010B9 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 000010BD C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 000010C0 B44A                <1>     mov ah, 4Ah ;Realloc
     9 000010C2 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 000010C5 CD21                <1>     int 21h
    11                              <1> commandMain:
    12 000010C7 488B2537EFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    13 000010CE FC                  <1>     cld ;Ensure stringops are done the right way
    14 000010CF C605E2F0FFFF80      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    15 000010D6 C6055DF1FFFF80      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    16 000010DD C605D8F1FFFF80      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    17                              <1> .inputMain:         ;Only reset once per line!
    18 000010E4 E8C42F0000          <1>     call printCRLF  ;Command complete, indicate with new line!
    19 000010E9 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    20 000010EE CD21                <1>     int 21h
    21 000010F0 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    22 000010F5 BA01000000          <1>     mov edx, 1      ;Start new print job
    23 000010FA CD21                <1>     int 21h
    24                              <1> .inputGetAgain:
    25 000010FC E81E320000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    26                              <1> .inputGetCmdlineAgain:
    27 00001101 E80E2F0000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    28 00001106 F60590EFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    29 0000110D 0F858E0A0000        <1>     jnz batNextLine
    30 00001113 488D159EF0FFFF      <1>     lea rdx, inBuffer
    31 0000111A B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    32 0000111F CD21                <1>     int 21h
    33 00001121 E8872F0000          <1>     call printCRLF  ;Note we have accepted input
    34                              <1> ;First check we had something typed in of length greater than 0
    35 00001126 803D8CF0FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    36 0000112D 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    37                              <1>     ;Copy over the input text
    38                              <1> .batProceed:            ;Jump here to copy the batch input line 
    39 0000112F 488D3582F0FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    40 00001136 488D3DFDF0FFFF      <1>     lea rdi, cpyBuffer
    41 0000113D B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    42 00001142 F3A4                <1>     rep movsb
    43 00001144 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    44                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    45 00001149 488D356EF1FFFF      <1>     lea rsi, cmdBuffer + 2
    46 00001150 E898310000          <1>     call skipDelimiters
    47 00001155 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    48 00001158 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    49 0000115A 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    50 0000115D 0F84D4030000        <1>     je hardSynErr
    51                              <1> .pipeLoop:
    52 00001163 4C8B05A5EEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    53 0000116A E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    54                              <1>     ;ZF here indicates if we are at the end of the command or nots
    55 0000116F E85B070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    56 00001174 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    57 00001179 E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    58                              <1> .okRet:                     ;Normal return point for processing
    59 0000117E E851050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    60 00001183 F60517EFFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    61 0000118A 0F8454FFFFFF        <1>     jz .inputMain
    62                              <1>     ;Now we pull the commandline forwards. 
    63 00001190 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    64 00001195 488D3D22F1FFFF      <1>     lea rdi, cmdBuffer + 2
    65 0000119C 4889F1              <1>     mov rcx, rsi
    66 0000119F 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    67 000011A2 280D15F1FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    68 000011A8 8A0D0FF1FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    69 000011AE FFC1                <1>     inc ecx     ;One more for the terminating char
    70 000011B0 F3A4                <1>     rep movsb   ;Move the chars over    
    71 000011B2 E857310000          <1>     call clearCommandState  ;Else, clear the command state and start again
    72 000011B7 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    73                              <1> 
    74                              <1> makeCmdBuffer:
    75                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    76                              <1> ; copy buffer. Called only once in a cycle.
    77                              <1> ;Throughout: CL has char count, CH has quote count
    78 000011B9 488D357CF0FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    79 000011C0 31C9                <1>     xor ecx, ecx
    80 000011C2 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    81                              <1> .countQuotes:
    82 000011C5 AC                  <1>     lodsb
    83 000011C6 3C22                <1>     cmp al, '"'
    84 000011C8 7507                <1>     jne .notQuoteToCount
    85 000011CA FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    86 000011CC E9F4FFFFFF          <1>     jmp .countQuotes
    87                              <1> .notQuoteToCount:
    88 000011D1 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    89 000011D3 75F0                <1>     jne .countQuotes
    90 000011D5 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    91 000011D8 488D3DDFF0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
    92                              <1> .getChar:
    93 000011DF AC                  <1>     lodsb           ;Get char in buffer, advance rsi
    94 000011E0 3C22                <1>     cmp al, '"'     ;Is char a quote?
    95 000011E2 750E                <1>     jne .notQuote
    96 000011E4 FECD                <1>     dec ch          ;We have a quote, now decrement
    97 000011E6 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
    98                              <1> .searchForClosingQuote:
    99                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   100 000011E8 AA                  <1>     stosb   ;Store char and inc rdi
   101 000011E9 FEC1                <1>     inc cl
   102 000011EB AC                  <1>     lodsb   ;Get next char
   103 000011EC 3C22                <1>     cmp al, '"'
   104 000011EE 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   105 000011F0 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   106                              <1> .notQuote:
   107 000011F2 E877060000          <1>     call peelRedir      ;Intervene redir if needed
   108 000011F7 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   109 000011F9 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   110 000011FB EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   111                              <1> .pipeHandle:
   112                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   113 000011FD 0F8434030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   114                              <1> .notRedir:
   115 00001203 AA                  <1>     stosb       ;Store char and advance rdi
   116 00001204 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   117 00001206 7404                <1>     je .exit
   118 00001208 FEC1                <1>     inc cl      ;Increment char count
   119 0000120A EBD3                <1>     jmp short .getChar    ;If not, get next char
   120                              <1> .exit:
   121 0000120C 880DABF0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   122                              <1>     return
    13                              <2> %%_ret:
    14 00001212 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> makeCmdString:
   125                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   126                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   127                              <1> ; Copies into the psp.
   128                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   129 00001213 488D35A4F0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   130 0000121A 31C9                <1>     xor ecx, ecx
   131 0000121C 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   132                              <1> .countQuotes:
   133 0000121F AC                  <1>     lodsb
   134 00001220 3C22                <1>     cmp al, '"'
   135 00001222 7507                <1>     jne .notQuoteToCount
   136 00001224 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   137 00001226 E9F4FFFFFF          <1>     jmp .countQuotes
   138                              <1> .notQuoteToCount:
   139 0000122B 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   140 0000122D 75F0                <1>     jne .countQuotes
   141 0000122F 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   142 00001232 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   143                              <1> .getChar:
   144 00001239 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   145 0000123A 3C22                <1>     cmp al, '"'     ;Is char a quote?
   146 0000123C 750E                <1>     jne .notQuote
   147 0000123E FECD                <1>     dec ch          ;We have a quote, now decrement
   148 00001240 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   149                              <1> .searchForClosingQuote:
   150                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   151 00001242 AA                  <1>     stosb   ;Store char and inc rdi
   152 00001243 FEC1                <1>     inc cl
   153 00001245 AC                  <1>     lodsb   ;Get next char
   154 00001246 3C22                <1>     cmp al, '"'
   155 00001248 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   156 0000124A FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   157                              <1> .notQuote:
   158 0000124C 3C7C                <1>     cmp al, "|"
   159 0000124E 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   160 00001250 B00D                <1>     mov al, CR          ;Store the pipe char
   161 00001252 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   162                              <1> .notPipe:
   163 00001255 AA                  <1>     stosb       ;Store char and advance rdi
   164 00001256 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   165 00001258 7404                <1>     je .exit
   166 0000125A FEC1                <1>     inc cl      ;Increment char count
   167 0000125C EBDB                <1>     jmp short .getChar    ;If not, get next char
   168                              <1> .exit:
   169 0000125E 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   170 00001261 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   171 00001268 803E0D              <1>     cmp byte [rsi], CR  
   172                              <1>     return
    13                              <2> %%_ret:
    14 0000126B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> analyseCmdline:
   175                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   176                              <1> ; processes the command name into the FCB.  
   177 0000126C C6051AF1FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   178                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   179 00001273 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   180 0000127A 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   181 0000127D 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   182 00001281 8A05A3EDFFFF        <1>     mov al, byte [switchChar]
   183 00001287 F2AE                <1>     repne scasb                     ;Scan for the switch char
   184 00001289 7506                <1>     jne .noSwitchFnd
   185 0000128B F61521EEFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   186                              <1> .noSwitchFnd:
   187 00001291 E857300000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   188 00001296 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   189                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001299 74(6B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   190 0000129B 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   191                              <1> .plp:
   192 0000129E 488D3DB8EEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   193 000012A5 B801290000          <1>     mov eax, 2901h
   194 000012AA CD21                <1>     int 21h
   195 000012AC 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   196 000012AE 0F8402010000        <1>     je .exitBadDrv
   197                              <1> .trailingDotLp:
   198                              <1> ;Reverse along trailing dots!
   199 000012B4 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   200 000012B8 7505                <1>     jne .noTrailingDots
   201 000012BA 48FFCE              <1>     dec rsi
   202 000012BD EBF5                <1>     jmp short .trailingDotLp
   203                              <1> .noTrailingDots:
   204 000012BF 8A0564EDFFFF        <1>     mov al, byte [pathSep]  
   205 000012C5 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   206 000012C7 7525                <1>     jne .notPs
   207 000012C9 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   208 000012CC AC                  <1>     lodsb   ;Get this char
   209 000012CD 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   210 000012D0 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   211 000012D2 7217                <1>     jb .delimfnd    ;Also a delimiter
   212 000012D4 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   213 000012D6 7413                <1>     je .delimfnd
   214 000012D8 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   215 000012DA 740F                <1>     je .delimfnd
   216 000012DC 3C2E                <1>     cmp al, byte "."
   217 000012DE 740B                <1>     je .delimfnd
   218 000012E0 3C22                <1>     cmp al, byte '"'
   219 000012E2 7407                <1>     je .delimfnd
   220 000012E4 E812300000          <1>     call isALdelimiter  ;Is this a delim char?
   221 000012E9 75B3                <1>     jne .plp            ;If not, we loop again
   222                              <1> .delimfnd:
   223 000012EB 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   224                              <1> .notPs:
   225                              <1> ;Now we have reached the end of the command, rsi points to the first char
   226                              <1> ; after the command, whether a delimiter or not.
   227 000012EE 4889F1              <1>     mov rcx, rsi
   228 000012F1 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   229 000012F4 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   230 000012F7 488D3D40F0FFFF      <1>     lea rdi, cmdPathSpec
   231 000012FE F3A4                <1>     rep movsb
   232 00001300 30C0                <1>     xor al, al
   233 00001302 AA                  <1>     stosb   ;Store a terminating null
   234 00001303 4887DE              <1>     xchg rbx, rsi
   235                              <1> ;Now we build FCBs for the arguments!
   236 00001306 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   237 0000130D E893000000          <1>     call .skipAndCheckCR
   238 00001312 745B                <1>     je .setupCmdVars
   239 00001314 C60591EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   240 0000131B 4889F0              <1>     mov rax, rsi
   241 0000131E 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   242 00001321 880586EDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   243 00001327 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   244 0000132B B801290000          <1>     mov eax, 2901h
   245 00001330 CD21                <1>     int 21h
   246 00001332 880576EDFFFF        <1>     mov byte [arg1FCBret], al
   247                              <1> .skipArg:
   248 00001338 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   249 00001339 3C0D                <1>     cmp al, CR
   250 0000133B 7432                <1>     je .setupCmdVars
   251 0000133D E8B92F0000          <1>     call isALdelimiter
   252 00001342 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   253 00001344 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   254 00001349 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   255 0000134B C6055DEDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   256 00001352 4889F0              <1>     mov rax, rsi            
   257 00001355 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   258 00001358 880552EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   259 0000135E 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   260 00001362 B801290000          <1>     mov eax, 2901h
   261 00001367 CD21                <1>     int 21h
   262 00001369 880542EDFFFF        <1>     mov byte [arg2FCBret], al
   263                              <1> .setupCmdVars:
   264                              <1> ;Before returning, we copy the command name to cmdName 
   265 0000136F 488D3DC8EFFFFF      <1>     lea rdi, cmdPathSpec
   266 00001376 E829300000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   267 0000137B E8482F0000          <1>     call strlen ;Get the length of the final path componant
   268 00001380 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   269 00001386 7726                <1>     ja .exitBad     ;Return error
   270 00001388 4889FE              <1>     mov rsi, rdi
   271 0000138B 488D3DFBEFFFFF      <1>     lea rdi, cmdName
   272 00001392 FFC9                <1>     dec ecx ;Minus the terminating null
   273 00001394 880F                <1>     mov byte [rdi], cl ;Store the length here
   274 00001396 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   275                              <1> .cpCmdName:
   276 00001399 AC                  <1>     lodsb
   277 0000139A E8332F0000          <1>     call ucChar ;Uppercase the char
   278 0000139F AA                  <1>     stosb
   279 000013A0 FFC9                <1>     dec ecx
   280 000013A2 75F5                <1>     jnz .cpCmdName
   281                              <1>     return
    13                              <2> %%_ret:
    14 000013A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> .skipAndCheckCR:
   283                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   284 000013A5 E8432F0000          <1>     call skipDelimiters ;Go to the next char in the input line
   285 000013AA 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   286                              <1>     return
    13                              <2> %%_ret:
    14 000013AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   287                              <1> .exitBad:
   288 000013AE C605D8EFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   289                              <1>     return
    13                              <2> %%_ret:
    14 000013B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> .exitBadDrv:
   291 000013B6 C605D0EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   292 000013BD E83D090000          <1>     call badDriveError
   293                              <1>     return
    13                              <2> %%_ret:
    14 000013C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> doCommandLine:
   296                              <1>     ;The following check accounts for the end of a piped command
   297 000013C3 803DC3EFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   298 000013CA 0F8467010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   299 000013D0 803DB6EFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   300 000013D7 0F845B090000        <1>     je badCmdError
   301 000013DD 803DA9EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   302                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013E4 74(C2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   303 000013E6 488D3551EFFFFF      <1>     lea rsi, cmdPathSpec
   304 000013ED 0FB71D4AEFFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   305 000013F4 80FF3A              <1>     cmp bh, ":"
   306 000013F7 7520                <1>     jne .noDriveSpecified
   307 000013F9 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   308 000013FB E8D22E0000          <1>     call ucChar     ;Uppercase al
   309 00001400 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   310                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   311 00001402 803D84EFFFFF02      <1>     cmp byte [cmdName], 2
   312 00001409 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   313 0000140B 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   314 0000140D E88C2E0000          <1>     call setDrive
   315                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001412 74(C2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   316 00001414 E9E6080000          <1>     jmp badDriveError
   317                              <1> .noDriveSpecified:
   318                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   319 00001419 488D1D9CEEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   320 00001420 488D3566EFFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   321 00001427 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   322 0000142C BAFFFF0000          <1>     mov edx, 0FFFFh
   323 00001431 B5FF                <1>     mov ch, -1
   324 00001433 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   325 00001435 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   326 0000143A BAFFFF0000          <1>     mov edx, 0FFFFh
   327 0000143F 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   328 00001441 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   329                              <1>             ;        al = 0  if the command should be executed as usual
   330 00001443 84C0                <1>     test al, al
   331 00001445 7444                <1>     jz .executeInternal
   332                              <1>     ;Here we execute externally and return to the prompt
   333                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   334 00001447 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   335 0000144E 488D3538EFFFFF      <1>     lea rsi, cmdName        
   336 00001455 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   337 0000145A BAFFFF0000          <1>     mov edx, 0FFFFh
   338 0000145F B5FF                <1>     mov ch, -1
   339 00001461 CD2F                <1>     int 2Fh
   340 00001463 803D23EFFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   341                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000146A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000146C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   343                              <1>     ; is an external command that is in the CD or in the PATH.
   344                              <1>     ;Should not be used for this purpose but it is here...
   345 0000146D E8C6050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   346 00001472 488D3514EFFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   347 00001479 AC                  <1>     lodsb                   ;Get the name length
   348 0000147A 0FB6C8              <1>     movzx ecx, al
   349 0000147D 488D3DBAEEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   350 00001484 F3A4                <1>     rep movsb   
   351 00001486 31C0                <1>     xor eax, eax
   352 00001488 AA                  <1>     stosb   ;Store null terminator
   353 00001489 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   354                              <1> .executeInternal:
   355 0000148B E8A8050000          <1>     call pullCommandline    ;Now pull the tail down
   356 00001490 488D3DA7EEFFFF      <1>     lea rdi, cmdPathSpec
   357 00001497 E82C2E0000          <1>     call strlen ;Get the length of the input command
   358 0000149C FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   359 0000149E 380DE9EEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   360 000014A4 0F858D240000        <1>     jne launchChild     ;If not, a path was specified, exit!
   361                              <1> .executeInternal2:
   362                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   363 000014AA 488D1D3CF3FFFF      <1>     lea rbx, functionTable
   364                              <1> .nextEntry:
   365 000014B1 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   366 000014B4 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   367 000014B7 0F847A240000        <1>     je launchChild      ;If so, check externally now
   368 000014BD 380DCAEEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   369 000014C3 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   370                              <1>     ;Here they have the same length so lets see if the name is the same
   371 000014C5 56                  <1>     push rsi
   372                              <1>     ;ecx has the length to compare
   373 000014C6 51                  <1>     push rcx
   374 000014C7 488D7301            <1>     lea rsi, qword [rbx + 1]
   375 000014CB 488D3DBCEEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   376 000014D2 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   377 000014D4 59                  <1>     pop rcx
   378 000014D5 5E                  <1>     pop rsi
   379 000014D6 751E                <1>     jne .gotoNextEntry
   380                              <1>     ;Here it was found both strings are equal
   381 000014D8 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   382 000014DD 480FB71F            <1>     movzx rbx, word [rdi]
   383 000014E1 488D3D18EBFFFF      <1>     lea rdi, startLbl
   384 000014E8 4801FB              <1>     add rbx, rdi
   385 000014EB C6051BEBFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   386 000014F2 FFD3                <1>     call rbx        ;Call the internal function!
   387 000014F4 EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   388                              <1> .gotoNextEntry:
   389 000014F6 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   390 000014FD 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   391 00001500 EBAF                <1>     jmp short .nextEntry
   392                              <1> 
   393                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   394                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   395                              <1> ;Can depend on RSP here because I fixed DOS.
   396 00001502 488B25FCEAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   397 00001509 E885300000          <1>     call resetIDTentries
   398 0000150E B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   399 00001513 CD21                <1>     int 21h
   400 00001515 668905F1EAFFFF      <1>     mov word [returnCode], ax
   401 0000151C 84E4                <1>     test ah, ah     ;Regular exit
   402 0000151E 0F845AFCFFFF        <1>     jz commandMain.okRet
   403 00001524 80FC03              <1>     cmp ah, 3       ;TSR exit
   404 00001527 0F8451FCFFFF        <1>     je commandMain.okRet
   405                              <1>     ;Here we ask if we want to stop any batch processing, ret to 2Eh etc.
   406                              <1>     ;For now, just clean redirs and fully reset!
   407 0000152D E83F000000          <1>     call cleanupRedirs
   408 00001532 E990FBFFFF          <1>     jmp commandMain
   409                              <1>     ;cmp ah, 1       ;Was this Ctrl^C?
   410                              <1>     ;je commandMain
   411                              <1>     ;jmp commandMain  ;If we aborted, fully reset!
   412                              <1> 
   413                              <1> hardSynErr:
   414                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   415 00001537 E89F070000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   416 0000153C E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   417                              <1> redirFailure:
   418 00001541 488D15ADF9FFFF      <1>     lea rdx, redirErrMsg
   419 00001548 B913000000          <1>     mov ecx, redirErrMsgL
   420 0000154D EB0C                <1>     jmp short redirPipeFailureCommon
   421                              <1> pipeFailure:
   422 0000154F 488D1588F9FFFF      <1>     lea rdx, pipeErrMsg
   423 00001556 B917000000          <1>     mov ecx, pipeErrMsgL
   424                              <1> redirPipeFailureCommon:
   425                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   426                              <1> ;This routine tries to close whatever handles are not -1 and delete
   427                              <1> ; pipe files if the pipe count is not 0.
   428                              <1> ;It resets all variables and jumps to reset the stack!
   429 0000155B B800400000          <1>     mov eax, 4000h  ;Write handle
   430 00001560 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   431 00001565 CD21                <1>     int 21h
   432                              <1> .noPrint:
   433 00001567 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   434 0000156C E956FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   435                              <1> 
   436                              <1> cleanupRedirs:
   437                              <1> ;Cleans all active redirections, returning to the saved state.
   438                              <1> ;Deletes any pipe files, leaves any redir out files.
   439                              <1> ;Resets the internal vars
   440 00001571 0FB70530EBFFFF      <1>     movzx eax, word [redirSTDIN]
   441 00001578 0FB71523EBFFFF      <1>     movzx edx, word [pipeSTDIN]
   442 0000157F 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   443 00001581 E8CC000000          <1>     call .closeAndReplace
   444 00001586 0FB7051DEBFFFF      <1>     movzx eax, word [redirSTDOUT]
   445 0000158D 0FB71510EBFFFF      <1>     movzx edx, word [pipeSTDOUT]
   446 00001594 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   447 00001596 E8B7000000          <1>     call .closeAndReplace
   448 0000159B 66C70502EBFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   449 000015A4 0FB71DFDEAFFFF      <1>     movzx ebx, word [redirSTDIN]
   450 000015AB E892000000          <1>     call .closeHandle
   451                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   452 000015B0 66C705EFEAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   453 000015B9 0FB71DEAEAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   454 000015C0 E87D000000          <1>     call .closeHandle
   455 000015C5 66C705DCEAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   456 000015CE 0FB71DCDEAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   457 000015D5 E868000000          <1>     call .closeHandle
   458 000015DA 66C705BFEAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   459 000015E3 0FB71DBAEAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   460 000015EA E853000000          <1>     call .closeHandle
   461 000015EF 66C705ACEAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   462 000015F8 C605A2EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   463 000015FF 488D1533EEFFFF      <1>     lea rdx, qword [pipe1Filespec]
   464 00001606 803A00              <1>     cmp byte [rdx], 0
   465 00001609 7407                <1>     jz .checkOld
   466 0000160B B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   467 00001610 CD21                <1>     int 21h
   468                              <1> .checkOld:
   469 00001612 488D156FEEFFFF      <1>     lea rdx, qword [pipe2Filespec]
   470 00001619 803A00              <1>     cmp byte [rdx],0
   471 0000161C 7407                <1>     jz .pipeNamesComplete
   472 0000161E B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   473 00001623 CD21                <1>     int 21h
   474                              <1> .pipeNamesComplete:
   475 00001625 31C0                <1>     xor eax, eax
   476                              <1>     ;Invalidate the pointers and the paths too
   477 00001627 488905A9EEFFFF      <1>     mov qword [newPipe], rax
   478 0000162E 488905AAEEFFFF      <1>     mov qword [oldPipe], rax
   479 00001635 8905FEEDFFFF        <1>     mov dword [pipe1Filespec], eax
   480 0000163B 890547EEFFFF        <1>     mov dword [pipe2Filespec], eax
   481                              <1>     return
    13                              <2> %%_ret:
    14 00001641 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> .closeHandle:
   484 00001642 81FBFFFFFFFF        <1>     cmp ebx, -1
   485                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001648 74(41)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   486 0000164A B8003E0000          <1>     mov eax, 3E00h
   487 0000164F CD21                <1>     int 21h
   488                              <1>     return
    13                              <2> %%_ret:
    14 00001651 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> .closeAndReplace:
   490                              <1> ;Input: ax = one possible handle, dx = second possible handle
   491                              <1> ;       bx = handle to close and copy ax/dx into
   492                              <1> ;Output: Handle intervened on. bx preserved
   493 00001652 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   494 00001655 09D0                <1>     or eax, edx     ;Form packed
   495 00001657 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   496                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000165C 74(51)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   497 0000165E E8DFFFFFFF          <1>     call .closeHandle
   498 00001663 663DFFFF            <1>     cmp ax, -1      
   499 00001667 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   500 0000166B 53                  <1>     push rbx
   501 0000166C 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   502 0000166F B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   503 00001674 CD21                <1>     int 21h
   504 00001676 5B                  <1>     pop rbx
   505                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001677 73(51)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   506                              <1>     ;Else we now try to force con to open!
   507 00001679 E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   508 0000167E B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   509 00001683 488D15B8F8FFFF      <1>     lea rdx, conName
   510 0000168A CD21                <1>     int 21h
   511                              <1>     return
    13                              <2> %%_ret:
    14 0000168C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> cleanRedirOut:
   514                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   515                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   516                              <1> ; particular cases like launching bat files which needs special handling in 
   517                              <1> ; that all redirs need to be completely removed.
   518 0000168D 66813D14EAFFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   519                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001696 74(8C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   520 00001698 0FB71D0BEAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   521 0000169F B901000000          <1>     mov ecx, 1      ;STDOUT
   522 000016A4 B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   523 000016A9 CD21                <1>     int 21h
   524 000016AB 0FB71DF8E9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   525 000016B2 B8003E0000          <1>     mov eax, 3E00h  
   526 000016B7 CD21                <1>     int 21h
   527 000016B9 66C705E8E9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   528 000016C2 488D1521EDFFFF      <1>     lea rdx, rdrOutFilespec
   529 000016C9 B800410000          <1>     mov eax, 4100h      ;Del stdout file
   530 000016CE CD21                <1>     int 21h
   531 000016D0 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   532                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   533                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   534                              <1>     return
    13                              <2> %%_ret:
    14 000016D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> advanceRedir:
   537                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   538                              <1> ;Close stdin redir then stdout redir. 
   539 000016D4 F605CBE9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   540 000016DB 0F8585000000        <1>     jnz .redirIn
   541 000016E1 F605B9E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   542 000016E8 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   543 000016EE 0FBF05ADE9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   544 000016F5 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   545 000016FA 0F84EB000000        <1>     je .pipeOut              
   546                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   547 00001700 0FB71D9BE9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   548 00001707 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   549 00001709 B800460000          <1>     mov eax, 4600h
   550 0000170E CD21                <1>     int 21h
   551 00001710 0F8239FEFFFF        <1>     jc pipeFailure
   552 00001716 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   553 0000171B CD21                <1>     int 21h
   554 0000171D 0F822CFEFFFF        <1>     jc pipeFailure
   555 00001723 488B15B5EDFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   556 0000172A B800410000          <1>     mov eax, 4100h  ;Delete the file!
   557 0000172F CD21                <1>     int 21h
   558 00001731 0F8218FEFFFF        <1>     jc pipeFailure
   559 00001737 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   560 0000173A 66C7055FE9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   561                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   562                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   563                              <1>     ;Else exit!
   564 00001743 0FBF055AE9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   565 0000174A 3DFFFFFFFF          <1>     cmp eax, -1
   566 0000174F 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   567 00001755 C60545E9FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   568 0000175C F60544E9FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   569 00001763 753D                <1>     jnz .redirOut               ;Go for it if so!
   570                              <1>     return
    13                              <2> %%_ret:
    14 00001765 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> .redirIn:
   572                              <1> ;Here we clean redirIn
   573 00001766 0FB71D3BE9FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   574 0000176D 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   575 0000176F B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   576 00001774 CD21                <1>     int 21h
   577 00001776 0F82C5FDFFFF        <1>     jc redirFailure
   578 0000177C B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   579 00001781 CD21                <1>     int 21h
   580 00001783 0F82B8FDFFFF        <1>     jc redirFailure
   581 00001789 66C70516E9FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   582 00001792 C6050DE9FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   583 00001799 F60501E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   584 000017A0 7549                <1>     jnz .pipeOut
   585                              <1> .redirOut:
   586 000017A2 F605FEE8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   587                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017A9 74(65)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   588                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   589 000017AB F605EFE8FFFFFF      <1>     test byte [pipeFlag], -1
   590 000017B2 7537                <1>     jnz short .pipeOut
   591 000017B4 0FB71DEFE8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   592 000017BB B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   593 000017C0 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   594 000017C5 CD21                <1>     int 21h
   595 000017C7 0F8274FDFFFF        <1>     jc redirFailure
   596 000017CD B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   597 000017D2 CD21                <1>     int 21h
   598 000017D4 0F8267FDFFFF        <1>     jc redirFailure
   599 000017DA 66C705C7E8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   600 000017E3 C605BDE8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   601                              <1>     return
    13                              <2> %%_ret:
    14 000017EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   602                              <1> .pipeOut:
   603                              <1> ;Duplicate STDIN to save across pipe
   604 000017EB 0FBF05B2E8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   605 000017F2 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   606                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017F7 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   607 000017F9 B800450000          <1>     mov eax, 4500h
   608 000017FE 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   609 00001800 CD21                <1>     int 21h
   610 00001802 0F8247FDFFFF        <1>     jc pipeFailure
   611 00001808 66890593E8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   612                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   613 0000180F B800460000          <1>     mov eax, 4600h
   614 00001814 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   615 00001816 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   616 00001818 CD21                <1>     int 21h
   617 0000181A 0F822FFDFFFF        <1>     jc pipeFailure
   618                              <1> ;Now return the original stdout to stdout
   619 00001820 89D9                <1>     mov ecx, ebx
   620 00001822 0FB71D7BE8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   621 00001829 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   622 0000182E CD21                <1>     int 21h
   623 00001830 0F8219FDFFFF        <1>     jc pipeFailure
   624                              <1> ;Now close the DUP'ed STDOUT
   625 00001836 B8003E0000          <1>     mov eax, 3E00h
   626 0000183B CD21                <1>     int 21h
   627 0000183D 0F820CFDFFFF        <1>     jc pipeFailure
   628                              <1> ;Finally unwind STDIN to the beginning of the file
   629 00001843 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   630 00001848 31DB                <1>     xor ebx, ebx    ;STDIN handle
   631 0000184A 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   632 0000184C 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   633 0000184E CD21                <1>     int 21h
   634 00001850 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   635 00001856 488B157AECFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   636 0000185D 4889157BECFFFF      <1>     mov qword [oldPipe], rdx
   637 00001864 66C70537E8FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   638                              <1>     return
    13                              <2> %%_ret:
    14 0000186D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   639                              <1> 
   640                              <1> 
   641                              <1> peelRedir:
   642                              <1> ;Checks and sets up redir as appropriate
   643                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   644                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   645                              <1> ;Output: ZF=NZ => No redir
   646                              <1> ;        ZF=ZY => Redir
   647                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   648                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   649 0000186E 51                  <1>     push rcx
   650 0000186F 57                  <1>     push rdi
   651 00001870 3C3C                <1>     cmp al, "<"
   652 00001872 740C                <1>     je .inputRedir
   653 00001874 3C3E                <1>     cmp al, ">"
   654 00001876 7427                <1>     je .outputRedir
   655 00001878 3C7C                <1>     cmp al, "|"
   656 0000187A 7441                <1>     je .pipeSetup
   657 0000187C F8                  <1>     clc
   658                              <1> .redirExit:
   659 0000187D 5F                  <1>     pop rdi
   660 0000187E 59                  <1>     pop rcx
   661                              <1>     return
    13                              <2> %%_ret:
    14 0000187F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   662                              <1> .inputRedir:
   663 00001880 C6051FE8FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   664 00001887 488D3D0DEBFFFF      <1>     lea rdi, rdrInFilespec
   665                              <1> .redirCommon:
   666 0000188E E85A2A0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   667 00001893 E8862B0000          <1>     call cpDelimPathToBufz
   668 00001898 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   669 0000189B 30C0                <1>     xor al, al  ;Clear the ZF flag
   670 0000189D EBDE                <1>     jmp short .redirExit
   671                              <1> .outputRedir:
   672 0000189F C60501E8FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   673 000018A6 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   674 000018A9 7509                <1>     jne .notDouble
   675 000018AB FE05F6E7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   676 000018B1 48FFC6              <1>     inc rsi ;Go past it too
   677                              <1> .notDouble:
   678 000018B4 488D3D2FEBFFFF      <1>     lea rdi, rdrOutFilespec
   679 000018BB EBD1                <1>     jmp short .redirCommon
   680                              <1> .pipeSetup:
   681 000018BD 56                  <1>     push rsi    ;Save rsi pointing to char past |
   682 000018BE E82A2A0000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   683 000018C3 803E7C              <1>     cmp byte [rsi], "|" 
   684 000018C6 7403                <1>     je .badFnd
   685 000018C8 803E0D              <1>     cmp byte [rsi], CR
   686                              <1> .badFnd:
   687 000018CB 5E                  <1>     pop rsi
   688 000018CC F9                  <1>     stc
   689 000018CD EBAE                <1>     jmp short .redirExit
   690                              <1> 
   691                              <1> setupRedirandPipes:
   692                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   693                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   694 000018CF 0F8484000000        <1>     jz .redirIn
   695 000018D5 488D155DEBFFFF      <1>     lea rdx, pipe1Filespec
   696 000018DC 803A00              <1>     cmp byte [rdx], 0
   697 000018DF 7410                <1>     jz .pathFound
   698 000018E1 488D15A0EBFFFF      <1>     lea rdx, pipe2Filespec
   699 000018E8 803A00              <1>     cmp byte [rdx], 0
   700 000018EB 0F855EFCFFFF        <1>     jnz pipeFailure
   701                              <1> .pathFound:
   702 000018F1 488915DFEBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   703 000018F8 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   704 000018FD BB01000000          <1>     mov ebx, 1
   705 00001902 CD21                <1>     int 21h
   706 00001904 0F8245FCFFFF        <1>     jc pipeFailure
   707 0000190A 66890593E7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   708 00001911 E894290000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   709 00001916 0441                <1>     add al, "A"
   710 00001918 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   711 0000191D 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   712 0000191F 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   713 00001921 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   714 00001923 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   715 00001928 CD21                <1>     int 21h
   716 0000192A 0F821FFCFFFF        <1>     jc pipeFailure
   717                              <1>     ;AX has the handle for this file now, this will become STDOUT
   718                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   719 00001930 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   720 00001933 B901000000          <1>     mov ecx, 1
   721 00001938 B800460000          <1>     mov eax, 4600h
   722 0000193D CD21                <1>     int 21h
   723 0000193F 0F820AFCFFFF        <1>     jc pipeFailure
   724 00001945 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   725 0000194A CD21                <1>     int 21h
   726 0000194C 0F82FDFBFFFF        <1>     jc pipeFailure
   727 00001952 C60548E7FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   728                              <1> .redirIn:
   729                              <1> ;Now check if any other redir needs to be setup
   730                              <1> ;Checks and sets up redir as appropriate.
   731                              <1>     ;Setup the redir here for STDIN
   732 00001959 F60546E7FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   733 00001960 7449                <1>     jz .redirOut
   734 00001962 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   735 00001964 B800450000          <1>     mov eax, 4500h
   736 00001969 CD21                <1>     int 21h
   737 0000196B 0F82D0FBFFFF        <1>     jc redirFailure
   738 00001971 66890530E7FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   739 00001978 488D151CEAFFFF      <1>     lea rdx, rdrInFilespec
   740 0000197F B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   741 00001984 CD21                <1>     int 21h
   742 00001986 0F82B5FBFFFF        <1>     jc redirFailure
   743 0000198C 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   744 0000198E 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   745 00001991 B800460000          <1>     mov eax, 4600h
   746 00001996 CD21                <1>     int 21h
   747 00001998 0F82A3FBFFFF        <1>     jc redirFailure
   748 0000199E B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   749 000019A3 CD21                <1>     int 21h
   750 000019A5 0F8296FBFFFF        <1>     jc redirFailure
   751                              <1> .redirOut:
   752 000019AB F605F5E6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   753                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000019B2 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000019B4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   754 000019B5 803DE8E6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   755                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019BC 75(B4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   756                              <1>     ;Else setup the redir here for STDOUT
   757 000019BE BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   758 000019C3 B800450000          <1>     mov eax, 4500h
   759 000019C8 CD21                <1>     int 21h
   760 000019CA 0F8271FBFFFF        <1>     jc redirFailure
   761 000019D0 668905D3E6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   762 000019D7 488D150CEAFFFF      <1>     lea rdx, rdrOutFilespec
   763 000019DE B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   764 000019E3 CD21                <1>     int 21h
   765 000019E5 730F                <1>     jnc .fileExists
   766 000019E7 B8003C0000          <1>     mov eax, 3C00h
   767 000019EC 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   768 000019EE CD21                <1>     int 21h
   769 000019F0 0F824BFBFFFF        <1>     jc redirFailure
   770                              <1> .fileExists:
   771 000019F6 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   772 000019FB 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   773 000019FE B800460000          <1>     mov eax, 4600h  ;DUP2
   774 00001A03 CD21                <1>     int 21h
   775 00001A05 0F8236FBFFFF        <1>     jc redirFailure
   776 00001A0B B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   777 00001A10 CD21                <1>     int 21h
   778 00001A12 0F8229FBFFFF        <1>     jc redirFailure
   779 00001A18 803D88E6FFFF01      <1>     cmp byte [redirOut], 1
   780                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A1F 74(B4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   781                              <1>     ;Here we move the file pointer to the end of the file
   782 00001A21 31D2                <1>     xor edx, edx    ;Low order 32 bits
   783 00001A23 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   784 00001A25 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   785 00001A2A B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   786 00001A2F CD21                <1>     int 21h
   787 00001A31 0F820AFBFFFF        <1>     jc redirFailure
   788                              <1>     return
    13                              <2> %%_ret:
    14 00001A37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> 
   791                              <1> pullCommandline:
   792                              <1> ;This command pulls the command tail down, removing the whole launch command
   793 00001A38 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   794                              <1> ;Skip leading separators
   795                              <1> .pctSkipLeading:
   796 00001A3F AC                  <1>     lodsb   ;Get first char
   797 00001A40 E8B6280000          <1>     call isALdelimiter
   798 00001A45 74F8                <1>     je .pctSkipLeading
   799 00001A47 48FFCE              <1>     dec rsi
   800                              <1>     ;rsi points to the start of the command
   801 00001A4A 488D3DEDE8FFFF      <1>     lea rdi, cmdPathSpec
   802 00001A51 E872280000          <1>     call strlen ;Get the length of the command
   803 00001A56 FFC9                <1>     dec ecx ;Minus the terminating null
   804 00001A58 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   805 00001A5B 280D4CE6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   806 00001A61 280D49E6FFFF        <1>     sub byte [arg2Off], cl
   807 00001A67 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   808 00001A69 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   809                              <1> .pctPullChars:
   810 00001A70 AC                  <1>     lodsb
   811 00001A71 AA                  <1>     stosb
   812 00001A72 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   813 00001A74 7404                <1>     je .pctExit
   814 00001A76 FFC1                <1>     inc ecx     ;Increment count
   815 00001A78 EBF6                <1>     jmp short .pctPullChars 
   816                              <1> .pctExit:
   817 00001A7A 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   818                              <1>     return
    13                              <2> %%_ret:
    14 00001A81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   819                              <1> 
   820                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   821                              <1> ;Input: rsi points to the count byte of a command line
   822 00001A82 4150                <1>     push r8
   823 00001A84 4151                <1>     push r9
   824 00001A86 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   825 00001A88 CD21                <1>     int 21h
   826 00001A8A 52                  <1>     push rdx    ;Save on the stack
   827 00001A8B 488D1D6EE4FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   828 00001A92 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   829 00001A94 CD21                <1>     int 21h
   830 00001A96 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   831 00001A99 4989D9              <1>     mov r9, rbx
   832 00001A9C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   833 00001AA3 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   834 00001AA8 F348A5              <1>     rep movsq   ;Copy command line over
   835                              <1>     ;call doCommandLine
   836 00001AAB 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   837 00001AAC B450                <1>     mov ah, 50h ;Set Current PSP
   838 00001AAE CD21                <1>     int 21h
   839 00001AB0 4159                <1>     pop r9
   840 00001AB2 4158                <1>     pop r8
   841 00001AB4 48CF                <1>     iretq
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file!
     5 00001AB6 BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     6 00001ABB B800480000          <1>     mov eax, 4800h
     7 00001AC0 CD21                <1>     int 21h
     8 00001AC2 730A                <1>     jnc .bbAlloced
     9 00001AC4 E809020000          <1>     call badNoMemError  ;Print not enough mem error
    10 00001AC9 E999FAFFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    11                              <1> .bbAlloced:
    12 00001ACE 488905DEE5FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    13 00001AD5 4889C3              <1>     mov rbx, rax
    14 00001AD8 4889DF              <1>     mov rdi, rbx
    15 00001ADB B9B2000000          <1>     mov ecx, bbMaxAlloc     
    16 00001AE0 F3AA                <1>     rep stosb               ;Clean the arena
    17 00001AE2 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    18 00001AE5 8A05B3E5FFFF        <1>     mov al, byte [echoFlg]
    19 00001AEB 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    20 00001AEE 48C7431300000000    <1>     mov qword [rbx + batBlockHdr.dBatOffLo], 0 ;Write a qword of 0 for zoom
    21 00001AF6 B8FFFFFFFF          <1>     mov eax, -1
    22 00001AFB B905000000          <1>     mov ecx, 5
    23 00001B00 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    24 00001B04 F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    25 00001B06 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    26 00001B0C 488D352BE8FFFF      <1>     lea rsi, cmdPathSpec
    27 00001B13 E897270000          <1>     call strcpy     ;Leave rdi past the terminating null
    28 00001B18 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    29 00001B20 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    30 00001B27 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    31 00001B28 F3A4                <1>     rep movsb   ;Copy the command tail over
    32                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    33                              <1>     ; terminating null. All good!
    34 00001B2A 5E                  <1>     pop rsi 
    35                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    36 00001B2B B901000000          <1>     mov ecx, 1  ;Start with argument 1
    37                              <1> .bbFndLp:
    38 00001B30 E8B8270000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    39 00001B35 E853000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    40 00001B3A 7428                <1>     je .bbArgsDone      ;Yes
    41                              <1>     ;Add the entry to the table!
    42 00001B3C 4889F0              <1>     mov rax, rsi
    43 00001B3F 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    44 00001B43 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    45 00001B46 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    46                              <1>     
    47 00001B4B FFC1                <1>     inc ecx
    48 00001B4D 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    49 00001B53 740F                <1>     je .bbArgsDone
    50                              <1> .bbFndLp2:
    51 00001B55 AC                  <1>     lodsb   ;Getch
    52 00001B56 E8A0270000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    53 00001B5B 74D3                <1>     je .bbFndLp
    54 00001B5D E82B000000          <1>     call .bbCheckEndOfCmdLine
    55 00001B62 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    56                              <1> .bbArgsDone:
    57                              <1>     ;Now copy the batch name
    58 00001B64 488D35D3E7FFFF      <1>     lea rsi, cmdPathSpec
    59 00001B6B 488D3D49E5FFFF      <1>     lea rdi, batFile
    60 00001B72 E838270000          <1>     call strcpy             ;Copy the batch file name over
    61                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
    62                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
    63                              <1> ; for SHARING trouble...
    64 00001B77 E811FBFFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
    65 00001B7C E8F0F9FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
    66 00001B81 800D15E5FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
    67 00001B88 E93AF5FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
    68                              <1> 
    69                              <1> .bbCheckEndOfCmdLine:
    70                              <1> ;Input: rsi -> Char to check 
    71                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
    72 00001B8D 803E00              <1>     cmp byte [rsi], 0
    73                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001B90 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001B92 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    74 00001B93 803E0D              <1>     cmp byte [rsi], CR
    75                              <1>     return
    13                              <2> %%_ret:
    14 00001B96 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> batFinish:
    78                              <1> ;This is the procedure called after we've processed the last batch line
    79 00001B97 E8DB000000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
    80 00001B9C E926F5FFFF          <1>     jmp commandMain     ;And start again :)
    81                              <1> batNextLine:
    82                              <1> ;This will:
    83                              <1> ;1) Open the batch file. If we are at the end of the file, exit batch mode!
    84                              <1> ;2) Read a line from the batch file one char at a time. File is open/closed
    85                              <1> ;       after each char. If file not found during read, print needBat error.
    86                              <1> ;       If file not found before read, print badBat error.
    87                              <1> ;       Do any %ENVVAR% or %ARGUMENT replacements
    88                              <1> ;       MAX LEN OF BATCH FILE LINE: 127 + CR or 128 chars raw
    89                              <1> ;3) Close the batch file
    90                              <1> ;4) Check if we are at the end of the file. If so, turn off bat flag.
    91                              <1> ;    lea rdx, .l1
    92                              <1> ;    mov eax, 0900h
    93                              <1> ;    int 21h
    94                              <1> ;    call batCleanup
    95                              <1> ;    jmp commandMain
    96                              <1> ;.l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
    97 00001BA1 F605F5E4FFFF10      <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
    98 00001BA8 75ED                <1>     jnz batFinish
    99 00001BAA 488D150AE5FFFF      <1>     lea rdx, batFile
   100 00001BB1 B8003D0000          <1>     mov eax, 3D00h  ;Open exclusively
   101 00001BB6 CD21                <1>     int 21h
   102 00001BB8 7300                <1>     jnc .batOpened
   103                              <1>     ;!!! BAT FILE OPEN ERROR HANDLING HERE !!!
   104                              <1> .batOpened:
   105 00001BBA 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   106 00001BBC 488B35F0E4FFFF      <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   107 00001BC3 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   108 00001BC6 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   109 00001BC9 B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   110 00001BCE CD21                <1>     int 21h
   111 00001BD0 C605E2E5FFFF00      <1>     mov byte [inBuffer + 1], 0  ;Reset the buffer count
   112 00001BD7 488D15DCE5FFFF      <1>     lea rdx, inBuffer + 2   ;Start read pos
   113 00001BDE 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   114                              <1> .readlp:
   115 00001BE0 E878000000          <1>     call .readChar          ;Read the char
   116 00001BE5 85C0                <1>     test eax, eax
   117 00001BE7 7420                <1>     jz .endOfBat
   118 00001BE9 FFC7                <1>     inc edi                 ;We read a char, woohoo!
   119 00001BEB 803A1A              <1>     cmp byte [rdx], EOF     ;Did we read a ^Z char?
   120 00001BEE 7419                <1>     je .endOfBat
   121 00001BF0 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   122 00001BF3 741F                <1>     je .endOfLineCr
   123 00001BF5 FE05BEE5FFFF        <1>     inc byte [inBuffer + 1] ;Inc our char count
   124 00001BFB 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   125 00001BFE 803DB4E5FFFF80      <1>     cmp byte [inBuffer + 1], 128    ;Are we 128 chars w/o CR?
   126 00001C05 75D9                <1>     jne .readlp             ;Get next char if not
   127 00001C07 EB16                <1>     jmp short .endOfLine    ;The user typed too many chars on a line, EOL
   128                              <1> .endOfBat:
   129 00001C09 803DA9E5FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;If we formally read 0 chars, exit immediately
   130 00001C10 7485                <1>     je batFinish
   131 00001C12 EB0B                <1>     jmp short .endOfLine
   132                              <1> .endOfLineCr:   ;Now get the next char, to eliminate the LF too.
   133                              <1> ;Properly, I should check if this is LF or not. If not an LF, we move the 
   134                              <1> ; file pointer back a char. 
   135                              <1>     breakpoint
    81 00001C14 6687DB              <2> xchg bx, bx
   136 00001C17 E841000000          <1>     call .readChar  ;Get the LF over the CR
   137 00001C1C C6020D              <1>     mov byte [rdx], CR  ;Place the CR back 
   138                              <1> .endOfLine:
   139                              <1> ;Close the file, update the batch block file pointer, then proceed.
   140                              <1> ;rsi -> Batch block.
   141 00001C1F B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   142 00001C24 CD21                <1>     int 21h         ;We ignore errors here... dont hurt me SHARE pls
   143                              <1>     ;Imagine someone gives us a 2+Gb Batch file... some server magik
   144 00001C26 017E13              <1>     add dword [rsi + batBlockHdr.dBatOffLo], edi    ;Add lo dword to chars 
   145 00001C29 81561700000000      <1>     adc dword [rsi + batBlockHdr.dBatOffHi], 0      ;Add CF if needed!
   146                              <1> ;Now we echo the line to the console unless the first char is @ or 
   147                              <1> ; the echo flag is off
   148 00001C30 488D1583E5FFFF      <1>     lea rdx, inBuffer + 2
   149 00001C37 803A40              <1>     cmp byte [rdx], batNoEchoChar
   150 00001C3A 741C                <1>     je .noEcho       
   151 00001C3C F6055BE4FFFFFF      <1>     test byte [echoFlg], -1         
   152 00001C43 7413                <1>     jz .noEcho
   153 00001C45 0FB60D6DE5FFFF      <1>     movzx ecx, byte [inBuffer + 1]    ;Get the number of chars to print
   154 00001C4C BB01000000          <1>     mov ebx, 1  ;STDOUT
   155 00001C51 B800400000          <1>     mov eax, 4000h  ;Write woo!
   156 00001C56 CD21                <1>     int 21h
   157                              <1> .noEcho:
   158 00001C58 E9D2F4FFFF          <1>     jmp commandMain.batProceed
   159                              <1> .readChar:
   160 00001C5D B901000000          <1>     mov ecx, 1
   161 00001C62 B8003F0000          <1>     mov eax, 3F00h
   162 00001C67 CD21                <1>     int 21h  
   163 00001C69 85C0                <1>     test eax, eax
   164                              <1>     retnz   ;If a char read, return
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001C6B 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001C6D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   165 00001C6E 800D28E4FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set the end of file reached flag!
   166                              <1>     return
    13                              <2> %%_ret:
    14 00001C75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   167                              <1> 
   168                              <1> 
   169                              <1> batExpandVar:
   170                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   171                              <1> ;       rdi -> Position to place the substitution string
   172                              <1> ;Output: CF=NC: Substitution string is placed in buffer
   173                              <1> ;        CF=CY: No substitution string found
   174                              <1>     return
    13                              <2> %%_ret:
    14 00001C76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1>     ;cmp byte [rsi], "%"
   176                              <1> 
   177                              <1> batCleanup:
   178                              <1> ;This function is called after the last line has been processed by the 
   179                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   180                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   181 00001C77 488B1D35E4FFFF      <1>     mov rbx, qword [bbPtr]
   182 00001C7E 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   183 00001C81 880517E4FFFF        <1>     mov byte [echoFlg], al
   184                              <1> ;-----------------------------------------------------------------------
   185                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   186                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   187                              <1> ; But since this is the routine called by the error handler too, it 
   188                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   189                              <1> ; just have a null pointer.
   190                              <1> ;-----------------------------------------------------------------------
   191                              <1> ;Finally free this batch header
   192 00001C87 4150                <1>     push r8
   193 00001C89 4989D8              <1>     mov r8, rbx
   194 00001C8C B800490000          <1>     mov eax, 4900h
   195 00001C91 CD21                <1>     int 21h
   196 00001C93 4158                <1>     pop r8
   197 00001C95 E8D7F8FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   198 00001C9A 48C7050EE4FFFF0000- <1>     mov qword [bbPtr], 0    
   198 00001CA3 0000                <1>
   199 00001CA5 8025F1E3FFFFF7      <1>     and byte [statFlg1], ~inBatch   ;Oh bye bye batch mode!
   200                              <1>     return
    13                              <2> %%_ret:
    14 00001CAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001CAD 488D15F4ECFFFF      <1>     lea rdx, noSpace
    10 00001CB4 488D0D10F0FFFF      <1>     lea rcx, pipeErr
    11 00001CBB F605DFE3FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001CC2 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001CC4 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001CC8 E866000000          <1>     call badCmn     ;Print the string
    15 00001CCD E995F8FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001CD2 488D15BEF0FFFF      <1>     lea rdx, noMemMsg
    18 00001CD9 EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001CDB 488D15C2EFFFFF      <1>     lea rdx, syntaxErr
    21 00001CE2 EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001CE4 488D15D7ECFFFF      <1>     lea rdx, noEnvSpace
    24 00001CEB EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001CED 488D155CEFFFFF      <1>     lea rdx, accDenMsg
    27 00001CF4 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001CF6 488D15D1EDFFFF      <1>     lea rdx, badParm
    30 00001CFD EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001CFF 488D158BEDFFFF      <1>     lea rdx, badDrv
    33 00001D06 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001D08 488D154EF0FFFF      <1>     lea rdx, badArgs
    36 00001D0F EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001D11 488D1529F0FFFF      <1>     lea rdx, badSpec
    39 00001D18 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001D1A 488D155FECFFFF      <1>     lea rdx, dupName
    43 00001D21 EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001D23 488D156DECFFFF      <1>     lea rdx, fnfMsg
    46 00001D2A EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001D2C 488D159CEEFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001D33 E97C230000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001D38 488D1526ECFFFF      <1>     lea rdx, badCmd
    53 00001D3F EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001D41 C605A3E8FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001D48 C6059DE8FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001D4F C70594E8FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001D58 00                  <1>
    59 00001D59 C60592E8FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001D60 66C7057EE7FFFF0000  <1>     mov word [searchSpec], 0
    61 00001D69 488D3D04E9FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001D70 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001D73 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001D7C 3F                  <1>
    64 00001D7D 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001D81 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001D88 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001D8F 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001D92 E856250000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001D97 AC                  <1>     lodsb   ;Get this char
    72 00001D98 3C0D                <1>     cmp al, CR
    73 00001D9A 744D                <1>     je .scanDone
    74 00001D9C 3A0588E2FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001DA2 7524                <1>     jne .notSwitch
    76 00001DA4 AC                  <1>     lodsb   ;Get the next char
    77 00001DA5 E828250000          <1>     call ucChar
    78 00001DAA 3C57                <1>     cmp al, "W"
    79 00001DAC 7509                <1>     jne .notWide
    80 00001DAE 800D36E8FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001DB5 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001DB7 3C50                <1>     cmp al, "P"
    84 00001DB9 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001DBF 800D25E8FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001DC6 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001DC8 F6051CE8FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001DCF 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001DD5 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001DD8 E89C260000          <1>     call copyArgumentToSearchSpec   
    93 00001DDD 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001DE0 800D04E8FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001DE7 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001DE9 F605FBE7FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001DF0 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001DF2 488D35EEE6FFFF      <1>     lea rsi, searchSpec
   101 00001DF9 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001DFD 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001DFF 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001E04 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001E08 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001E0D CD21                <1>     int 21h
   108 00001E0F 3CFF                <1>     cmp al, -1
   109 00001E11 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001E17 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001E1C 84C0                <1>     test al, al
   113 00001E1E 740A                <1>     jz .currentDrv
   114 00001E20 FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001E22 8805C9E7FFFF        <1>     mov byte [dirDrv], al
   116 00001E28 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001E2A E87B240000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001E2F 8805BCE7FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001E35 488D35ABE6FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001E3C 488D3DAFE7FFFF      <1>     lea rdi, dirSrchDir
   124 00001E43 0FB605A7E7FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001E4A 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001E4C 0441                <1>     add al, "A" ;Turn into a letter
   127 00001E4E B43A                <1>     mov ah, ":"
   128 00001E50 66AB                <1>     stosw   ;Store X: into the search path
   129 00001E52 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001E57 CD2F                <1>     int 2fh
   131 00001E59 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001E5B 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001E61 8A05C2E1FFFF        <1>     mov al, byte [pathSep]
   135 00001E67 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001E69 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001E6B AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001E6C FEC2                <1>     inc dl  ;Increment by 1
   139 00001E6E 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001E71 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001E76 CD21                <1>     int 21h
   142 00001E78 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001E7B 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001E7D 3807                <1>     cmp byte [rdi], al
   149 00001E7F 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001E81 48FFC7              <1>     inc rdi
   151 00001E84 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001E86 8A059DE1FFFF        <1>     mov al, byte [pathSep]
   154 00001E8C 3806                <1>     cmp byte [rsi], al
   155 00001E8E 7412                <1>     je .copyPathLoop
   156 00001E90 B43A                <1>     mov ah, ":"
   157 00001E92 86C4                <1>     xchg al, ah
   158 00001E94 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001E98 7408                <1>     je .copyPathLoop
   160 00001E9A 88E0                <1>     mov al, ah
   161 00001E9C 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001E9F 7401                <1>     je .copyPathLoop
   163 00001EA1 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001EA2 AC                  <1>     lodsb
   166 00001EA3 3A0580E1FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001EA9 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001EAB 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001EAD 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001EAF 48FFC6              <1>     inc rsi
   172 00001EB2 EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001EB4 3C2E                <1>     cmp al, "."
   175 00001EB6 7407                <1>     je .dots
   176                              <1> .store:
   177 00001EB8 AA                  <1>     stosb
   178 00001EB9 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001EBB 7472                <1>     jz .exitPathCopy
   180 00001EBD EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001EBF 8A2564E1FFFF        <1>     mov ah, byte [pathSep]
   188 00001EC5 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001EC8 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001ECA 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001ECC 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00001ECF 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00001ED1 3A2552E1FFFF        <1>     cmp ah, byte [pathSep]
   195 00001ED7 7406                <1>     je .skipThisPathsep
   196 00001ED9 84E4                <1>     test ah, ah
   197 00001EDB 74C5                <1>     jz .copyPathLoop
   198 00001EDD EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00001EDF 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00001EE2 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00001EE4 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00001EE7 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00001EE9 3A253AE1FFFF        <1>     cmp ah, byte [pathSep]
   208 00001EEF 7408                <1>     je .tdOk
   209 00001EF1 84E4                <1>     test ah, ah
   210 00001EF3 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00001EF9 8A052AE1FFFF        <1>     mov al, byte byte [pathSep]
   213 00001EFF 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00001F03 0F84EDFDFFFF        <1>     je badParamError
   215 00001F09 4881EF02000000      <1>     sub rdi, 2
   216 00001F10 31C9                <1>     xor ecx, ecx
   217 00001F12 FFC9                <1>     dec ecx
   218 00001F14 FD                  <1>     std
   219 00001F15 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 00001F17 FC                  <1>     cld
   221 00001F18 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00001F1F 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00001F21 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 00001F27 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00001F2A E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00001F2F 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00001F36 8A05EDE0FFFF        <1>     mov al, byte [pathSep]
   230 00001F3C B43A                <1>     mov ah, ":"
   231 00001F3E 86C4                <1>     xchg al, ah
   232 00001F40 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00001F44 7409                <1>     je .skipOverwrite
   234 00001F46 88E0                <1>     mov al, ah
   235 00001F48 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00001F4A 7503                <1>     jne .skipOverwrite
   237 00001F4C C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00001F4F 488D359CE6FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00001F56 4889F7              <1>     mov rdi, rsi
   241 00001F59 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00001F5E CD2F                <1>     int 2fh
   243 00001F60 E821250000          <1>     call scanForWildcards
   244 00001F65 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00001F67 4889F2              <1>     mov rdx, rsi
   246 00001F6A 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00001F6E 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00001F70 E803260000          <1>     call setDTA ;Set the DTA
   250 00001F75 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00001F7A B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 00001F7F CD21                <1>     int 21h
   253 00001F81 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00001F83 F605F8E1FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00001F8A 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00001F8C 31C0                <1>     xor eax, eax
   259 00001F8E 31C9                <1>     xor ecx, ecx
   260 00001F90 FFC9                <1>     dec ecx
   261 00001F92 F2AE                <1>     repne scasb
   262 00001F94 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00001F97 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00001F99 31C0                <1>     xor eax, eax
   268 00001F9B 31C9                <1>     xor ecx, ecx
   269 00001F9D FFC9                <1>     dec ecx
   270 00001F9F F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00001FA1 8A0582E0FFFF        <1>     mov al, byte [pathSep]
   273 00001FA7 31C9                <1>     xor ecx, ecx
   274 00001FA9 FFC9                <1>     dec ecx
   275 00001FAB FD                  <1>     std ;Search backwards
   276 00001FAC F2AE                <1>     repne scasb
   277 00001FAE FC                  <1>     cld ;Search forwards again
   278 00001FAF 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 00001FB2 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00001FB6 7503                <1>     jne .wcsp1
   281 00001FB8 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00001FBB 57                  <1>     push rdi
   285 00001FBC 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00001FBE 7503                <1>     jne .wcsp2
   287 00001FC0 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00001FC3 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00001FC6 488D3DA7E6FFFF      <1>     lea rdi, dirSrchFCB
   291 00001FCD B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00001FD2 CD21                <1>     int 21h
   293 00001FD4 5F                  <1>     pop rdi
   294 00001FD5 31C0                <1>     xor eax, eax
   295 00001FD7 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 00001FD9 0FB60511E6FFFF      <1>     movzx eax, byte [dirDrv] 
   298 00001FE0 E86A160000          <1>     call volume.dirEP
   299 00001FE5 488D154BECFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 00001FEC B409                <1>     mov ah, 09h
   301 00001FEE CD21                <1>     int 21h
   302 00001FF0 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 00001FF3 488D15F8E5FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 00001FFA B409                <1>     mov ah, 09h
   305 00001FFC CD21                <1>     int 21h
   306 00001FFE C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 00002001 488D15E5E8FFFF      <1>     lea rdx, crlf2
   308 00002008 B409                <1>     mov ah, 09h
   309 0000200A CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 0000200C 8A0517E0FFFF        <1>     mov al, byte [pathSep]
   313 00002012 3847FF              <1>     cmp byte [rdi - 1], al
   314 00002015 7403                <1>     je .root
   315 00002017 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 0000201A 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 0000201D AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 0000201E 488D3550E6FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 00002025 E89E230000          <1>     call FCBToAsciiz    ;Terminates for free
   321 0000202A E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 0000202F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 00002030 E843250000          <1>     call setDTA
   326 00002035 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 0000203A 488D15B1E5FFFF      <1>     lea rdx, dirSrchDir
   328 00002041 B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00002046 CD21                <1>     int 21h
   330 00002048 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 0000204A E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 0000204F B44F                <1>     mov ah, 4Fh
   334 00002051 CD21                <1>     int 21h
   335 00002053 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00002055 F6058FE5FFFF01      <1>     test byte [dirFlags], dirWideType
   338 0000205C 740B                <1>     jz .dirNoEndNewLine
   339 0000205E 488D1585E8FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00002065 B409                <1>     mov ah, 09h
   341 00002067 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00002069 F7057AE5FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 00002072 FF                  <1>
   345 00002073 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00002075 488D151BE9FFFF      <1>     lea rdx, fnfMsg
   348 0000207C E833200000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 00002081 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 00002082 488D1583EEFFFF      <1>     lea rdx, fourSpc
   352 00002089 B409                <1>     mov ah, 09h
   353 0000208B CD21                <1>     int 21h
   354 0000208D B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 0000208F CD21                <1>     int 21h
   356 00002091 8B0556E5FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 00002097 E8FE230000          <1>     call printDecimalWord
   358 0000209C 488D15CDE9FFFF      <1>     lea rdx, dirOk
   359 000020A3 B409                <1>     mov ah, 09h
   360 000020A5 CD21                <1>     int 21h
   361 000020A7 488D1563EEFFFF      <1>     lea rdx, threeSpc
   362 000020AE B409                <1>     mov ah, 09h
   363 000020B0 CD21                <1>     int 21h
   364 000020B2 B800360000          <1>     mov eax, 3600h ;Get disk info
   365 000020B7 8A1534E5FFFF        <1>     mov dl, byte [dirDrv]
   366 000020BD FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 000020BF CD21                <1>     int 21h ;Get disk free space info
   368 000020C1 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 000020C4 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 000020C7 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 000020C9 F7E1                <1>     mul ecx ;Get bytes per cluster
   372 000020CB 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 000020CE E8C7230000          <1>     call printDecimalWord
   375 000020D3 488D15A0E9FFFF      <1>     lea rdx, bytesOk
   376 000020DA B409                <1>     mov ah, 09h
   377 000020DC CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 000020DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 000020DF F6059CE0FFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000020E6 75(DE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 000020E8 488D359CE0FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 000020EF 488D3D67E0FFFF      <1>     lea rdi, cmdFcb
   388 000020F6 E85F220000          <1>     call asciiFilenameToFCB
   389 000020FB 488D155BE0FFFF      <1>     lea rdx, cmdFcb
   390 00002102 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 00002107 BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 0000210C B440                <1>     mov ah, 40h ;Write handle
   393 0000210E CD21                <1>     int 21h
   394 00002110 52                  <1>     push rdx
   395 00002111 B220                <1>     mov dl, " "
   396 00002113 B402                <1>     mov ah, 02h ;Print char
   397 00002115 CD21                <1>     int 21h
   398 00002117 5A                  <1>     pop rdx
   399 00002118 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 0000211F B903000000          <1>     mov ecx, 3  ;Print three chars
   401 00002124 BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 00002129 B440                <1>     mov ah, 40h ;Write handle
   403 0000212B CD21                <1>     int 21h
   404 0000212D F605B7E4FFFF01      <1>     test byte [dirFlags], dirWideType
   405 00002134 0F85AA000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 0000213A F60541E0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 00002141 7418                <1>     jz .dirPrintNotDir
   410 00002143 488D153EE9FFFF      <1>     lea rdx, dirLbl
   411 0000214A B409                <1>     mov ah, 09h
   412 0000214C CD21                <1>     int 21h
   413 0000214E 488D15BCEDFFFF      <1>     lea rdx, threeSpc
   414 00002155 B409                <1>     mov ah, 09h
   415 00002157 CD21                <1>     int 21h
   416 00002159 EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 0000215B B220                <1>     mov dl, " "
   420 0000215D B402                <1>     mov ah, 02h
   421 0000215F CD21                <1>     int 21h
   422 00002161 8B0520E0FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 00002167 E89F230000          <1>     call getDecimalWord
   424 0000216C 4889CB              <1>     mov rbx, rcx
   425 0000216F 51                  <1>     push rcx
   426 00002170 480FCB              <1>     bswap rbx
   427 00002173 B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 00002178 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 0000217A 7514                <1>     jne .dirPrintFileSize
   431 0000217C B402                <1>     mov ah, 02h
   432 0000217E B220                <1>     mov dl, " "
   433 00002180 CD21                <1>     int 21h
   434 00002182 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 00002186 FFC9                <1>     dec ecx
   436 00002188 81F901000000        <1>     cmp ecx, 1
   437 0000218E 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 00002190 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 00002191 88DA                <1>     mov dl, bl
   442 00002193 B402                <1>     mov ah, 02h
   443 00002195 CD21                <1>     int 21h
   444 00002197 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 0000219B FFC9                <1>     dec ecx
   446 0000219D 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 0000219F 488D156FEDFFFF      <1>     lea rdx, twoSpc
   448 000021A6 B409                <1>     mov ah, 09h
   449 000021A8 CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 000021AA B220                <1>     mov dl, " "
   452 000021AC B402                <1>     mov ah, 02h
   453 000021AE CD21                <1>     int 21h
   454 000021B0 0FB705CEDFFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 000021B7 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 000021B9 E8A61C0000          <1>     call printDate
   457 000021BE 488D1550EDFFFF      <1>     lea rdx, twoSpc
   458 000021C5 B409                <1>     mov ah, 09h
   459 000021C7 CD21                <1>     int 21h
   460 000021C9 0FB705B3DFFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 000021D0 E8B11D0000          <1>     call printTime
   462 000021D5 488D150EE7FFFF      <1>     lea rdx, crlf
   463 000021DC B409                <1>     mov ah, 09h
   464 000021DE CD21                <1>     int 21h
   465 000021E0 B017                <1>     mov al, 23  ;23 lines... for the next bit
   466 000021E2 EB0D                <1>     jmp short .dirPrintNameExit
   467                              <1> .widePrint:
   468                              <1> ;If /W, print name space ext space space space space
   469 000021E4 488D1521EDFFFF      <1>     lea rdx, fourSpc
   470 000021EB B409                <1>     mov ah, 09h ;Print string
   471 000021ED CD21                <1>     int 21h
   472 000021EF B073                <1>     mov al, 5*23    ;5 entries per line...
   473                              <1> .dirPrintNameExit:
   474 000021F1 FF05F6E3FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   475 000021F7 FE05EFE3FFFF        <1>     inc byte [dirLineCtr]
   476 000021FD 3805E9E3FFFF        <1>     cmp byte [dirLineCtr], al
   477                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002203 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002205 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 00002206 F605DEE3FFFF02      <1>     test byte [dirFlags], dirPageType
   479 0000220D 741A                <1>     jz .dirPrnNoPag
   480 0000220F 488D1599E8FFFF      <1>     lea rdx, pauseMes
   481 00002216 B409                <1>     mov ah, 09h
   482 00002218 CD21                <1>     int 21h
   483 0000221A B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   484 0000221C CD21                <1>     int 21h
   485 0000221E 488D15C5E6FFFF      <1>     lea rdx, crlf   ;Force new line
   486 00002225 B409                <1>     mov ah, 09h
   487 00002227 CD21                <1>     int 21h
   488                              <1> .dirPrnNoPag:
   489 00002229 C605BCE3FFFF00      <1>     mov byte [dirLineCtr], 0
   490                              <1>     return
    13                              <2> %%_ret:
    14 00002230 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> chdir:
   493 00002231 F60574DEFFFFFF      <1>     test byte [arg1Flg], -1
   494 00002238 754D                <1>     jnz .changeDir
   495                              <1>     ;Print CWD
   496                              <1> .printCWD:
   497 0000223A E8EA1E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   498 0000223F E8691E0000          <1>     call printCRLF
   499                              <1>     return
    13                              <2> %%_ret:
    14 00002244 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .printDiskCWD:
   501                              <1> ;Print CWD for a specified drive
   502 00002245 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   503 00002249 88D0                <1>     mov al, dl
   504 0000224B 0440                <1>     add al, "@" ;Get the UC letter
   505 0000224D B43A                <1>     mov ah, ":"
   506 0000224F 488D3D91E2FFFF      <1>     lea rdi, searchSpec
   507 00002256 66AB                <1>     stosw   ;Store X:, rdi+=2
   508 00002258 8A05CBDDFFFF        <1>     mov al, byte [pathSep]
   509 0000225E AA                  <1>     stosb   ;Store pathSep, inc rdi
   510 0000225F B447                <1>     mov ah, 47h ;Get Current Working Directory
   511 00002261 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   512 00002264 CD21                <1>     int 21h
   513 00002266 E85D200000          <1>     call strlen
   514 0000226B 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   515 00002271 B440                <1>     mov ah, 40h ;Write to handle
   516 00002273 BB01000000          <1>     mov ebx, 1  ;STDOUT
   517 00002278 488D1568E2FFFF      <1>     lea rdx, searchSpec
   518 0000227F CD21                <1>     int 21h
   519 00002281 E8271E0000          <1>     call printCRLF
   520                              <1>     return
    13                              <2> %%_ret:
    14 00002286 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> .changeDir:
   522 00002287 8A0521DEFFFF        <1>     mov al, byte [arg1FCBret]
   523 0000228D 3CFF                <1>     cmp al, -1 
   524 0000228F 0F846AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   525 00002295 E8C7210000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   526 0000229A 488D1546E2FFFF      <1>     lea rdx, searchSpec
   527 000022A1 B43B                <1>     mov ah, 3Bh ;CHDIR
   528 000022A3 CD21                <1>     int 21h
   529 000022A5 0F8281FAFFFF        <1>     jc badDirError
   530                              <1>     return
    13                              <2> %%_ret:
    14 000022AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> mkdir:
   533 000022AC F605F9DDFFFFFF      <1>     test byte [arg1Flg], -1
   534 000022B3 0F844FFAFFFF        <1>     jz badArgError
   535 000022B9 F605EFDDFFFFFF      <1>     test byte [arg2Flg], -1
   536 000022C0 0F8542FAFFFF        <1>     jnz badArgError
   537                              <1>     ;We have exactly one argument
   538 000022C6 8A05E2DDFFFF        <1>     mov al, byte [arg1FCBret]
   539 000022CC 3CFF                <1>     cmp al, -1 
   540 000022CE 0F842BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   541 000022D4 E888210000          <1>     call buildCommandPath
   542 000022D9 488D1507E2FFFF      <1>     lea rdx, searchSpec
   543 000022E0 B800390000          <1>     mov eax, 3900h  ;MKDIR
   544 000022E5 CD21                <1>     int 21h
   545                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000022E7 73(AB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   546                              <1> .badMake:   ;Else, bad make
   547 000022E9 488D15F3E8FFFF      <1>     lea rdx, badMD
   548 000022F0 E9BF1D0000          <1>     jmp printString
   549                              <1> 
   550                              <1> rmdir:
   551 000022F5 F605B0DDFFFFFF      <1>     test byte [arg1Flg], -1
   552 000022FC 0F8406FAFFFF        <1>     jz badArgError
   553 00002302 F605A6DDFFFFFF      <1>     test byte [arg2Flg], -1
   554 00002309 0F85F9F9FFFF        <1>     jnz badArgError
   555                              <1>     ;We have exactly one argument
   556 0000230F 8A0599DDFFFF        <1>     mov al, byte [arg1FCBret]
   557 00002315 3CFF                <1>     cmp al, -1 
   558 00002317 0F84E2F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   559 0000231D E83F210000          <1>     call buildCommandPath
   560 00002322 488D15BEE1FFFF      <1>     lea rdx, searchSpec
   561 00002329 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   562 0000232E CD21                <1>     int 21h
   563                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002330 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002332 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564                              <1> .badRemove:   ;Else, bad make
   565 00002333 488D15C6E8FFFF      <1>     lea rdx, badRD
   566 0000233A E9751D0000          <1>     jmp printString
   567                              <1> 
   568                              <1> copy:
   569 0000233F 66C7058CE4FFFFFFFF  <1>     mov word [sourceHdl], -1
   570 00002348 66C70585E4FFFFFFFF  <1>     mov word [destHdl], -1
   571 00002351 66C7057EE4FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   572 0000235A C60587E4FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   573 00002361 48C7056EE4FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   573 0000236A 0000                <1>
   574 0000236C 66C7056DE4FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   575 00002375 C70565E4FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   575 0000237E 00                  <1>
   576 0000237F C6052EE3FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   577 00002386 C605A9E3FFFF00      <1>     mov byte [destSpec], 0
   578 0000238D 48C70520E4FFFF0000- <1>     mov qword [srcPtr], 0
   578 00002396 0000                <1>
   579 00002398 48C7051DE4FFFF0000- <1>     mov qword [destPtr], 0
   579 000023A1 0000                <1>
   580 000023A3 E8D0210000          <1>     call setDTA
   581 000023A8 B800540000          <1>     mov eax, 5400h  ;Get verify flag
   582 000023AD CD21                <1>     int 21h
   583 000023AF 88051EE4FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   584                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   585                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   586                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   587 000023B5 B800520000          <1>     mov eax, 5200h
   588 000023BA CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   589 000023BC 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   590 000023C0 89CB                <1>     mov ebx, ecx
   591 000023C2 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   592 000023C5 B800480000          <1>     mov eax, 4800h
   593 000023CA CD21                <1>     int 21h
   594 000023CC 731E                <1>     jnc .bufOk
   595 000023CE 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   596 000023D0 750C                <1>     jnz .okSize
   597                              <1> .badAlloc:
   598                              <1> ;Not enough memory error!
   599 000023D2 488D157AE6FFFF      <1>     lea rdx, cpNoMem
   600 000023D9 E955F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   601                              <1> .okSize:
   602 000023DE 89D9                <1>     mov ecx, ebx    
   603 000023E0 C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   604 000023E3 B800480000          <1>     mov eax, 4800h
   605 000023E8 CD21                <1>     int 21h
   606 000023EA 72E6                <1>     jc .badAlloc
   607                              <1> .bufOk:
   608 000023EC 488905E7E3FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   609 000023F3 66890DE8E3FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   610                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   611 000023FA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   612 00002401 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   613 00002409 FFC9                <1>     dec ecx ;Turn into offset
   614 0000240B 4801CE              <1>     add rsi, rcx
   615 0000240E 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   616 00002410 FD                  <1>     std ;Go in reverse
   617                              <1> .sd:    ;At this point, any switch chars affect destination!
   618 00002411 E8D71E0000          <1>     call skipDelimiters ;SkipDelimiters in reverse!
   619 00002416 8A050EDCFFFF        <1>     mov al, byte [switchChar]
   620 0000241C 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   621 0000241F 7509                <1>     jne .noSwitch
   622                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   623 00002421 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   624 00002425 50                  <1>     push rax        ;Push the switchchar
   625 00002426 FFC2                <1>     inc edx         ;Inc the counter
   626 00002428 EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   627                              <1> .noSwitch:
   628                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   629 0000242A 85D2                <1>     test edx, edx
   630 0000242C 7412                <1>     jz .noDestSwitch
   631                              <1> .ns1:
   632 0000242E 58                  <1>     pop rax ;Pop the switch char
   633 0000242F B304                <1>     mov bl, ascDes
   634 00002431 E809040000          <1>     call .doSwitchRev
   635 00002436 0F8574040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   636 0000243C FFCA                <1>     dec edx
   637 0000243E 75EE                <1>     jnz .ns1
   638                              <1> .noDestSwitch:
   639                              <1> ;Now search for the starting delimiter or start of line
   640 00002440 48FFC6              <1>     inc rsi ;Go to the last char in the path
   641                              <1> .noSwitchLp:
   642 00002443 AC                  <1>     lodsb   ;Get char at rsi, go back a char
   643 00002444 E8B21E0000          <1>     call isALdelimiter
   644 00002449 7412                <1>     je .destFnd
   645 0000244B 8A05D9DBFFFF        <1>     mov al, byte [switchChar]
   646 00002451 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   647 00002454 7404                <1>     je .se  ;Jump if so!
   648 00002456 FFC9                <1>     dec ecx ;One less char left to search
   649 00002458 EBE9                <1>     jmp short .noSwitchLp
   650                              <1> .se:
   651 0000245A 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   652                              <1> .destFnd:
   653 0000245D 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   654 00002464 FC                  <1>     cld 
   655 00002465 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   656 00002468 488D3DC7E2FFFF      <1>     lea rdi, destSpec
   657 0000246F 57                  <1>     push rdi
   658 00002470 E8A91F0000          <1>     call cpDelimPathToBufz ;Copy this over!   
   659 00002475 5F                  <1>     pop rdi
   660 00002476 E8291F0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   661 0000247B 48893D3EE3FFFF      <1>     mov qword [destPtr], rdi
   662 00002482 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   663 00002486 7517                <1>     jne .destEnd    ;Dont worry
   664 00002488 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   665 0000248A E8431E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   666 0000248F 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   667 00002491 4881C702000000      <1>     add rdi, 2              ;Point to this null
   668 00002498 48893D21E3FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   669                              <1> .destEnd:
   670                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   671 0000249F 802542E3FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   672 000024A6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   673                              <1> .srcLp:
   674 000024AD E83B1E0000          <1>     call skipDelimiters 
   675 000024B2 8A0572DBFFFF        <1>     mov al, byte [switchChar]
   676 000024B8 3806                <1>     cmp byte [rsi], al
   677 000024BA 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   678                              <1>     ;rsi points to switch after switchchar
   679 000024BC B301                <1>     mov bl, ascSrc
   680 000024BE E876030000          <1>     call .doSwitch
   681 000024C3 0F85E7030000        <1>     jnz .badExit
   682 000024C9 4881C602000000      <1>     add rsi, 2
   683 000024D0 EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   684                              <1> .noSrcSw:
   685 000024D2 4839F5              <1>     cmp rbp, rsi
   686 000024D5 7527                <1>     jne .noSameSrcDest
   687                              <1>     ;Here if the destination we specified earlier is the same as the source
   688                              <1>     ;This means, the actual destination is the current default drive
   689                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   690 000024D7 E8CE1D0000          <1>     call getCurrentDrive    ;Get current drive
   691 000024DC 0441                <1>     add al, "A"             ;Turn into a drive letter
   692 000024DE B43A                <1>     mov ah, ":"
   693 000024E0 0FB7C0              <1>     movzx eax, ax
   694 000024E3 89054DE2FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   695 000024E9 488D3D48E2FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   696 000024F0 48893DC9E2FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   697 000024F7 800DEAE2FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   698                              <1> .noSameSrcDest:
   699 000024FE 488D3DAFE1FFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   700 00002505 57                  <1>     push rdi
   701 00002506 E8131F0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   702 0000250B 5F                  <1>     pop rdi
   703                              <1>     ;Now go forwards and pick up any more switches.
   704                              <1>     ;Also any "+" signs here!!
   705 0000250C 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   706                              <1> .swSrcSwPost:
   707 0000250F E8D91D0000          <1>     call skipDelimiters ;Skips trailing delimiters
   708 00002514 8A0510DBFFFF        <1>     mov al, byte [switchChar]
   709 0000251A 3806                <1>     cmp byte [rsi], al
   710 0000251C 7516                <1>     jne .swSrcSwPostExit
   711                              <1>     ;rsi points to switch after switchchar
   712 0000251E B301                <1>     mov bl, ascSrc
   713 00002520 E814030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   714 00002525 0F8585030000        <1>     jnz .badExit
   715 0000252B 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   716 00002532 EBDB                <1>     jmp short .swSrcSwPost
   717                              <1> .swSrcSwPostExit:
   718 00002534 4889FE              <1>     mov rsi, rdi
   719 00002537 E84A1F0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   720 0000253C 7507                <1>     jnz .oneCp
   721 0000253E 800DA3E2FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   722                              <1> .oneCp:
   723 00002545 E85A1E0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   724 0000254A 48893D67E2FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   725 00002551 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   726 00002555 7517                <1>     jne .srcEnd             ;Dont worry
   727 00002557 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   728 00002559 E8741D0000          <1>     call ucChar             ;Make sure we UC the drive letter
   729 0000255E 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   730 00002560 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   731 00002567 48893D4AE2FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   732                              <1> .srcEnd:
   733                              <1> ;Now uppercase both paths
   734 0000256E 488D353FE1FFFF      <1>     lea rsi, srcSpec
   735 00002575 E8641D0000          <1>     call normalisePath
   736 0000257A 488D3DB5E1FFFF      <1>     lea rdi, destSpec
   737 00002581 E8581D0000          <1>     call normalisePath
   738                              <1> ;Now establish if the source is a directory or not!
   739 00002586 F6055BE2FFFF08      <1>     test byte [bCpFlg], wcSrc
   740 0000258D 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   741 0000258F 488D151EE1FFFF      <1>     lea rdx, srcSpec
   742 00002596 4889D6              <1>     mov rsi, rdx
   743 00002599 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   744 0000259B 80FC3A              <1>     cmp ah, ":"
   745 0000259E 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   746 000025A0 AC                  <1>     lodsb           ;Get char past :
   747 000025A1 84C0                <1>     test al, al     ;Is byte three nul?
   748 000025A3 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   749 000025A5 3A057EDAFFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   750 000025AB 7515                <1>     jne .isSrcDir
   751 000025AD AC                  <1>     lodsb           ;Get char past char past "X:\"
   752 000025AE 84C0                <1>     test al, al     
   753 000025B0 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   754                              <1> .srcStorWc:
   755                              <1> ;rsi points past the char to store the WC at
   756 000025B2 C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   757 000025B9 800D28E2FFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   758 000025C0 EB44                <1>     jmp short .checkDestDir
   759                              <1> .isSrcDir:
   760 000025C2 B910000000          <1>     mov ecx, dirDirectory
   761 000025C7 B8004E0000          <1>     mov eax, 4E00h
   762 000025CC CD21                <1>     int 21h
   763 000025CE 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   764                              <1>     ;Was the file we found actually a directory?
   765 000025D0 803DABDBFFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   766 000025D7 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   767 000025D9 4889D7              <1>     mov rdi, rdx
   768 000025DC E8E71C0000          <1>     call strlen
   769 000025E1 FFC9                <1>     dec ecx
   770 000025E3 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   771 000025E6 8A053DDAFFFF        <1>     mov al, byte [pathSep]
   772 000025EC 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   773 000025EF 7401                <1>     je .srctpsp
   774 000025F1 AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   775                              <1> .srctpsp:
   776 000025F2 48893DBFE1FFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   777 000025F9 B82A2E2A00          <1>     mov eax, "*.*"
   778 000025FE AB                  <1>     stosd   ;Store the WC with terminating nul!
   779 000025FF 800DE2E1FFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   780                              <1> .checkDestDir:
   781                              <1> ;Now establish if destination is a directory or not!
   782 00002606 F605DBE1FFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   783 0000260D 0F855E010000        <1>     jnz .mod1
   784 00002613 488D351CE1FFFF      <1>     lea rsi, destSpec
   785 0000261A 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   786 0000261C 80FC3A              <1>     cmp ah, ":"
   787 0000261F 751A                <1>     jne .isDestDir
   788 00002621 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   789 00002623 84C0                <1>     test al, al ;Is byte three nul?
   790 00002625 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   791 0000262B 84E4                <1>     test ah, ah ;Is byte four nul?
   792 0000262D 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   793 0000262F 3A05F4D9FFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   794 00002635 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   795                              <1> .isDestDir:
   796                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   797 0000263B 488D15F4E0FFFF      <1>     lea rdx, destSpec
   798 00002642 B910000000          <1>     mov ecx, dirDirectory
   799 00002647 B8004E0000          <1>     mov eax, 4E00h
   800 0000264C CD21                <1>     int 21h
   801 0000264E 7237                <1>     jc .mod2
   802                              <1>     ;Was the file we found actually a directory?
   803 00002650 803D2BDBFFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   804 00002657 752E                <1>     jne .mod2
   805                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   806                              <1>     ;If not, we need to place one there!
   807 00002659 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   808 0000265C E8671C0000          <1>     call strlen
   809 00002661 FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   810 00002663 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   811 00002666 0FB605BCD9FFFF      <1>     movzx eax, byte [pathSep]
   812 0000266D 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   813 00002670 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   814 00002676 66AB                <1>     stosw           ;Else, store the pathsep and null!
   815 00002678 48FFCF              <1>     dec rdi         ;Point back to null
   816 0000267B 48893D3EE1FFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   817 00002682 E9EA000000          <1>     jmp .mod1
   818                              <1> .mod2:
   819                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   820                              <1> ; to rename wildcard semantics. Always run through this as the destination
   821                              <1> ; name may have wildcards in it! But we don't add any.
   822 00002687 800D5AE1FFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   823 0000268E 488D35A1E0FFFF      <1>     lea rsi, destSpec
   824 00002695 E8EC1D0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   825 0000269A 7407                <1>     jz .m2Wc
   826 0000269C 800D45E1FFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   827                              <1> .m2Wc:
   828                              <1> ;Search for the source file
   829 000026A3 488D150AE0FFFF      <1>     lea rdx, srcSpec
   830 000026AA 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   831 000026AC B8004E0000          <1>     mov eax, 4E00h
   832 000026B1 CD21                <1>     int 21h
   833 000026B3 0F82ED010000        <1>     jc .badSrcFile
   834 000026B9 488B3500E1FFFF      <1>     mov rsi, qword [destPtr]
   835 000026C0 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   836 000026C4 B801290000          <1>     mov eax, 2901h
   837 000026C9 CD21                <1>     int 21h
   838                              <1> .md2Lp:
   839 000026CB 488D35B9DAFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   840 000026D2 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   841 000026D6 B801290000          <1>     mov eax, 2901h
   842 000026DB CD21                <1>     int 21h  
   843                              <1> ;Now depending on source and dest patterns, build a filename in renName
   844 000026DD 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   845 000026E1 488D3DE0E0FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   846 000026E8 57                  <1>     push rdi
   847 000026E9 48A5                <1>     movsq
   848 000026EB 66A5                <1>     movsw
   849 000026ED A4                  <1>     movsb
   850 000026EE 5F                  <1>     pop rdi
   851 000026EF 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   852 000026F3 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   853                              <1> .md2NameMake:
   854 000026F8 AC                  <1>     lodsb   ;Get the char from the source string
   855 000026F9 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   856 000026FC 7502                <1>     jne .noStore    ;Dont store the char there
   857 000026FE 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   858                              <1> .noStore:
   859 00002700 48FFC7              <1>     inc rdi ;Goto next char position
   860 00002703 FFC9                <1>     dec ecx
   861 00002705 75F1                <1>     jnz .md2NameMake
   862 00002707 488D357DDAFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   863 0000270E 488B3DA3E0FFFF      <1>     mov rdi, qword [srcPtr]
   864 00002715 E8951B0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   865 0000271A 488D35A7E0FFFF      <1>     lea rsi, renName
   866 00002721 488B3D98E0FFFF      <1>     mov rdi, qword [destPtr]
   867 00002728 E89B1C0000          <1>     call FCBToAsciiz
   868 0000272D E8DB000000          <1>     call .prntFilespec  ;Prints the source filename
   869 00002732 E8AE010000          <1>     call copyMain       ;And copy it!
   870 00002737 731D                <1>     jnc .md2Ok
   871                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   872                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   873 00002739 3CFD                <1>     cmp al, -3
   874 0000273B 0F8442010000        <1>     je .badBinCdevErr
   875 00002741 3CFE                <1>     cmp al, -2
   876 00002743 0F8443010000        <1>     je .rootDirFull
   877 00002749 3CFF                <1>     cmp al, -1      ;Source and destination same?
   878 0000274B 0F8444010000        <1>     je .badSameFile 
   879 00002751 E95A010000          <1>     jmp .badExit    ;Else generic error message
   880                              <1> .md2Ok:
   881 00002756 F6058BE0FFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   882 0000275D 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   883 00002763 B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   884 00002768 CD21                <1>     int 21h
   885 0000276A 727C                <1>     jc .copyDone        ;If no more files, we are done!
   886 0000276C E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   887                              <1> .mod1:
   888                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   889 00002771 800D70E0FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   890 00002778 488D1535DFFFFF      <1>     lea rdx, srcSpec
   891 0000277F 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   892 00002781 B8004E0000          <1>     mov eax, 4E00h
   893 00002786 CD21                <1>     int 21h
   894 00002788 0F8218010000        <1>     jc .badSrcFile  ;File not found error!!
   895                              <1> .mod1Lp:
   896 0000278E 488D35F6D9FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   897 00002795 488B3D1CE0FFFF      <1>     mov rdi, qword [srcPtr]
   898 0000279C E81D1B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   899 000027A1 488B3D18E0FFFF      <1>     mov rdi, qword [destPtr]
   900 000027A8 E8111B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   901 000027AD E85B000000          <1>     call .prntFilespec
   902 000027B2 E82E010000          <1>     call copyMain   ;And copy it!
   903 000027B7 731D                <1>     jnc .mod1Ok
   904                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   905                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   906 000027B9 3CFD                <1>     cmp al, -3
   907 000027BB 0F84C2000000        <1>     je .badBinCdevErr
   908 000027C1 3CFE                <1>     cmp al, -2
   909 000027C3 0F84C3000000        <1>     je .rootDirFull
   910 000027C9 3CFF                <1>     cmp al, -1      ;Source and destination same?
   911 000027CB 0F84C4000000        <1>     je .badSameFile 
   912 000027D1 E9DA000000          <1>     jmp .badExit    ;Else generic error message
   913                              <1> .mod1Ok:
   914 000027D6 F6050BE0FFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   915 000027DD 7409                <1>     jz .copyDone
   916 000027DF B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   917 000027E4 CD21                <1>     int 21h
   918 000027E6 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   919                              <1> 
   920                              <1> .copyDone:
   921 000027E8 E8CD000000          <1>     call .copyCleanup   ;Clean up resources!
   922 000027ED B800020000          <1>     mov eax, 0200h      ;Beep a TAB out :)
   923 000027F2 B209                <1>     mov dl, TAB
   924 000027F4 CD21                <1>     int 21h
   925 000027F6 8B05E8DFFFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   926 000027FC E8991C0000          <1>     call printDecimalWord   ;n File(s) copied
   927 00002801 488D1539E2FFFF      <1>     lea rdx, copyOk
   928 00002808 B409                <1>     mov ah, 09h
   929 0000280A CD21                <1>     int 21h    
   930                              <1>     return
    13                              <2> %%_ret:
    14 0000280C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> 
   932                              <1> .prntFilespec:
   933                              <1> ;Prints the filespec to STDOUT. If the path is 
   934 0000280D F605D4DFFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   935                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002814 74(0C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   936 00002816 488D1597DEFFFF      <1>     lea rdx, srcSpec
   937 0000281D 4889D7              <1>     mov rdi, rdx
   938 00002820 E8A31A0000          <1>     call strlen
   939 00002825 FFC9                <1>     dec ecx     ;Drop terminating null
   940 00002827 BB01000000          <1>     mov ebx, 1  ;STDOUT
   941 0000282C B800400000          <1>     mov eax, 4000h  ;Write
   942 00002831 CD21                <1>     int 21h
   943 00002833 E875180000          <1>     call printCRLF
   944                              <1>     return
    13                              <2> %%_ret:
    14 00002838 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   945                              <1> .doSwitch:
   946                              <1> ;Since switches can come before or after a name, handle them here!
   947                              <1> ;If invalid switch char, returns ZF=NZ.
   948                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   949                              <1> ;       rsi -> Switchchar
   950 00002839 56                  <1>     push rsi
   951 0000283A 48FFC6              <1>     inc rsi ;Point to char past switchchar
   952 0000283D AC                  <1>     lodsb   ;Get this char, goto next char
   953 0000283E 5E                  <1>     pop rsi
   954                              <1> .doSwitchRev:
   955 0000283F E88E1A0000          <1>     call ucChar
   956 00002844 3C41                <1>     cmp al, "A"
   957 00002846 7510                <1>     jne .cB
   958 00002848 081D9ADFFFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   959 0000284E 802593DFFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   960                              <1> .cExit:
   961 00002855 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   962                              <1>     return
    13                              <2> %%_ret:
    14 00002857 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   963                              <1> .cB:
   964 00002858 3C42                <1>     cmp al, "B"
   965 0000285A 7511                <1>     jne .cV
   966 0000285C F6D3                <1>     not bl  ;Reverse bits
   967 0000285E 201D84DFFFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   968 00002864 800D7DDFFFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   969 0000286B EBE8                <1>     jmp short .cExit
   970                              <1> .cV:
   971 0000286D 3C56                <1>     cmp al, "V"
   972                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000286F 75(57)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   973 00002871 F6055BDFFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   974 00002878 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   975                              <1>     ;Else, set it. We return it at the end!
   976 0000287A B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   977 0000287F CD21                <1>     int 21h
   978 00002881 EBD2                <1>     jmp short .cExit
   979                              <1> 
   980                              <1> ;COPY Bad Exits!!
   981                              <1> .badBinCdevErr:
   982 00002883 488D1567E4FFFF      <1>     lea rdx, binDevErr
   983 0000288A EB10                <1>     jmp short .badExitCmn
   984                              <1> .rootDirFull:
   985 0000288C 488D154AE1FFFF      <1>     lea rdx, fulRootDir
   986 00002893 EB07                <1>     jmp short .badExitCmn
   987                              <1> .badSameFile:
   988 00002895 488D1557E1FFFF      <1>     lea rdx, noSelfCopy
   989                              <1> .badExitCmn:
   990 0000289C E892F4FFFF          <1>     call badCmn     ;Print error message
   991 000028A1 E942FFFFFF          <1>     jmp .copyDone   ;Clean resources
   992                              <1> .badSrcFile:
   993 000028A6 E878F4FFFF          <1>     call badFnf  ;File not found!!
   994 000028AB E938FFFFFF          <1>     jmp .copyDone
   995                              <1> .badExit:
   996 000028B0 E841F4FFFF          <1>     call badParamError
   997 000028B5 E92EFFFFFF          <1>     jmp .copyDone
   998                              <1> 
   999                              <1> .copyCleanup:
  1000                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
  1001                              <1> ;Handles are never open in this process!
  1002 000028BA B8002E0000          <1>     mov eax, 2E00h
  1003 000028BF 8A050EDFFFFF        <1>     mov al, byte [verifyFlg]
  1004 000028C5 CD21                <1>     int 21h
  1005 000028C7 4150                <1>     push r8
  1006 000028C9 4C8B050ADFFFFF      <1>     mov r8, qword [cpBufPtr]
  1007 000028D0 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
  1008 000028D3 7407                <1>     jz .skipFree
  1009 000028D5 B800490000          <1>     mov eax, 4900h
  1010 000028DA CD21                <1>     int 21h
  1011                              <1> .skipFree:
  1012 000028DC 4158                <1>     pop r8
  1013 000028DE 0F82791C0000        <1>     jc freezePC ;If free fails, man....
  1014                              <1>     return
    13                              <2> %%_ret:
    14 000028E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> copyMain:
  1017                              <1> ;This is the main copying procedure! 
  1018                              <1> ;Start by checking the two files are not the same. If so, complain!
  1019                              <1> ;If returns CF=CY, error code in al. 
  1020                              <1> ;   If al = -1, same filename error!
  1021                              <1> ;   If al = -2, Root Dir full (couldn't create file)
  1022                              <1> ;   If al = -3, attempted binary read from a device
  1023                              <1> ;If returns CF=NC, file copied successfully.
  1024                              <1> ;Check the two files are not the same using truename in searchspec
  1025 000028E5 488D35C8DDFFFF      <1>     lea rsi, srcSpec
  1026 000028EC 488D3DF4DBFFFF      <1>     lea rdi, searchSpec
  1027 000028F3 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1028 000028F8 CD21                <1>     int 21h 
  1029 000028FA 57                  <1>     push rdi    ;Save this searchSpec
  1030 000028FB 488D3534DEFFFF      <1>     lea rsi, destSpec
  1031 00002902 488D3D60DCFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1032 00002909 B800600000          <1>     mov eax, 6000h
  1033 0000290E CD21                <1>     int 21h
  1034 00002910 5E                  <1>     pop rsi     ;Get this ptr back
  1035 00002911 B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1036 00002916 CD2F                <1>     int 2Fh
  1037 00002918 750F                <1>     jnz .notSameFile
  1038 0000291A B0FF                <1>     mov al, -1  ;Same filename error!
  1039                              <1> .badExit:
  1040 0000291C 50                  <1>     push rax
  1041 0000291D E8B0000000          <1>     call .exitCleanup
  1042 00002922 58                  <1>     pop rax
  1043 00002923 F9                  <1>     stc
  1044                              <1>     return
    13                              <2> %%_ret:
    14 00002924 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1045                              <1> .badExitNoSpace:
  1046 00002925 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1047 00002927 EBF3                <1>     jmp short .badExit
  1048                              <1> .notSameFile:
  1049                              <1> ;Open source with read permission
  1050                              <1> ;Open destination with write permission
  1051 00002929 488D1584DDFFFF      <1>     lea rdx, srcSpec
  1052 00002930 B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1053 00002935 CD21                <1>     int 21h
  1054 00002937 72E3                <1>     jc .badExit
  1055 00002939 66890594DEFFFF      <1>     mov word [sourceHdl], ax
  1056 00002940 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1057                              <1> 
  1058 00002943 B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1059 00002948 CD21                <1>     int 21h
  1060 0000294A 66891587DEFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1061 00002951 F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1062 00002954 7412                <1>     jz .prepCopy
  1063                              <1> ;Check the binary flag was not set on this source filespec
  1064 00002956 B0FD                <1>     mov al, -3  ;Prep the error code
  1065 00002958 F60589DEFFFF02      <1>     test byte [bCpFlg], binSrc
  1066 0000295F 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1067 00002961 800D80DEFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1068                              <1> .prepCopy:
  1069 00002968 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1070 0000296A 488B1569DEFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1071                              <1> .copyLoop:
  1072 00002971 0FB70D6ADEFFFF      <1>     movzx ecx, word [wCpBufSz]
  1073 00002978 0FB71D55DEFFFF      <1>     movzx ebx, word [sourceHdl]
  1074 0000297F B8003F0000          <1>     mov eax, 3F00h ;Read
  1075 00002984 CD21                <1>     int 21h
  1076 00002986 7294                <1>     jc .badExit
  1077 00002988 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1078 0000298A F60557DEFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1079 00002991 7413                <1>     jz .notAscii
  1080                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1081 00002993 50                  <1>     push rax        ;Save the original char count
  1082 00002994 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1083 00002997 B01A                <1>     mov al, EOF
  1084 00002999 F2AE                <1>     repne scasb     ;Loop thru now!
  1085 0000299B 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1086 0000299D 59                  <1>     pop rcx         ;Get the original read count into ecx
  1087 0000299E 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1088                              <1> ;Here if EOF found.
  1089 000029A0 FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1090 000029A2 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1091 000029A4 FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1092                              <1> .notAscii:
  1093 000029A6 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1094 000029A8 7428                <1>     jz .exitCleanup
  1095 000029AA 51                  <1>     push rcx    ;Save the number of bytes to write
  1096 000029AB 52                  <1>     push rdx    ;Save the buffer ptr
  1097 000029AC E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1098 000029B1 5A                  <1>     pop rdx
  1099 000029B2 59                  <1>     pop rcx
  1100 000029B3 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1101 000029B9 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1102 000029BE CD21                <1>     int 21h
  1103 000029C0 0F8256FFFFFF        <1>     jc .badExit
  1104 000029C6 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1105 000029C8 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1106 000029CE 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1107 000029D0 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1108                              <1> .exitCleanup:
  1109                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1110 000029D2 F6050FDEFFFF04      <1>     test byte [bCpFlg], ascDes
  1111 000029D9 7425                <1>     jz .ecNoEOF
  1112 000029DB 0FBF1DF4DDFFFF      <1>     movsx ebx, word [destHdl]
  1113 000029E2 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1114 000029E8 7416                <1>     je .ecNoEOF
  1115 000029EA 488B15E9DDFFFF      <1>     mov rdx, qword [cpBufPtr]
  1116 000029F1 C6021A              <1>     mov byte [rdx], EOF
  1117 000029F4 B901000000          <1>     mov ecx, 1
  1118 000029F9 B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1119 000029FE CD21                <1>     int 21h
  1120                              <1> .ecNoEOF:
  1121                              <1> ;Now close copy handles!
  1122 00002A00 668B1DCDDDFFFF      <1>     mov bx, word [sourceHdl]
  1123 00002A07 6681FBFFFF          <1>     cmp bx, -1
  1124 00002A0C 7410                <1>     je .beSkipSource
  1125 00002A0E B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1126 00002A13 CD21                <1>     int 21h
  1127 00002A15 66C705B6DDFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1128                              <1> .beSkipSource:
  1129 00002A1E 668B1DB1DDFFFF      <1>     mov bx, word [destHdl]
  1130 00002A25 6681FBFFFF          <1>     cmp bx, -1
  1131                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002A2A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002A2C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1132 00002A2D B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1133 00002A32 CD21                <1>     int 21h
  1134 00002A34 66C70599DDFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1135                              <1>     return
    13                              <2> %%_ret:
    14 00002A3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1136                              <1> 
  1137                              <1> .getWriteHandle:
  1138                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1139                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1140                              <1> ;Input: Nothing
  1141                              <1> ;Output: CF=NC: bx = Handle to the file
  1142                              <1> ;        CF=CY: File failed to open/create. 
  1143 00002A3E 0FB71D91DDFFFF      <1>     movzx ebx, word [destHdl]
  1144 00002A45 6681FBFFFF          <1>     cmp bx, -1
  1145 00002A4A 7402                <1>     je .gwHProceed
  1146 00002A4C F8                  <1>     clc     ;Clear the CF
  1147                              <1>     return
    13                              <2> %%_ret:
    14 00002A4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1148                              <1> .gwHProceed:
  1149                              <1> ;Here if the destination has not been opened yet!
  1150 00002A4E 488D15E1DCFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1151                              <1> ;Now we create/reopen the file here!
  1152 00002A55 F6058CDDFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1153 00002A5C 743E                <1>     jz .createFile
  1154                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1155                              <1> ;If this is more than file 0, we open
  1156 00002A5E 813D7CDDFFFF000000- <1>     cmp dword [dCpCnt], 0
  1156 00002A67 00                  <1>
  1157 00002A68 7432                <1>     je .createFile
  1158                              <1>     ;Now we open the file instead and append to the end
  1159 00002A6A B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1160 00002A6F CD21                <1>     int 21h
  1161                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A71 72(4D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1162 00002A73 FF056BDDFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1163 00002A79 66890556DDFFFF      <1>     mov word [destHdl], ax
  1164 00002A80 0FB7D8              <1>     movzx ebx, ax
  1165 00002A83 31C9                <1>     xor ecx, ecx
  1166 00002A85 31D2                <1>     xor edx, edx
  1167 00002A87 F6055ADDFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1168 00002A8E 7404                <1>     jz .gwHNoAscii
  1169 00002A90 FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1170 00002A92 FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1171                              <1> .gwHNoAscii:
  1172 00002A94 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1173 00002A99 CD21                <1>     int 21h
  1174                              <1>     return
    13                              <2> %%_ret:
    14 00002A9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1175                              <1> .createFile:
  1176 00002A9C B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1177 00002AA1 31C9                <1>     xor ecx, ecx    ;No file attributes
  1178 00002AA3 CD21                <1>     int 21h
  1179                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002AA5 72(9B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1180 00002AA7 FF0537DDFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1181 00002AAD 66890522DDFFFF      <1>     mov word [destHdl], ax
  1182 00002AB4 0FB7D8              <1>     movzx ebx, ax
  1183                              <1>     return
    13                              <2> %%_ret:
    14 00002AB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1184                              <1> 
  1185                              <1> erase:
  1186 00002AB8 F605EDD5FFFFFF      <1>     test byte [arg1Flg], -1
  1187 00002ABF 0F8443F2FFFF        <1>     jz badArgError
  1188 00002AC5 E8AE1A0000          <1>     call setDTA     ;Start by resetting the DTA
  1189 00002ACA E892190000          <1>     call buildCommandPath   ;Get the relative path to the file
  1190                              <1> .dirLp:
  1191 00002ACF 488D3D11DAFFFF      <1>     lea rdi, searchSpec
  1192 00002AD6 E8C9180000          <1>     call findLastPathComponant
  1193 00002ADB 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1194 00002ADE 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1195 00002AE2 B03F                <1>     mov al, "?"
  1196                              <1>     ;Store question marks in the name field
  1197 00002AE4 57                  <1>     push rdi
  1198 00002AE5 48FFC7              <1>     inc rdi ;Goto the first char
  1199 00002AE8 B90B000000          <1>     mov ecx, 11
  1200 00002AED F3AA                <1>     rep stosb
  1201 00002AEF 5F                  <1>     pop rdi
  1202 00002AF0 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1203 00002AF3 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1204 00002AF8 CD21                <1>     int 21h
  1205 00002AFA 3C01                <1>     cmp al, 1
  1206 00002AFC 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1207                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1208                              <1>     ;No dirs to handle in here
  1209 00002B02 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1210 00002B06 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1211 00002B09 E8BA180000          <1>     call FCBToAsciiz    ;Null terminates for free
  1212                              <1>     ;Count the number of ?'s, if 11, we print the message
  1213 00002B0E 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1214 00002B12 31C9                <1>     xor ecx, ecx
  1215                              <1> .wcScan:
  1216 00002B14 AC                  <1>     lodsb
  1217 00002B15 3C3F                <1>     cmp al, "?"
  1218 00002B17 7534                <1>     jne .endCount
  1219 00002B19 FFC1                <1>     inc ecx
  1220 00002B1B 81F90B000000        <1>     cmp ecx, 11
  1221 00002B21 75F1                <1>     jne .wcScan
  1222                              <1> .ynmsg:
  1223 00002B23 488D1559E0FFFF      <1>     lea rdx, ynMes
  1224 00002B2A E885150000          <1>     call printString
  1225 00002B2F B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1226 00002B31 CD21                <1>     int 21h ;Get char in al
  1227 00002B33 E89A170000          <1>     call ucChar ;Uppercase the char
  1228 00002B38 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1229 00002B3A 740C                <1>     je .endCount1
  1230 00002B3C 3C4E                <1>     cmp al, "N"
  1231                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002B3E 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002B40 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1232 00002B41 E867150000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1233 00002B46 EBDB                <1>     jmp short .ynmsg    
  1234                              <1> .endCount1:
  1235 00002B48 E860150000          <1>     call printCRLF
  1236                              <1> .endCount:
  1237                              <1>     ;Now we copy our search template pathstring to delPath
  1238 00002B4D 488D3D60DBFFFF      <1>     lea rdi, delPath
  1239 00002B54 488D358CD9FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1240 00002B5B E85E170000          <1>     call strcpy2         ;Copy the string over to delPath
  1241                              <1> .findFile:
  1242                              <1>     ;Now we find first/find next our way through the files
  1243 00002B60 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1244 00002B63 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1245 00002B65 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1246 00002B6A CD21                <1>     int 21h
  1247 00002B6C 0F82B1F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1248                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1249 00002B72 E82D180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1250 00002B77 488D350DD6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1251                              <1> .delNextFile:
  1252                              <1> ;rsi and rdi dont move here
  1253 00002B7E E83B170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1254 00002B83 488D152ADBFFFF      <1>     lea rdx, delPath
  1255 00002B8A B800410000          <1>     mov eax, 4100h  ;Delete File 
  1256 00002B8F CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1257 00002B91 488D154FD9FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1258 00002B98 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1259 00002B9D CD21                <1>     int 21h
  1260 00002B9F 73DD                <1>     jnc .delNextFile    
  1261 00002BA1 F8                  <1>     clc ;Clear carry to indicate success
  1262                              <1>     return
    13                              <2> %%_ret:
    14 00002BA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1263                              <1> .noWildcard:
  1264                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1265                              <1>     ; a \*.*<NUL> over the null terminator
  1266 00002BA3 488D153DD9FFFF      <1>     lea rdx, searchSpec
  1267 00002BAA B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1268 00002BAF B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1269 00002BB4 CD21                <1>     int 21h
  1270 00002BB6 0F8267F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1271 00002BBC F605BFD5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1272 00002BC3 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1273                              <1>     ;Else, we are dealing with a dir
  1274 00002BC5 4889D7              <1>     mov rdi, rdx
  1275 00002BC8 31C9                <1>     xor ecx, ecx
  1276 00002BCA FFC9                <1>     dec ecx
  1277 00002BCC F2AE                <1>     repne scasb ;Go to the end of the line!
  1278 00002BCE 48FFCF              <1>     dec rdi
  1279 00002BD1 0FB60551D4FFFF      <1>     movzx eax, byte [pathSep]
  1280 00002BD8 AA                  <1>     stosb
  1281 00002BD9 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1282 00002BDE AB                  <1>     stosd
  1283 00002BDF E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1284                              <1> .delMain:   ;Call with rdx -> buffer!
  1285 00002BE4 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1286 00002BE9 CD21                <1>     int 21h
  1287                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002BEB 73(A2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1288 00002BED 3C05                <1>     cmp al, errAccDen
  1289 00002BEF 0F84F8F0FFFF        <1>     je badAccError ;If the file is RO, fail!
  1290 00002BF5 E917F1FFFF          <1>     jmp badFileError
  1291                              <1>     return
    13                              <2> %%_ret:
    14 00002BFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1292                              <1> 
  1293                              <1> date:
  1294 00002BFB 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1295 00002C02 E8E6160000          <1>     call skipDelimiters
  1296 00002C07 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1297 00002C0A 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1298                              <1>     ;Else, we do interactive mode!
  1299 00002C0C 488D15F3DEFFFF      <1>     lea rdx, curDate
  1300 00002C13 B409                <1>     mov ah, 09h
  1301 00002C15 CD21                <1>     int 21h
  1302 00002C17 E8C7150000          <1>     call printFmtDate
  1303                              <1> .noCur:
  1304 00002C1C 488D15F4DEFFFF      <1>     lea rdx, newDate
  1305 00002C23 B409                <1>     mov ah, 09h
  1306 00002C25 CD21                <1>     int 21h
  1307 00002C27 488D1508DFFFFF      <1>     lea rdx, ukDate
  1308 00002C2E 488D05F4DEFFFF      <1>     lea rax, usDate
  1309 00002C35 488D1D07DFFFFF      <1>     lea rbx, jpDate
  1310 00002C3C 803DF1D3FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1311 00002C43 480F47D3            <1>     cmova rdx, rbx
  1312 00002C47 480F42D0            <1>     cmovb rdx, rax
  1313 00002C4B B409                <1>     mov ah, 09h
  1314 00002C4D CD21                <1>     int 21h
  1315                              <1> 
  1316 00002C4F 488D15E4D5FFFF      <1>     lea rdx, cpyBuffer
  1317 00002C56 C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1318 00002C59 B40A                <1>     mov ah, 0Ah
  1319 00002C5B CD21                <1>     int 21h
  1320 00002C5D 52                  <1>     push rdx
  1321 00002C5E E84A140000          <1>     call printCRLF
  1322 00002C63 5A                  <1>     pop rdx
  1323 00002C64 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1324                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C68 74(FA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1325                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1326 00002C6A 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1327                              <1> .goDate:
  1328 00002C6E 31C0                <1>     xor eax, eax    
  1329 00002C70 803DBDD3FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1330 00002C77 727B                <1>     jb .us
  1331 00002C79 0F87B7000000        <1>     ja .jpn
  1332                              <1>     ;Here for UK style dates
  1333 00002C7F E8AE180000          <1>     call getByte
  1334 00002C84 725D                <1>     jc .badDate
  1335 00002C86 880526DAFFFF        <1>     mov byte [td3], al  ;Store the day
  1336 00002C8C E80C010000          <1>     call .validSep
  1337 00002C91 7550                <1>     jne .badDate
  1338 00002C93 E89A180000          <1>     call getByte
  1339 00002C98 7249                <1>     jc .badDate
  1340 00002C9A 880513DAFFFF        <1>     mov byte [td4], al  ;Store month
  1341 00002CA0 E8F8000000          <1>     call .validSep
  1342 00002CA5 753C                <1>     jne .badDate
  1343 00002CA7 E892180000          <1>     call getNum
  1344 00002CAC E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1345 00002CB1 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1346 00002CB6 732B                <1>     jae .badDate
  1347 00002CB8 668905F1D9FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1348                              <1> .writeDate:
  1349 00002CBF E829160000          <1>     call skipDelimiters
  1350 00002CC4 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1351 00002CC7 751A                <1>     jne .badDate
  1352 00002CC9 0FB70DE0D9FFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1353 00002CD0 668B15DBD9FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1354 00002CD7 B8002B0000          <1>     mov eax, 2B00h
  1355 00002CDC CD21                <1>     int 21h
  1356 00002CDE 84C0                <1>     test al, al
  1357                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002CE0 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002CE2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1358                              <1> .badDate:
  1359 00002CE3 488D150DDEFFFF      <1>     lea rdx, badDate
  1360 00002CEA E8C5130000          <1>     call printString
  1361 00002CEF E928FFFFFF          <1>     jmp date.noCur
  1362                              <1> .us:
  1363 00002CF4 E839180000          <1>     call getByte
  1364 00002CF9 72E8                <1>     jc .badDate
  1365 00002CFB 8805B2D9FFFF        <1>     mov byte [td4], al  ;Store the month
  1366 00002D01 E897000000          <1>     call .validSep
  1367 00002D06 75DB                <1>     jne .badDate
  1368 00002D08 E825180000          <1>     call getByte
  1369 00002D0D 72D4                <1>     jc .badDate
  1370 00002D0F 88059DD9FFFF        <1>     mov byte [td3], al  ;Store day
  1371 00002D15 E883000000          <1>     call .validSep
  1372 00002D1A 75C7                <1>     jne .badDate
  1373 00002D1C E81D180000          <1>     call getNum
  1374 00002D21 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1375 00002D26 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1376 00002D2B 73B6                <1>     jae .badDate
  1377 00002D2D 6689057CD9FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1378                              <1> .writeHop:
  1379 00002D34 EB89                <1>     jmp short .writeDate
  1380                              <1> .jpn:
  1381 00002D36 E803180000          <1>     call getNum
  1382 00002D3B E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1383 00002D40 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1384 00002D45 739C                <1>     jae .badDate
  1385 00002D47 66890562D9FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1386 00002D4E E84A000000          <1>     call .validSep
  1387 00002D53 758E                <1>     jne .badDate
  1388 00002D55 E8D8170000          <1>     call getByte
  1389 00002D5A 7287                <1>     jc .badDate
  1390 00002D5C 880550D9FFFF        <1>     mov byte [td3], al  ;Store the day
  1391 00002D62 E836000000          <1>     call .validSep
  1392 00002D67 0F8576FFFFFF        <1>     jne .badDate
  1393 00002D6D E8C0170000          <1>     call getByte
  1394 00002D72 0F826BFFFFFF        <1>     jc .badDate
  1395 00002D78 880535D9FFFF        <1>     mov byte [td4], al  ;Store month
  1396 00002D7E EBB4                <1>     jmp short .writeHop
  1397                              <1> .doYear:
  1398 00002D80 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1399                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002D85 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002D87 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1400                              <1> ;If the user specifies 80-99 it means 1980-1999
  1401                              <1> ;If the user specifies 00-79 it means 2000-2079
  1402 00002D88 BBD0070000          <1>     mov ebx, 2000
  1403 00002D8D B96C070000          <1>     mov ecx, 1900
  1404 00002D92 3D50000000          <1>     cmp eax, 80     
  1405 00002D97 0F42CB              <1>     cmovb ecx, ebx
  1406 00002D9A 01C8                <1>     add eax, ecx
  1407                              <1>     return
    13                              <2> %%_ret:
    14 00002D9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1408                              <1> .validSep:
  1409 00002D9D AC                  <1>     lodsb           ;Get the char and return
  1410 00002D9E 3C2E                <1>     cmp al, "."
  1411                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DA0 74(9C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1412 00002DA2 3C2F                <1>     cmp al, "/"
  1413                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DA4 74(9C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1414 00002DA6 3C2D                <1>     cmp al, "-"
  1415                              <1>     return
    13                              <2> %%_ret:
    14 00002DA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1416                              <1> 
  1417                              <1> time:
  1418 00002DA9 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1419 00002DB0 E838150000          <1>     call skipDelimiters
  1420 00002DB5 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1421 00002DB8 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1422 00002DBA 488D159EDDFFFF      <1>     lea rdx, curTime
  1423 00002DC1 B409                <1>     mov ah, 09h
  1424 00002DC3 CD21                <1>     int 21h
  1425 00002DC5 E8B0130000          <1>     call printFmtTime
  1426                              <1> .noCur:
  1427 00002DCA 488D159FDDFFFF      <1>     lea rdx, newTime
  1428 00002DD1 B409                <1>     mov ah, 09h
  1429 00002DD3 CD21                <1>     int 21h
  1430                              <1> 
  1431 00002DD5 488D15DCD3FFFF      <1>     lea rdx, inBuffer
  1432 00002DDC C60280              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1433 00002DDF B40A                <1>     mov ah, 0Ah
  1434 00002DE1 CD21                <1>     int 21h
  1435 00002DE3 52                  <1>     push rdx
  1436 00002DE4 488D15FFDAFFFF      <1>     lea rdx, crlf
  1437 00002DEB B409                <1>     mov ah, 09h
  1438 00002DED CD21                <1>     int 21h
  1439 00002DEF 5A                  <1>     pop rdx
  1440 00002DF0 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1441                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DF4 74(A8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1442 00002DF6 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1443                              <1> .goTime:
  1444 00002DFA C705ACD8FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1444 00002E03 00                  <1>
  1445 00002E04 31C0                <1>     xor eax, eax   
  1446 00002E06 E827170000          <1>     call getByte
  1447 00002E0B 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1448 00002E11 88059AD8FFFF        <1>     mov byte [td2], al  ;Save hours
  1449 00002E17 E89A000000          <1>     call .validsep
  1450 00002E1C 0F8583000000        <1>     jne .badTime
  1451 00002E22 E80B170000          <1>     call getByte
  1452 00002E27 727C                <1>     jc .badTime
  1453 00002E29 880581D8FFFF        <1>     mov byte [td1], al  ;Save minutes
  1454 00002E2F E882000000          <1>     call .validsep
  1455 00002E34 740F                <1>     je .goSec
  1456 00002E36 48FFCE              <1>     dec rsi ;Go back a char
  1457 00002E39 E8AF140000          <1>     call skipDelimiters ;Skip any delimiters
  1458 00002E3E 803E0D              <1>     cmp byte [rsi], CR
  1459 00002E41 743E                <1>     je .setTime
  1460 00002E43 EB60                <1>     jmp short .badTime
  1461                              <1> .goSec:
  1462 00002E45 E878000000          <1>     call .checkNum
  1463 00002E4A 7259                <1>     jc .badTime
  1464 00002E4C E8E1160000          <1>     call getByte
  1465 00002E51 7252                <1>     jc .badTime
  1466 00002E53 88055AD8FFFF        <1>     mov byte [td4], al  ;Save seconds
  1467 00002E59 AC                  <1>     lodsb       ;Move rsi forwards
  1468 00002E5A 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1469 00002E5C 740F                <1>     je .goMsec
  1470 00002E5E 48FFCE              <1>     dec rsi ;Go back a char
  1471 00002E61 E887140000          <1>     call skipDelimiters ;Skip any delimiters
  1472 00002E66 803E0D              <1>     cmp byte [rsi], CR
  1473 00002E69 7416                <1>     je .setTime
  1474 00002E6B EB38                <1>     jmp short .badTime
  1475                              <1> .goMsec:
  1476 00002E6D E850000000          <1>     call .checkNum
  1477 00002E72 7231                <1>     jc .badTime
  1478 00002E74 E8B9160000          <1>     call getByte
  1479 00002E79 722A                <1>     jc .badTime
  1480 00002E7B 880531D8FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1481                              <1> .setTime:
  1482 00002E81 E867140000          <1>     call skipDelimiters
  1483 00002E86 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1484 00002E89 751A                <1>     jne .badTime
  1485 00002E8B 0FB70D1ED8FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1486 00002E92 0FB71519D8FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1487 00002E99 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1488 00002E9E CD21                <1>     int 21h
  1489 00002EA0 A8FF                <1>     test al, -1
  1490                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002EA2 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002EA4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1491                              <1> .badTime:
  1492 00002EA5 488D15A4DCFFFF      <1>     lea rdx, badTime
  1493 00002EAC E803120000          <1>     call printString
  1494 00002EB1 E914FFFFFF          <1>     jmp time.noCur
  1495                              <1> .validsep:
  1496 00002EB6 AC                  <1>     lodsb
  1497 00002EB7 3A0584D1FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1498                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002EBD 74(A4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1499 00002EBF 3C2E                <1>     cmp al, "."
  1500                              <1>     return
    13                              <2> %%_ret:
    14 00002EC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1501                              <1> .checkNum:
  1502 00002EC2 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1503 00002EC3 48FFCE              <1>     dec rsi
  1504 00002EC6 3C30                <1>     cmp al, "0"
  1505 00002EC8 7206                <1>     jb .cnbad
  1506 00002ECA 3C39                <1>     cmp al, "9"
  1507 00002ECC 7702                <1>     ja .cnbad
  1508 00002ECE F8                  <1>     clc
  1509                              <1>     return
    13                              <2> %%_ret:
    14 00002ECF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1510                              <1> .cnbad:
  1511 00002ED0 F9                  <1>     stc
  1512                              <1>     return
    13                              <2> %%_ret:
    14 00002ED1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1513                              <1> ctty:
  1514 00002ED2 F605D3D1FFFFFF      <1>     test byte [arg1Flg], -1
  1515 00002ED9 0F8429EEFFFF        <1>     jz badArgError
  1516 00002EDF F605C9D1FFFFFF      <1>     test byte [arg2Flg], -1
  1517 00002EE6 0F851CEEFFFF        <1>     jnz badArgError
  1518 00002EEC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1519 00002EF3 0FB605B3D1FFFF      <1>     movzx eax, byte [arg1Off]
  1520 00002EFA 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1521 00002EFD 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1522 00002F01 750F                <1>     jne .noDrive
  1523 00002F03 0FB605A4D1FFFF      <1>     movzx eax, byte [arg1FCBret]
  1524 00002F0A 3CFF                <1>     cmp al, -1
  1525 00002F0C 0F84EDEDFFFF        <1>     je badDriveError
  1526                              <1> .noDrive:
  1527                              <1>     ;Now we open the provided file
  1528 00002F12 E862150000          <1>     call copyArgumentToSearchSpec
  1529 00002F17 488D15C9D5FFFF      <1>     lea rdx, searchSpec
  1530 00002F1E B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1531 00002F23 CD21                <1>     int 21h
  1532 00002F25 0F82E6EDFFFF        <1>     jc badFileError
  1533 00002F2B 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1534 00002F2E B800440000          <1>     mov eax, 4400h  ;Get device word
  1535 00002F33 CD21                <1>     int 21h
  1536 00002F35 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1537 00002F38 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1538                              <1>     ;Now we set this handle to be STDIO
  1539 00002F3A 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1540 00002F3D 30F6                <1>     xor dh, dh
  1541 00002F3F B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1542 00002F44 CD21                <1>     int 21h
  1543                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1544 00002F46 31C9                <1>     xor ecx, ecx    ;STDIN
  1545 00002F48 B446                <1>     mov ah, 46h
  1546 00002F4A CD21                <1>     int 21h
  1547 00002F4C FFC1                <1>     inc ecx         ;STDOUT
  1548 00002F4E B446                <1>     mov ah, 46h
  1549 00002F50 CD21                <1>     int 21h
  1550 00002F52 FFC1                <1>     inc ecx         ;STDERR
  1551 00002F54 B446                <1>     mov ah, 46h
  1552 00002F56 CD21                <1>     int 21h
  1553 00002F58 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
  1554 00002F5A CD21                <1>     int 21h
  1555                              <1>     return
    13                              <2> %%_ret:
    14 00002F5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1556                              <1> .badCharDev:
  1557 00002F5D 488D151DDDFFFF      <1>     lea rdx, badDev
  1558 00002F64 B409                <1>     mov ah, 09h
  1559 00002F66 CD21                <1>     int 21h
  1560 00002F68 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1561 00002F6A CD21                <1>     int 21h
  1562                              <1>     return
    13                              <2> %%_ret:
    14 00002F6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1563                              <1> 
  1564                              <1> cls:  
  1565 00002F6D B800440000          <1>     mov eax, 4400h  ;Get device info
  1566 00002F72 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1567 00002F77 CD21                <1>     int 21h         ;in dx
  1568 00002F79 F7C280000000        <1>     test edx, devCharDev
  1569 00002F7F 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1570 00002F81 F7C210000000        <1>     test edx, charDevFastOut
  1571 00002F87 743E                <1>     jz .doAnsi
  1572                              <1>     ;Test if Int 29h uses Int 30h
  1573                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1574                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1575 00002F89 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1576 00002F8E CD21                <1>     int 21h
  1577                              <1> .biosCheck:
  1578 00002F90 66813BCD30          <1>     cmp word [rbx], 30CDh
  1579 00002F95 740C                <1>     je .biosConfirmed
  1580 00002F97 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1581 00002F9C 7429                <1>     je .doAnsi
  1582 00002F9E 48FFC3              <1>     inc rbx
  1583 00002FA1 EBED                <1>     jmp short .biosCheck
  1584                              <1> .biosConfirmed:
  1585                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1586 00002FA3 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1587 00002FA5 31DB                <1>     xor ebx, ebx
  1588 00002FA7 CD30                <1>     int 30h
  1589 00002FA9 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1590 00002FAB CD30                <1>     int 30h
  1591 00002FAD 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1592 00002FB0 FECA                <1>     dec dl
  1593 00002FB2 B619                <1>     mov dh, 25  ;Number of rows is standard
  1594 00002FB4 31C0                <1>     xor eax, eax
  1595 00002FB6 89C1                <1>     mov ecx, eax
  1596 00002FB8 B707                <1>     mov bh, 7   ;Screen attributes
  1597 00002FBA B406                <1>     mov ah, 6   ;Scroll
  1598 00002FBC CD30                <1>     int 30h
  1599 00002FBE 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1600 00002FC0 B700                <1>     mov bh, 0   ;Page 0
  1601 00002FC2 B402                <1>     mov ah, 2
  1602 00002FC4 CD30                <1>     int 30h
  1603                              <1>     return
    13                              <2> %%_ret:
    14 00002FC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1604                              <1> .doAnsi:
  1605                              <1> ;4 chars in the ansi routine
  1606                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1607                              <1> ; understand ANSI codes
  1608 00002FC7 488D353ADFFFFF      <1>     lea rsi, ansiCls
  1609 00002FCE B904000000          <1>     mov ecx, 4
  1610 00002FD3 B406                <1>     mov ah, 06h ;Raw char output
  1611                              <1> .ansiLp:
  1612 00002FD5 AC                  <1>     lodsb   ;Get the char in 
  1613 00002FD6 88C2                <1>     mov dl, al
  1614 00002FD8 CD21                <1>     int 21h
  1615 00002FDA FFC9                <1>     dec ecx
  1616 00002FDC 75F7                <1>     jnz .ansiLp
  1617                              <1>     return
    13                              <2> %%_ret:
    14 00002FDE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1618                              <1> 
  1619                              <1> break:
  1620 00002FDF F605C6D0FFFFFF      <1>     test byte [arg1Flg], -1
  1621 00002FE6 752D                <1>     jnz .argumentProvided
  1622                              <1>     ;Here we just get the status of break
  1623 00002FE8 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1624 00002FED CD21                <1>     int 21h
  1625 00002FEF 88D3                <1>     mov bl, dl
  1626 00002FF1 488D152BDDFFFF      <1>     lea rdx, breakIs
  1627 00002FF8 B409                <1>     mov ah, 09h
  1628 00002FFA CD21                <1>     int 21h
  1629 00002FFC 488D151BDDFFFF      <1>     lea rdx, onMes
  1630 00003003 488D0D0EDDFFFF      <1>     lea rcx, offMes
  1631 0000300A 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1632 0000300C 480F44D1            <1>     cmovz rdx, rcx
  1633 00003010 B409                <1>     mov ah, 09h
  1634 00003012 CD21                <1>     int 21h
  1635                              <1>     return
    13                              <2> %%_ret:
    14 00003014 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1636                              <1> .argumentProvided:
  1637 00003015 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1638 00003019 AD                  <1>     lodsd   ;Read the word
  1639 0000301A 89C3                <1>     mov ebx, eax
  1640 0000301C 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1641 00003021 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1642 00003024 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1643 00003029 7416                <1>     je .maybeOn
  1644 0000302B 663D4F46            <1>     cmp ax, "OF"
  1645 0000302F 7523                <1>     jne .badOnOff
  1646 00003031 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1647 00003036 6681FB4620          <1>     cmp bx, "F "
  1648 0000303B 7517                <1>     jne .badOnOff
  1649                              <1>     ;Set off
  1650 0000303D 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1651 0000303F EB0B                <1>     jmp short .setBreak
  1652                              <1> .maybeOn:
  1653 00003041 663D4F4E            <1>     cmp ax, "ON"
  1654 00003045 750D                <1>     jne .badOnOff
  1655                              <1>     ;Set on
  1656 00003047 BA01000000          <1>     mov edx, 1
  1657                              <1> .setBreak:
  1658 0000304C B801330000          <1>     mov eax, 3301h  ;Set break
  1659 00003051 CD21                <1>     int 21h
  1660                              <1>     return
    13                              <2> %%_ret:
    14 00003053 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1661                              <1> .badOnOff:
  1662 00003054 488D15BDDEFFFF      <1>     lea rdx, badOnOff
  1663 0000305B B409                <1>     mov ah, 09h
  1664 0000305D CD21                <1>     int 21h
  1665                              <1>     return
    13                              <2> %%_ret:
    14 0000305F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1666                              <1> 
  1667                              <1> verify:
  1668 00003060 F60545D0FFFFFF      <1>     test byte [arg1Flg], -1
  1669 00003067 752D                <1>     jnz .argumentProvided
  1670                              <1>     ;Here we just get the status of break
  1671 00003069 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1672 0000306E CD21                <1>     int 21h
  1673 00003070 88C3                <1>     mov bl, al
  1674 00003072 488D15B4DCFFFF      <1>     lea rdx, verifyIs
  1675 00003079 B409                <1>     mov ah, 09h
  1676 0000307B CD21                <1>     int 21h
  1677 0000307D 488D159ADCFFFF      <1>     lea rdx, onMes
  1678 00003084 488D0D8DDCFFFF      <1>     lea rcx, offMes
  1679 0000308B 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1680 0000308D 480F44D1            <1>     cmovz rdx, rcx
  1681 00003091 B409                <1>     mov ah, 09h
  1682 00003093 CD21                <1>     int 21h
  1683                              <1>     return
    13                              <2> %%_ret:
    14 00003095 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1684                              <1> .argumentProvided:
  1685 00003096 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1686 0000309A AD                  <1>     lodsd   ;Read the word
  1687 0000309B 89C3                <1>     mov ebx, eax
  1688 0000309D 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1689 000030A2 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1690 000030A5 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1691 000030AA 7416                <1>     je .maybeOn
  1692 000030AC 663D4F46            <1>     cmp ax, "OF"
  1693 000030B0 751F                <1>     jne .badOnOff
  1694 000030B2 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1695 000030B7 6681FB4620          <1>     cmp bx, "F "
  1696 000030BC 7513                <1>     jne .badOnOff
  1697                              <1>     ;Set off
  1698 000030BE 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1699 000030C0 EB0A                <1>     jmp short .setVerify
  1700                              <1> .maybeOn:
  1701 000030C2 663D4F4E            <1>     cmp ax, "ON"
  1702 000030C6 7509                <1>     jne .badOnOff
  1703                              <1>     ;Set on
  1704 000030C8 31C0                <1>     xor eax, eax
  1705 000030CA FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1706                              <1> .setVerify:
  1707 000030CC B42E                <1>     mov ah, 2Eh  ;Set Verify
  1708 000030CE CD21                <1>     int 21h
  1709                              <1>     return
    13                              <2> %%_ret:
    14 000030D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1710                              <1> .badOnOff:
  1711 000030D1 488D1540DEFFFF      <1>     lea rdx, badOnOff
  1712 000030D8 B409                <1>     mov ah, 09h
  1713 000030DA CD21                <1>     int 21h
  1714                              <1>     return
    13                              <2> %%_ret:
    14 000030DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1715                              <1> 
  1716                              <1> rename:
  1717 000030DD F605C8CFFFFFFF      <1>     test byte [arg1Flg], -1
  1718 000030E4 0F841EECFFFF        <1>     jz badArgError
  1719 000030EA F605BECFFFFFFF      <1>     test byte [arg2Flg], -1
  1720 000030F1 0F8411ECFFFF        <1>     jz badArgError    
  1721                              <1>     ;Initialise the variables!
  1722 000030F7 488D35B6D5FFFF      <1>     lea rsi, srcSpec
  1723 000030FE 488935B3D6FFFF      <1>     mov qword [srcPtr], rsi
  1724 00003105 488D352AD6FFFF      <1>     lea rsi, destSpec
  1725 0000310C 488935ADD6FFFF      <1>     mov qword [destPtr], rsi
  1726                              <1>     ;Check the second path is just a filename!
  1727 00003113 0FB60596CFFFFF      <1>     movzx eax, byte [arg2Off]
  1728 0000311A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1729 00003121 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1730 00003124 488D3DBCD3FFFF      <1>     lea rdi, searchSpec
  1731 0000312B 57                  <1>     push rdi
  1732 0000312C E8ED120000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1733 00003131 5F                  <1>     pop rdi
  1734 00003132 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1735 00003136 0F84CCEBFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1736 0000313C 4889FE              <1>     mov rsi, rdi
  1737                              <1> .destScan:
  1738 0000313F AC                  <1>     lodsb   ;Get the char
  1739 00003140 3A05E3CEFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1740 00003146 0F84BCEBFFFF        <1>     je badArgError
  1741 0000314C 84C0                <1>     test al, al
  1742 0000314E 75EF                <1>     jnz .destScan
  1743                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1744 00003150 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1745 00003154 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1745 0000315D 3F                  <1>
  1746 0000315E B903000000          <1>     mov ecx, 3  ;24 bytes
  1747 00003163 F348AB              <1>     rep stosq
  1748 00003166 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1749 00003167 488D3579D3FFFF      <1>     lea rsi, searchSpec
  1750 0000316E 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1751 00003172 B80D290000          <1>     mov eax, 290Dh
  1752 00003177 CD21                <1>     int 21h     
  1753 00003179 50                  <1>     push rax    ;Save the WC signature
  1754 0000317A E8E2120000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1755 0000317F 488D3D61D3FFFF      <1>     lea rdi, searchSpec
  1756 00003186 E819120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1757 0000318B 4889FE              <1>     mov rsi, rdi
  1758 0000318E 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1759 00003191 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1760 00003195 B80D290000          <1>     mov eax, 290Dh
  1761 0000319A CD21                <1>     int 21h
  1762 0000319C 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1763 0000319D 88CC                <1>     mov ah, cl
  1764 0000319F 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1765 000031A2 0F84EC000000        <1>     jz .noWC
  1766 000031A8 488D3538D3FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1767                              <1>     ;Now we check if we have a path to actually handle
  1768 000031AF 4839F3              <1>     cmp rbx, rsi
  1769 000031B2 7444                <1>     je .noPath
  1770 000031B4 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1771 000031B8 488D3528D3FFFF      <1>     lea rsi, searchSpec
  1772 000031BF 488D3DEED4FFFF      <1>     lea rdi, srcSpec
  1773 000031C6 56                  <1>     push rsi
  1774 000031C7 E8E3100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1775 000031CC 5E                  <1>     pop rsi
  1776 000031CD 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1777 000031D0 8A0553CEFFFF        <1>     mov al, byte [pathSep]
  1778 000031D6 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1779 000031D7 48893DDAD5FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1780 000031DE 488D3D51D5FFFF      <1>     lea rdi, destSpec
  1781 000031E5 E8C5100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1782 000031EA 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1783 000031ED AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1784 000031EE 48893DCBD5FFFF      <1>     mov qword [destPtr], rdi
  1785 000031F5 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1786                              <1> .noPath:
  1787                              <1>     ;Now we have where to copy the files to, we can start our work!
  1788 000031F8 E87B130000          <1>     call setDTA
  1789 000031FD 488D15E3D2FFFF      <1>     lea rdx, searchSpec
  1790 00003204 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1791 00003206 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1792 0000320B CD21                <1>     int 21h
  1793 0000320D 0F8207EBFFFF        <1>     jc badDupFnf    ;If no file was found!
  1794                              <1> .wcLoop:
  1795                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1796 00003213 488D3571CFFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1797 0000321A 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1798 0000321E B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1799 00003223 CD21                <1>     int 21h 
  1800                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1801 00003225 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1802 00003229 488D3D98D5FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1803 00003230 57                  <1>     push rdi
  1804 00003231 48A5                <1>     movsq
  1805 00003233 66A5                <1>     movsw
  1806 00003235 A4                  <1>     movsb
  1807 00003236 5F                  <1>     pop rdi
  1808 00003237 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1809 0000323B B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1810                              <1> .wcNameMake:
  1811 00003240 AC                  <1>     lodsb   ;Get the char from the source string
  1812 00003241 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1813 00003244 7502                <1>     jne .noStore    ;Dont store the char there
  1814 00003246 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1815                              <1> .noStore:
  1816 00003248 48FFC7              <1>     inc rdi ;Goto next char position
  1817 0000324B FFC9                <1>     dec ecx
  1818 0000324D 75F1                <1>     jnz .wcNameMake
  1819                              <1> ;renName now has the FCB name for the file we wish to make!
  1820                              <1> ;Now make the two paths!
  1821 0000324F 488D3535CFFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1822 00003256 488B3D5BD5FFFF      <1>     mov rdi, qword [srcPtr]
  1823 0000325D E84D100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1824 00003262 488D355FD5FFFF      <1>     lea rsi, renName
  1825 00003269 488B3D50D5FFFF      <1>     mov rdi, qword [destPtr]
  1826 00003270 E853110000          <1>     call FCBToAsciiz
  1827 00003275 488D1538D4FFFF      <1>     lea rdx, srcSpec
  1828 0000327C 488D3DB3D4FFFF      <1>     lea rdi, destSpec
  1829 00003283 B800560000          <1>     mov eax, 5600h
  1830 00003288 CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1831 0000328A B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1832 0000328F CD21                <1>     int 21h
  1833 00003291 7380                <1>     jnc .wcLoop     ;And process it too!
  1834                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00003293 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1835                              <1> .noWC:
  1836 00003294 E8C8110000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1837 00003299 0FB60510CEFFFF      <1>     movzx eax, byte [arg2Off]
  1838 000032A0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1839 000032A7 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1840 000032AA 488D3D85D4FFFF      <1>     lea rdi, destSpec
  1841 000032B1 57                  <1>     push rdi
  1842 000032B2 E867110000          <1>     call cpDelimPathToBufz
  1843 000032B7 5F                  <1>     pop rdi
  1844 000032B8 488D1528D2FFFF      <1>     lea rdx, searchSpec
  1845 000032BF B800560000          <1>     mov eax, 5600h
  1846 000032C4 CD21                <1>     int 21h
  1847                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000032C6 73(93)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1848 000032C8 E94DEAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1849                              <1> 
  1850                              <1> 
  1851                              <1> touch:
  1852                              <1> ;Temporarily used to create files
  1853 000032CD F605D8CDFFFFFF      <1>     test byte [arg1Flg], -1
  1854 000032D4 0F842EEAFFFF        <1>     jz badArgError
  1855 000032DA E882110000          <1>     call buildCommandPath
  1856 000032DF 488D1501D2FFFF      <1>     lea rdx, searchSpec
  1857 000032E6 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1858 000032EB 31C9                <1>     xor ecx, ecx
  1859 000032ED CD21                <1>     int 21h
  1860 000032EF 721D                <1>     jc .touch1
  1861                              <1> .touchClose:
  1862 000032F1 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1863 000032F4 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1864 000032F9 CD2F                <1>     int 2fh
  1865 000032FB 89C1                <1>     mov ecx, eax    ;Move the time here
  1866 000032FD 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1867 000032FF B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1868 00003304 CD21                <1>     int 21h
  1869 00003306 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1870 0000330B CD21                <1>     int 21h
  1871                              <1>     return
    13                              <2> %%_ret:
    14 0000330D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1872                              <1> .touch1:
  1873 0000330E 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1874 00003310 7509                <1>     jne .touchError ;If not, this is a proper error!
  1875 00003312 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1876 00003317 CD21                <1>     int 21h
  1877 00003319 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1878                              <1> .touchError:
  1879 0000331B 3C03                <1>     cmp al, errPnf
  1880 0000331D 0F84E5E9FFFF        <1>     je badArgError
  1881 00003323 3C02                <1>     cmp al, errFnf
  1882 00003325 0F84F8E9FFFF        <1>     je badFnf
  1883 0000332B E9BDE9FFFF          <1>     jmp badAccError
  1884                              <1>     
  1885                              <1> 
  1886                              <1> join:
  1887                              <1> ;Mock join command, to test join. Make an external command.
  1888                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1889 00003330 F605AF000000FF      <1>     test byte [.joinOn], -1
  1890 00003337 743D                <1>     jz .okJoin
  1891                              <1> .joindisable:
  1892 00003339 B800520000          <1>     mov eax, 5200h  
  1893 0000333E CD21                <1>     int 21h
  1894                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1895 00003340 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1896 00003345 CD2A                <1>     int 2Ah
  1897 00003347 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1898 0000334B 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1899 0000334F 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1900 00003355 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1901 00003358 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1902 0000335C FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1903 0000335F B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1904 00003364 CD2A                <1>     int 2Ah
  1905 00003366 C6057900000000      <1>     mov byte [.joinOn], 0
  1906 0000336D 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1907 00003374 EB45                <1>     jmp short .joinExit
  1908                              <1> .okJoin:
  1909 00003376 C60569000000FF      <1>     mov byte [.joinOn], -1
  1910 0000337D B800520000          <1>     mov eax, 5200h  
  1911 00003382 CD21                <1>     int 21h
  1912 00003384 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1913 00003388 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1914                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1915 0000338C B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1916 00003391 CD2A                <1>     int 2Ah
  1917 00003393 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1918 00003399 4889DF              <1>     mov rdi, rbx
  1919 0000339C 488D3544000000      <1>     lea rsi, .joinPath
  1920 000033A3 B90C000000          <1>     mov ecx, .joinPathL
  1921 000033A8 F3A4                <1>     rep movsb   ;Copy chars over
  1922 000033AA FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1923 000033AD B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1924 000033B2 CD2A                <1>     int 2Ah
  1925 000033B4 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1926                              <1> .joinExit:
  1927 000033BB B800090000          <1>     mov eax, 0900h
  1928 000033C0 CD21                <1>     int 21h
  1929                              <1>     return
    13                              <2> %%_ret:
    14 000033C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1930 000033C3 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1930 000033CC 61626C65640D0A24    <1>
  1931 000033D4 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1931 000033DD 7361626C65640D0A24  <1>
  1932 000033E6 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1933 000033E7 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1933 000033F0 535400              <1>
  1934                              <1> .joinPathL  equ $ - .joinPath 
  1935                              <1> 
  1936                              <1> subst:
  1937                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1938                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1939 000033F3 F605D3000000FF      <1>     test byte [.substOn], -1
  1940 000033FA 7443                <1>     jz .okSubst
  1941                              <1> .substdisable:
  1942 000033FC B800520000          <1>     mov eax, 5200h  
  1943 00003401 CD21                <1>     int 21h
  1944                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1945 00003403 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1946 00003408 CD2A                <1>     int 2Ah
  1947 0000340A 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1948 0000340E 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1949 00003415 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1950 0000341B C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1951 0000341E C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1952 00003422 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1953 00003428 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1954 0000342D CD2A                <1>     int 2Ah
  1955 0000342F C6059700000000      <1>     mov byte [.substOn], 0
  1956 00003436 488D157D000000      <1>     lea rdx, .substDisableMsg
  1957 0000343D EB61                <1>     jmp short .substExit
  1958                              <1> .okSubst:
  1959 0000343F C60587000000FF      <1>     mov byte [.substOn], -1
  1960 00003446 B800520000          <1>     mov eax, 5200h  
  1961 0000344B CD21                <1>     int 21h
  1962 0000344D B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1963 00003452 CD2A                <1>     int 2Ah
  1964 00003454 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1965 00003458 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1966 0000345F 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1967 00003463 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1968 0000346A 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1969 0000346E C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1970                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1971 00003475 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1972 0000347B 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1973 00003481 4889DF              <1>     mov rdi, rbx
  1974 00003484 488D3543000000      <1>     lea rsi, .substPath
  1975 0000348B B90C000000          <1>     mov ecx, .substPathL
  1976 00003490 F3A4                <1>     rep movsb   ;Copy chars over
  1977 00003492 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1978 00003497 CD2A                <1>     int 2Ah
  1979 00003499 488D1508000000      <1>     lea rdx, .substEnableMsg
  1980                              <1> .substExit:
  1981 000034A0 B800090000          <1>     mov eax, 0900h
  1982 000034A5 CD21                <1>     int 21h
  1983                              <1>     return
    13                              <2> %%_ret:
    14 000034A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1984 000034A8 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1984 000034B1 6E61626C65640D0A24  <1>
  1985 000034BA 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1985 000034C3 697361626C65640D0A- <1>
  1985 000034CC 24                  <1>
  1986 000034CD 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1987 000034CE 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1987 000034D7 535400              <1>
  1988                              <1> .substPathL  equ $ - .substPath 
  1989                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1990                              <1> truename:
  1991 000034DA F605CBCBFFFFFF      <1>     test byte [arg1Flg], -1
  1992 000034E1 0F8421E8FFFF        <1>     jz badArgError
  1993 000034E7 E8750F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1994 000034EC 488D35F4CFFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1995 000034F3 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1996 000034F6 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1997 000034FB CD21                <1>     int 21h
  1998 000034FD 730D                <1>     jnc .writePath
  1999 000034FF 3C02                <1>     cmp al, errFnf
  2000 00003501 0F840AE8FFFF        <1>     je badFileError
  2001 00003507 E9EAE7FFFF          <1>     jmp badParamError
  2002                              <1> .writePath:
  2003 0000350C 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  2004 0000350F B9FFFFFFFF          <1>     mov ecx, -1
  2005 00003514 30C0                <1>     xor al, al
  2006 00003516 F2AE                <1>     repne scasb     ;Get the new len
  2007 00003518 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  2008 0000351A FFC9                <1>     dec ecx
  2009 0000351C BB01000000          <1>     mov ebx, 01
  2010 00003521 B440                <1>     mov ah, 40h
  2011 00003523 CD21                <1>     int 21h
  2012 00003525 E8830B0000          <1>     call printCRLF
  2013                              <1>     return
    13                              <2> %%_ret:
    14 0000352A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2014                              <1> 
  2015                              <1> label:
  2016                              <1> ;Displays/Changes/Deletes the file label
  2017 0000352B 488D1508000000      <1>     lea rdx, .l1
  2018 00003532 B800090000          <1>     mov eax, 0900h
  2019 00003537 CD21                <1>     int 21h
  2020                              <1>     return
    13                              <2> %%_ret:
    14 00003539 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2021 0000353A 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  2021 00003543 6E20756E696D706C65- <1>
  2021 0000354C 6D656E7465640D0A24  <1>
  2022                              <1> 
  2023                              <1> mklbl:
  2024                              <1>     ;lea rdx, .l1
  2025                              <1>     ;mov cx, 08h ;Make a label
  2026                              <1>     ;mov eax, 3C00h
  2027                              <1>     ;int 21h
  2028                              <1> 
  2029                              <1>     ;mov ebx, eax
  2030                              <1>     ;mov eax, 3E00h  ;Close the handle
  2031                              <1>     ;int 21h
  2032                              <1>     ;return
  2033                              <1> 
  2034                              <1> ;.l1: db "TESTLABEL",0
  2035 00003555 488D1508000000      <1>     lea rdx, .l1
  2036 0000355C B800160000          <1>     mov eax, 1600h  ;Create FCB
  2037 00003561 CD21                <1>     int 21h
  2038                              <1>     return
    13                              <2> %%_ret:
    14 00003563 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2039                              <1> .l1:
  2040                              <1>     istruc exFcb
  2041 00003564 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2042 00003565 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2043 0000356B 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2044 0000356C 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  2045 00003574 4C2020              <1>     at exFcb.fileext,   db "L  "
  2046 00003577 00000000            <1>     at exFcb.curBlock,  dd 0
  2047 0000357B 00<rep 15h>         <1>     iend 
  2048                              <1> rmlbl:
  2049 00003590 488D1508000000      <1>     lea rdx, .l1
  2050 00003597 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  2051 0000359C CD21                <1>     int 21h
  2052                              <1>     return
    13                              <2> %%_ret:
    14 0000359E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2053                              <1> .l1:    ;FCB to volume label
  2054                              <1>     istruc exFcb
  2055 0000359F FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2056 000035A0 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2057 000035A6 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2058 000035A7 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  2059 000035AF 3F3F3F              <1>     at exFcb.fileext,   db "???"
  2060 000035B2 00000000            <1>     at exFcb.curBlock,  dd 0
  2061 000035B6 00<rep 15h>         <1>     iend 
  2062                              <1> 
  2063                              <1> rnlbl:
  2064 000035CB 488D1508000000      <1>     lea rdx, .l1
  2065 000035D2 B800170000          <1>     mov eax, 1700h
  2066 000035D7 CD21                <1>     int 21h
  2067                              <1>     return
    13                              <2> %%_ret:
    14 000035D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2068                              <1> .l1:
  2069                              <1>     istruc exRenFcb
  2070 000035DA FF                  <1>     at exRenFcb.extSig,     db -1
  2071 000035DB 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  2072 000035E1 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  2073 000035E2 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  2074 000035EA 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  2075 000035ED 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  2075 000035F6 4C414245            <1>
  2076 000035FA 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  2077 000035FD 00<rep 4h>          <1>     iend
  2078                              <1> volume:
  2079                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  2080 00003601 F605A7CAFFFFFF      <1>     test byte [arg2Flg], -1
  2081 00003608 0F85FAE6FFFF        <1>     jnz badArgError
  2082 0000360E F60597CAFFFFFF      <1>     test byte [arg1Flg], -1
  2083 00003615 7507                <1>     jnz .notCurrentDrive
  2084 00003617 E88E0C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  2085 0000361C EB31                <1>     jmp short .dirEP
  2086                              <1> .notCurrentDrive:
  2087 0000361E E83E0E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2088 00003623 488D35BDCEFFFF      <1>     lea rsi, searchSpec
  2089 0000362A E8BE0C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  2090 0000362F 66AD                <1>     lodsw                   ;Get this word
  2091 00003631 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  2092 00003634 0F85CEE6FFFF        <1>     jne badArgError
  2093 0000363A 8A056ECAFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2094 00003640 A8FF                <1>     test al, -1
  2095 00003642 0F85B7E6FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2096 00003648 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2097 0000364D FFC8                <1>     dec eax ;Convert to 0 based number
  2098                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2099 0000364F E8240F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  2100 00003654 488D1529D0FFFF      <1>     lea rdx, volFcb
  2101 0000365B FFC0                <1>     inc eax ;Get 1 based drive number
  2102 0000365D 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2103 0000365F 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2104 00003662 B800110000          <1>     mov eax, 1100h ;Find first FCB
  2105 00003667 CD21                <1>     int 21h
  2106 00003669 50                  <1>     push rax
  2107                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2108 0000366A 488D1579D2FFFF      <1>     lea rdx, crlf
  2109 00003671 B409                <1>     mov ah, 09h
  2110 00003673 CD21                <1>     int 21h
  2111 00003675 488D152ED5FFFF      <1>     lea rdx, volMes
  2112 0000367C B409                <1>     mov ah, 09h
  2113 0000367E CD21                <1>     int 21h
  2114 00003680 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2115 00003682 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2116 00003685 B402                <1>     mov ah, 02h
  2117 00003687 CD21                <1>     int 21h
  2118 00003689 58                  <1>     pop rax
  2119 0000368A 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2120 0000368C 7409                <1>     jz .volIDOk
  2121 0000368E 488D152CD5FFFF      <1>     lea rdx, volNo
  2122 00003695 EB19                <1>     jmp short .volEndPrint
  2123                              <1> .volIDOk:
  2124 00003697 488D151ED5FFFF      <1>     lea rdx, volOk
  2125 0000369E B409                <1>     mov ah, 09h
  2126 000036A0 CD21                <1>     int 21h
  2127 000036A2 C605D7CAFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2128 000036A9 488D15C5CAFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2129                              <1> .volEndPrint:
  2130 000036B0 B409                <1>     mov ah, 09h
  2131 000036B2 CD21                <1>     int 21h
  2132 000036B4 488D152FD2FFFF      <1>     lea rdx, crlf
  2133 000036BB B409                <1>     mov ah, 09h
  2134 000036BD CD21                <1>     int 21h
  2135                              <1>     return
    13                              <2> %%_ret:
    14 000036BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2136                              <1> 
  2137                              <1> version:
  2138 000036C0 488D1523D2FFFF      <1>     lea rdx, crlf
  2139 000036C7 B409                <1>     mov ah, 09h
  2140 000036C9 CD21                <1>     int 21h
  2141 000036CB 488D15C6D4FFFF      <1>     lea rdx, dosVer
  2142 000036D2 B409                <1>     mov ah, 09h
  2143 000036D4 CD21                <1>     int 21h
  2144 000036D6 E80C000000          <1>     call .printVersionNumber
  2145 000036DB 488D1508D2FFFF      <1>     lea rdx, crlf
  2146 000036E2 B409                <1>     mov ah, 09h
  2147 000036E4 CD21                <1>     int 21h
  2148                              <1>     return
    13                              <2> %%_ret:
    14 000036E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2149                              <1> .printVersionNumber:
  2150 000036E7 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2151 000036E9 CD21                <1>     int 21h
  2152 000036EB 50                  <1>     push rax
  2153 000036EC 0FB6C0              <1>     movzx eax, al
  2154 000036EF E8A60D0000          <1>     call printDecimalWord
  2155 000036F4 B22E                <1>     mov dl, "."
  2156 000036F6 B402                <1>     mov ah, 02h
  2157 000036F8 CD21                <1>     int 21h
  2158 000036FA 58                  <1>     pop rax
  2159 000036FB 0FB6C4              <1>     movzx eax, ah
  2160 000036FE E8970D0000          <1>     call printDecimalWord
  2161                              <1>     return
    13                              <2> %%_ret:
    14 00003703 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2162                              <1> 
  2163                              <1> 
  2164                              <1> memory:
  2165 00003704 488B1D14C9FFFF      <1>     mov rbx, qword [sysVars]
  2166 0000370B 4885DB              <1>     test rbx, rbx
  2167 0000370E 7510                <1>     jnz .sysvarsOK
  2168 00003710 488D1568D7FFFF      <1>     lea rdx, memBad0
  2169 00003717 B409                <1>     mov ah, 09h
  2170 00003719 CD21                <1>     int 21h
  2171 0000371B E9480E0000          <1>     jmp freezePC.altEP
  2172                              <1> .sysvarsOK:
  2173                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2174                              <1>     ; and rcx to store Application memory
  2175 00003720 31F6                <1>     xor esi, esi
  2176 00003722 31FF                <1>     xor edi, edi
  2177 00003724 31ED                <1>     xor ebp, ebp
  2178 00003726 31C9                <1>     xor ecx, ecx
  2179 00003728 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2180 0000372C 488B1B              <1>     mov rbx, qword [rbx]
  2181                              <1> .memLp:
  2182 0000372F 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2183 00003732 7409                <1>     je .validMCB
  2184 00003734 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2185 00003737 0F8501010000        <1>     jne .badMCBFound
  2186                              <1> .validMCB:
  2187 0000373D 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2188 00003740 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2189 00003744 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2190 0000374C 7505                <1>     jne .notDOS
  2191 0000374E 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2192 00003751 EB21                <1>     jmp short .gotoNext
  2193                              <1> .notDOS:
  2194 00003753 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2195 0000375B 7505                <1>     jne .notFree
  2196 0000375D 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2197 00003760 EB12                <1>     jmp short .gotoNext
  2198                              <1> .notFree:
  2199 00003762 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2200 0000376A 7505                <1>     jne .notHole
  2201 0000376C 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2202 0000376F EB03                <1>     jmp short .gotoNext
  2203                              <1> .notHole:
  2204 00003771 4801C1              <1>     add rcx, rax    ;Add to Application count
  2205                              <1> .gotoNext:
  2206 00003774 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2207 00003777 7407                <1>     je .endOfWalk
  2208 00003779 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2209 0000377E EBAF                <1>     jmp short .memLp
  2210                              <1> .endOfWalk:
  2211                              <1>     
  2212 00003780 488D1559D6FFFF      <1>     lea rdx, memDOS
  2213 00003787 B409                <1>     mov ah, 09h
  2214 00003789 CD21                <1>     int 21h
  2215 0000378B 4889F0              <1>     mov rax, rsi
  2216 0000378E E89D000000          <1>     call .mcbPrintAmount
  2217 00003793 488D15DED6FFFF      <1>     lea rdx, memByte
  2218 0000379A B409                <1>     mov ah, 09h
  2219 0000379C CD21                <1>     int 21h
  2220                              <1> 
  2221 0000379E 4885ED              <1>     test rbp, rbp
  2222 000037A1 741E                <1>     jz .skipHole
  2223 000037A3 488D1582D6FFFF      <1>     lea rdx, memHole
  2224 000037AA B409                <1>     mov ah, 09h
  2225 000037AC CD21                <1>     int 21h
  2226 000037AE 4889E8              <1>     mov rax, rbp
  2227 000037B1 E87A000000          <1>     call .mcbPrintAmount
  2228 000037B6 488D15BBD6FFFF      <1>     lea rdx, memByte
  2229 000037BD B409                <1>     mov ah, 09h
  2230 000037BF CD21                <1>     int 21h
  2231                              <1> .skipHole:
  2232                              <1> 
  2233 000037C1 488D153ED6FFFF      <1>     lea rdx, memApp
  2234 000037C8 B409                <1>     mov ah, 09h
  2235 000037CA CD21                <1>     int 21h
  2236 000037CC 4889C8              <1>     mov rax, rcx
  2237 000037CF E85C000000          <1>     call .mcbPrintAmount
  2238 000037D4 488D159DD6FFFF      <1>     lea rdx, memByte
  2239 000037DB B409                <1>     mov ah, 09h
  2240 000037DD CD21                <1>     int 21h
  2241                              <1> 
  2242 000037DF 488D156CD6FFFF      <1>     lea rdx, memFree
  2243 000037E6 B409                <1>     mov ah, 09h
  2244 000037E8 CD21                <1>     int 21h
  2245 000037EA 4889F8              <1>     mov rax, rdi
  2246 000037ED E83E000000          <1>     call .mcbPrintAmount
  2247 000037F2 488D157FD6FFFF      <1>     lea rdx, memByte
  2248 000037F9 B409                <1>     mov ah, 09h
  2249 000037FB CD21                <1>     int 21h
  2250                              <1> 
  2251 000037FD 488D15B6D5FFFF      <1>     lea rdx, memSys
  2252 00003804 B409                <1>     mov ah, 09h
  2253 00003806 CD21                <1>     int 21h
  2254 00003808 4889F0              <1>     mov rax, rsi
  2255 0000380B 4801F8              <1>     add rax, rdi
  2256 0000380E 4801C8              <1>     add rax, rcx
  2257 00003811 4801E8              <1>     add rax, rbp
  2258 00003814 E817000000          <1>     call .mcbPrintAmount
  2259 00003819 488D1558D6FFFF      <1>     lea rdx, memByte
  2260 00003820 B409                <1>     mov ah, 09h
  2261 00003822 CD21                <1>     int 21h
  2262                              <1> 
  2263 00003824 488D15BFD0FFFF      <1>     lea rdx, crlf
  2264 0000382B B409                <1>     mov ah, 09h
  2265 0000382D CD21                <1>     int 21h
  2266                              <1>     return
    13                              <2> %%_ret:
    14 0000382F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2267                              <1> 
  2268                              <1> .mcbPrintAmount:
  2269 00003830 51                  <1>     push rcx
  2270 00003831 56                  <1>     push rsi
  2271 00003832 57                  <1>     push rdi
  2272 00003833 55                  <1>     push rbp
  2273 00003834 E8610C0000          <1>     call printDecimalWord
  2274 00003839 5D                  <1>     pop rbp
  2275 0000383A 5F                  <1>     pop rdi
  2276 0000383B 5E                  <1>     pop rsi
  2277 0000383C 59                  <1>     pop rcx
  2278                              <1>     return
    13                              <2> %%_ret:
    14 0000383D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2279                              <1> .badMCBFound:
  2280 0000383E 488D157AD6FFFF      <1>     lea rdx, memBad2
  2281 00003845 B409                <1>     mov ah, 09h
  2282 00003847 CD21                <1>     int 21h
  2283 00003849 E91A0D0000          <1>     jmp freezePC.altEP
  2284                              <1> 
  2285                              <1> type:
  2286 0000384E F60557C8FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2287 00003855 0F84ADE4FFFF        <1>     jz badArgError
  2288 0000385B F6054DC8FFFFFF      <1>     test byte [arg2Flg], -1
  2289 00003862 0F85A0E4FFFF        <1>     jnz badArgError         ;If this set, error
  2290 00003868 4C8B05A0C7FFFF      <1>     mov r8, [pspPtr]
  2291 0000386F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2292 00003876 0FB60530C8FFFF      <1>     movzx eax, byte [arg1Off]
  2293 0000387D 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2294 00003880 803E0D              <1>     cmp byte [rsi], CR
  2295 00003883 0F847FE4FFFF        <1>     je badArgError
  2296 00003889 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2297 0000388D 750F                <1>     jne .noDrive
  2298 0000388F 0FB60518C8FFFF      <1>     movzx eax, byte [arg1FCBret]
  2299 00003896 3CFF                <1>     cmp al, -1
  2300 00003898 0F8461E4FFFF        <1>     je badDriveError
  2301                              <1> .noDrive:
  2302                              <1>     ;Now we open the provided file
  2303 0000389E E8BE0B0000          <1>     call buildCommandPath
  2304 000038A3 488D153DCCFFFF      <1>     lea rdx, searchSpec
  2305 000038AA B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2306 000038AF CD21                <1>     int 21h
  2307 000038B1 0F825AE4FFFF        <1>     jc badFileError
  2308 000038B7 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2309 000038BE 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2310                              <1> .lp:
  2311 000038C1 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2312 000038C6 B43F                <1>     mov ah, 3Fh ;Read handle
  2313 000038C8 CD21                <1>     int 21h
  2314 000038CA 89C1                <1>     mov ecx, eax
  2315 000038CC 67E317              <1>     jecxz .exit
  2316 000038CF 53                  <1>     push rbx    ;Save the original in handle
  2317 000038D0 BB01000000          <1>     mov ebx, 1  ;STDOUT
  2318 000038D5 B440                <1>     mov ah, 40h
  2319 000038D7 CD21                <1>     int 21h
  2320 000038D9 5B                  <1>     pop rbx ;Get back the original read handle
  2321 000038DA 720F                <1>     jc .exitBad
  2322 000038DC 39C8                <1>     cmp eax, ecx
  2323 000038DE 74E1                <1>     je .lp
  2324 000038E0 FFC9                <1>     dec ecx ;One less for a ^Z
  2325 000038E2 39C8                <1>     cmp eax, ecx
  2326 000038E4 7505                <1>     jne .exitBad
  2327                              <1> .exit:
  2328 000038E6 B43E                <1>     mov ah, 3Eh ;Close handle
  2329 000038E8 CD21                <1>     int 21h
  2330                              <1>     return
    13                              <2> %%_ret:
    14 000038EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2331                              <1> .exitBad:
  2332                              <1>     ;If it is a char device, don't print an error
  2333 000038EB B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2334 000038F0 BB01000000          <1>     mov ebx, 1
  2335 000038F5 CD21                <1>     int 21h
  2336 000038F7 F6C280              <1>     test dl, devCharDev
  2337                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000038FA 75(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2338 000038FC E9ACE3FFFF          <1>     jmp badDiskFull
  2339                              <1> 
  2340                              <1> exit:
  2341 00003901 F60523C7FFFFFF      <1>     test byte [permaSwitch], -1
  2342                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003908 75(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2343 0000390A 488B0506C7FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  2344 00003911 483DFFFFFFFF        <1>     cmp rax, -1
  2345                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003917 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2346 00003919 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  2347                              <1> 
  2348 0000391D 488B1508C7FFFF      <1>     mov rdx, qword [parentInt22]
  2349 00003924 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  2350 00003928 B822250000          <1>     mov eax, 2522h
  2351 0000392D CD21                <1>     int 21h
  2352                              <1> 
  2353 0000392F B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2354 00003934 CD21                <1>     int 21h
  2355                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003936 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2356                              <1> 
  2357                              <1> launchChild:
  2358                              <1>     ;We execute an external command here.
  2359                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2360                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2361                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2362                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2363                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2364 00003937 E83C0C0000          <1>     call setDTA         
  2365                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2366 0000393C 488D3DFBC9FFFF      <1>     lea rdi, cmdPathSpec
  2367 00003943 4889FE              <1>     mov rsi, rdi
  2368 00003946 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2369 0000394B CD2F                <1>     int 2fh
  2370 0000394D E8520A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2371 00003952 4889FE              <1>     mov rsi, rdi    ;Source here
  2372 00003955 488D3D01C8FFFF      <1>     lea rdi, cmdFcb
  2373 0000395C B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2374 00003961 CD21                <1>     int 21h
  2375 00003963 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2376 00003965 0F85CDE3FFFF        <1>     jnz badCmdError
  2377 0000396B 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2378                              <1> .pathLoop:
  2379 0000396E 488D35F1C7FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2380 00003975 488D3DBDD5FFFF      <1>     lea rdi, extStr
  2381 0000397C BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2382                              <1> .extLp:
  2383 00003981 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2384 00003982 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2385 00003987 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2386 00003989 5E                  <1>     pop rsi
  2387 0000398A 85C9                <1>     test ecx, ecx
  2388 0000398C 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2389 0000398E 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2390 00003991 FFCA                <1>     dec edx         ;Else one less extension type to check
  2391 00003993 75EC                <1>     jnz .extLp
  2392                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2393                              <1>     ;If not, error.
  2394 00003995 B903000000          <1>     mov ecx, 3
  2395 0000399A 4889F7              <1>     mov rdi, rsi
  2396 0000399D B020                <1>     mov al, SPC
  2397 0000399F F3AE                <1>     rep scasb   
  2398 000039A1 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2399 000039A3 0F858FE3FFFF        <1>     jnz badCmdError    ;If not, error!
  2400                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2401 000039A9 488D3589D5FFFF      <1>     lea rsi, extStr
  2402 000039B0 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2403                              <1> .extSrchLp:
  2404 000039B5 488D3DAAC7FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2405 000039BC B903000000          <1>     mov ecx, 3
  2406 000039C1 F3A4                <1>     rep movsb   ;Copy the extension over!
  2407 000039C3 E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2408 000039C8 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2409 000039CA FFCB                <1>     dec ebx                 ;Decrement extension counter
  2410 000039CC 75E7                <1>     jnz .extSrchLp
  2411                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2412                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2413                              <1> ; by setting the fcb extension back to all spaces.
  2414 000039CE 488D3D91C7FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2415 000039D5 B903000000          <1>     mov ecx, 3
  2416 000039DA B020                <1>     mov al, SPC
  2417 000039DC F3AA                <1>     rep stosb   ;Store back the empty extension!
  2418 000039DE EB70                <1>     jmp short .pathHandle
  2419                              <1> .extFnd:
  2420                              <1> ;Here if the file had the right extension.
  2421 000039E0 E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2422 000039E5 7269                <1>     jc .pathHandle
  2423                              <1> .extSrchFnd:
  2424                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2425                              <1> ; a BAT. If it is, separate handling!
  2426 000039E7 803D78C7FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2427 000039EE 0F84C2E0FFFF        <1>     je batLaunch
  2428 000039F4 488D1D9DC7FFFF      <1>     lea rbx, launchBlock
  2429 000039FB 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2430 000039FF 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2431 00003A02 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2432 00003A09 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2433 00003A0D 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2434 00003A11 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2435 00003A15 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2436 00003A19 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2437 00003A1D 488D151AC9FFFF      <1>     lea rdx, cmdPathSpec
  2438 00003A24 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2439 00003A29 CD21                <1>     int 21h
  2440                              <1> ;If the program failed to start, verify why!
  2441 00003A2B B800590000          <1>     mov eax, 5900h      ;Get extended error
  2442 00003A30 31DB                <1>     xor ebx, ebx
  2443 00003A32 CD21                <1>     int 21h
  2444 00003A34 668905D2C5FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2445 00003A3B 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2446 00003A3D 0F84AAE2FFFF        <1>     je badAccError
  2447 00003A43 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2448 00003A45 0F84120B0000        <1>     je freezePC
  2449 00003A4B E9E8E2FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2450                              <1> .pathHandle:        
  2451                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2452                              <1> ;al has error code!
  2453 00003A50 4885ED              <1>     test rbp, rbp
  2454 00003A53 0F85A3000000        <1>     jnz .pathReentry
  2455                              <1> ;Now check if the command we recieved included an absolute path.
  2456                              <1> ;If so, we don't do path substitution and just fail at this point
  2457 00003A59 488D35DEC8FFFF      <1>     lea rsi, cmdPathSpec
  2458 00003A60 66AD                <1>     lodsw   ;Get the first two chars
  2459 00003A62 3A05C1C5FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2460 00003A68 0F84CAE2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2461 00003A6E 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2462 00003A70 7412                <1>     je .pathGetEnv
  2463 00003A72 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2464 00003A75 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2465 00003A77 AC                  <1>     lodsb   ;Get the third char
  2466 00003A78 3A05ABC5FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2467 00003A7E 0F84B4E2FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2468                              <1> .pathGetEnv:
  2469                              <1> ;Now get a pointer to the environment and search for PATH=
  2470                              <1> ;We only take the final portion of the path and add it to each path componant
  2471                              <1> ;This agrees with DOS 3.3
  2472 00003A84 E85C0B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2473 00003A89 0F84A9E2FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2474                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2475                              <1>     ;Now we know we dont have to keep track of chars!!
  2476 00003A8F 488D3D19D6FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2477 00003A96 E8A40B0000          <1>     call searchForEnvVar
  2478 00003A9B 0F8297E2FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2479 00003AA1 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2480 00003AA4 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2481                              <1> .pathRejoin:
  2482 00003AAB 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2483 00003AAE 0F8484E2FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2484 00003AB4 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2485 00003AB7 488D3D29CAFFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2486                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2487                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2488                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2489                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2490 00003ABE E845090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2491 00003AC3 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2492 00003AC6 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2493 00003AC9 48FFCF              <1>     dec rdi ;Point to the null terminator
  2494 00003ACC 8A0557C5FFFF        <1>     mov al, byte [pathSep]
  2495 00003AD2 3847FF              <1>     cmp byte [rdi - 1], al
  2496 00003AD5 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2497 00003AD7 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2498                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2499 00003AD8 488D357FC6FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2500 00003ADF E8E4080000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2501 00003AE4 488D35FCC9FFFF      <1>     lea rsi, searchSpec 
  2502 00003AEB 488D3D4CC8FFFF      <1>     lea rdi, cmdPathSpec
  2503 00003AF2 E8B8070000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2504 00003AF7 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2505                              <1> .pathReentry:
  2506 00003AFC 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2507 00003B00 0F8432E2FFFF        <1>     je badCmdError
  2508                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2509                              <1> ;Not really a big deal...
  2510                              <1>     ;cmp al, errBadDrv
  2511                              <1>     ;jne .pathDrvOk
  2512                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2513                              <1>     ;mov eax, 0900h
  2514                              <1>     ;int 21h
  2515                              <1> ;.pathDrvOk:
  2516 00003B06 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2517 00003B09 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2518 00003B0C EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2519                              <1> 
  2520                              <1> .prepAndSearch:
  2521                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2522                              <1> ;cmdPathSpec and null terminates. 
  2523                              <1> ;Input: cmdFcb name + ext setup. 
  2524                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2525                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2526 00003B0E 51                  <1>     push rcx
  2527 00003B0F 56                  <1>     push rsi
  2528 00003B10 57                  <1>     push rdi
  2529 00003B11 488D3D26C8FFFF      <1>     lea rdi, cmdPathSpec 
  2530 00003B18 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2531 00003B1B E884080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2532 00003B20 488D3537C6FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2533 00003B27 E89C080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2534 00003B2C B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2535 00003B31 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2536 00003B33 CD21                <1>     int 21h
  2537 00003B35 5F                  <1>     pop rdi
  2538 00003B36 5E                  <1>     pop rsi
  2539 00003B37 59                  <1>     pop rcx
  2540                              <1>     return
    13                              <2> %%_ret:
    14 00003B38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2541                              <1> 
  2542                              <1> set:
  2543 00003B39 F6056CC5FFFFFF      <1>     test byte [arg1Flg], -1
  2544 00003B40 7539                <1>     jnz .editEnv
  2545                              <1>     ;Here we just print the environment.
  2546 00003B42 E89E0A0000          <1>     call checkEnvGoodAndGet 
  2547 00003B47 0F8497E1FFFF        <1>     jz badEnvSpaceError
  2548                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2549 00003B4D 4889F7              <1>     mov rdi, rsi
  2550 00003B50 4889F2              <1>     mov rdx, rsi
  2551                              <1> .findLp:
  2552 00003B53 B9FFFFFFFF          <1>     mov ecx, -1
  2553 00003B58 31C0                <1>     xor eax, eax
  2554                              <1> .scanLp:
  2555 00003B5A F2AE                <1>     repne scasb
  2556 00003B5C 75FC                <1>     jne .scanLp
  2557 00003B5E F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2558                              <1>     ;Else, we now print this environment variable and CRLF it
  2559                              <1>     ;rdx points to the start of the string aleady
  2560                              <1>     ;ecx has the bytes to print
  2561 00003B60 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2562 00003B65 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2563 00003B6A CD21                <1>     int 21h
  2564 00003B6C E83C050000          <1>     call printCRLF
  2565 00003B71 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2566                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003B74 74(38)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2567 00003B76 4889FA              <1>     mov rdx, rdi   
  2568 00003B79 EBD8                <1>     jmp short .findLp
  2569                              <1> .editEnv:
  2570 00003B7B E8650A0000          <1>     call checkEnvGoodAndGet
  2571 00003B80 0F845EE1FFFF        <1>     jz badEnvSpaceError
  2572 00003B86 0FB60520C5FFFF      <1>     movzx eax, byte [arg1Off]
  2573 00003B8D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2574 00003B94 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2575                              <1> .altEp:
  2576 00003B97 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2577 00003B9A B00D                <1>     mov al, CR              ;Search for the CR
  2578 00003B9C 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2579 00003BA4 89CB                <1>     mov ebx, ecx            ;Save this count 
  2580 00003BA6 53                  <1>     push rbx                ;Save this count on the stack too!
  2581 00003BA7 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2582 00003BA9 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2583 00003BAB 66891D37CCFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2584 00003BB2 59                  <1>     pop rcx                 ;Get the char count back!
  2585 00003BB3 89CB                <1>     mov ebx, ecx            
  2586 00003BB5 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2587 00003BB8 B03D                <1>     mov al, "="             ;Scan for an equals sign
  2588 00003BBA F2AE                <1>     repne scasb
  2589 00003BBC 0F8519E1FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2590 00003BC2 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2591 00003BC4 66891D20CCFFFF      <1>     mov word [envVarNamSz], bx
  2592 00003BCB 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2593 00003BCE 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2594 00003BD0 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2595 00003BD1 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2596 00003BD4 E8660A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2597 00003BD9 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2598 00003BDB E88D0A0000          <1>     call envFree            ;Free the var in rsi
  2599                              <1> .editNewEnv:
  2600 00003BE0 E8C10A0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2601 00003BE5 E8E10A0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2602 00003BEA 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2603 00003BEB 31C0                <1>     xor eax, eax            ;Prepare null length!
  2604 00003BED 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2605 00003BF3 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2606 00003BF6 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2607 00003BF8 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2608 00003BFA 663B0DE8CBFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2609 00003C01 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2610                              <1> .reallocTry:
  2611                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2612                              <1>     ; we proceed with the environment size.
  2613 00003C03 E8D80A0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2614 00003C08 7319                <1>     jnc .reallocOk
  2615 00003C0A 0F84D4E0FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2616                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2617                              <1>     ; partially the variable into the env. If so we do that. If the name
  2618                              <1>     ; cannot fit, we don't bother
  2619                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2620 00003C10 663B0DD4CBFFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2621                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003C17 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003C19 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2622 00003C1A E8C5E0FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2623 00003C1F FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2624 00003C21 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2625                              <1> .reallocOk:
  2626                              <1>     ;Here we have all the space to just copy the full path
  2627 00003C23 0FB70DBFCBFFFF      <1>     movzx ecx, word [envVarSz]
  2628                              <1> .nameCp:
  2629                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2630                              <1> ;Always enough memory for name= here
  2631 00003C2A AC                  <1>     lodsb
  2632 00003C2B E8A2060000          <1>     call ucChar
  2633 00003C30 AA                  <1>     stosb
  2634 00003C31 66FFC9              <1>     dec cx      ;Always decrement this count
  2635 00003C34 3C3D                <1>     cmp al, "="
  2636 00003C36 75F2                <1>     jne .nameCp
  2637                              <1> .exitNameCp:
  2638 00003C38 AC                  <1>     lodsb
  2639 00003C39 3C0D                <1>     cmp al, CR
  2640 00003C3B 7405                <1>     je .exitCp
  2641 00003C3D AA                  <1>     stosb
  2642 00003C3E FFC9                <1>     dec ecx
  2643 00003C40 75F6                <1>     jnz .exitNameCp
  2644                              <1> .exitCp:
  2645 00003C42 31C0                <1>     xor eax, eax
  2646 00003C44 66AB                <1>     stosw   ;Store the final null word
  2647                              <1>     return
    13                              <2> %%_ret:
    14 00003C46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2648                              <1> .delEnvVar:
  2649                              <1>     ;rsi -> Start of the envvar name in user buffer
  2650 00003C47 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2651 00003C4A E8F0090000          <1>     call searchForEnvVar    ;Look for the environment variable
  2652 00003C4F 7205                <1>     jc .delEnvVarSkip
  2653 00003C51 E8170A0000          <1>     call envFree    ;Free the env var at rsi
  2654                              <1> .delEnvVarSkip:
  2655 00003C56 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2656                              <1>     return
    13                              <2> %%_ret:
    14 00003C57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2657                              <1> 
  2658                              <1> pathEdit:
  2659                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2660                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2661                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2662                              <1> ; end there. Error with too many arguments error!
  2663                              <1> ;If after the equals sign there is nothing, we just print the path!
  2664                              <1> ;Gotta process the command line ourselves first
  2665 00003C58 E888090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2666 00003C5D 0F8481E0FFFF        <1>     jz badEnvSpaceError
  2667                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2668 00003C63 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2669 00003C6A E8AD000000          <1>     call .skipPathDelimiters
  2670 00003C6F 3C0D                <1>     cmp al, CR
  2671 00003C71 7466                <1>     je .printPath
  2672                              <1> ;Else use the set command to setup the path in the searchSpec.
  2673 00003C73 56                  <1>     push rsi    ;Save the first char of the command line string
  2674 00003C74 488D3534D4FFFF      <1>     lea rsi, pathEVar
  2675 00003C7B 488D3D65C8FFFF      <1>     lea rdi, searchSpec
  2676 00003C82 E828060000          <1>     call strcpy
  2677 00003C87 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2678 00003C8A 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2679 00003C8B 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2680                              <1> .cpLp:
  2681 00003C8D AC                  <1>     lodsb
  2682 00003C8E 3C0D                <1>     cmp al, CR
  2683 00003C90 7411                <1>     je .cpLpExit
  2684 00003C92 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2685 00003C97 740A                <1>     je .cpLpExit
  2686 00003C99 E834060000          <1>     call ucChar ;Uppercase the char
  2687 00003C9E AA                  <1>     stosb       ;Store it
  2688 00003C9F FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2689 00003CA1 EBEA                <1>     jmp short .cpLp
  2690                              <1> .cpLpExit:
  2691                              <1>     ;Remove trailing semicolons
  2692 00003CA3 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2693 00003CA7 7507                <1>     jne .cpLpNoIntervene
  2694 00003CA9 FFC9                <1>     dec ecx     ;Reduce the count by one
  2695 00003CAB 48FFCF              <1>     dec rdi     ;Go back a char
  2696 00003CAE EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2697                              <1> .cpLpNoIntervene:
  2698 00003CB0 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2699 00003CB2 AA                  <1>     stosb       ;Store it!
  2700 00003CB3 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2701 00003CB9 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2702 00003CC0 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2703 00003CC2 488D351EC8FFFF      <1>     lea rsi, searchSpec
  2704 00003CC9 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2705 00003CD0 57                  <1>     push rdi
  2706 00003CD1 F3A4                <1>     rep movsb
  2707 00003CD3 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2708 00003CD4 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2709                              <1> .printPath:
  2710 00003CD9 488D3DCFD3FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2711 00003CE0 E85A090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2712 00003CE5 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2713 00003CE7 4889F7              <1>     mov rdi, rsi        
  2714 00003CEA E8D9050000          <1>     call strlen         ;Get the length of the path in rdi
  2715 00003CEF 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2716 00003CF5 7411                <1>     je .noPathPrnt      ;Print no path!
  2717 00003CF7 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2718 00003CF9 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2719 00003CFC BB01000000          <1>     mov ebx, 1          ;STDOUT
  2720 00003D01 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2721 00003D06 EB0C                <1>     jmp short .pathExit
  2722                              <1> .noPathPrnt:
  2723 00003D08 488D1538CFFFFF      <1>     lea rdx, noPath
  2724 00003D0F B800090000          <1>     mov eax, 0900h
  2725                              <1> .pathExit:
  2726 00003D14 CD21                <1>     int 21h
  2727 00003D16 E892030000          <1>     call printCRLF      ;Print a crlf at the end
  2728                              <1>     return
    13                              <2> %%_ret:
    14 00003D1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2729                              <1> .skipPathDelimiters:
  2730                              <1> ;Input: rsi -> Start of string to parse
  2731                              <1> ;Output: rsi -> First non-delimiter char of string
  2732                              <1> ;        al = First non delim char
  2733 00003D1C AC                  <1>     lodsb
  2734 00003D1D E806000000          <1>     call .isALPathDelimiter
  2735 00003D22 74F8                <1>     je .skipPathDelimiters
  2736 00003D24 48FFCE              <1>     dec rsi
  2737                              <1>     return
    13                              <2> %%_ret:
    14 00003D27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2738                              <1> .isALPathDelimiter:
  2739                              <1> ;Same as before without semicolon
  2740 00003D28 3C20                <1>     cmp al, SPC
  2741                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003D2A 74(27)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2742 00003D2C 3C09                <1>     cmp al, TAB
  2743                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003D2E 74(27)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2744 00003D30 3C2C                <1>     cmp al, ","
  2745                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003D32 74(27)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2746 00003D34 3C3D                <1>     cmp al, "="
  2747                              <1>     return
    13                              <2> %%_ret:
    14 00003D36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2748                              <1> 
  2749                              <1> prompt:
  2750 00003D37 E8A9080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2751 00003D3C 0F84A2DFFFFF        <1>     jz badEnvSpaceError
  2752                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2753 00003D42 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2754 00003D49 E89F050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2755 00003D4E 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2756 00003D51 742C                <1>     je .reset   ;Reset if so
  2757 00003D53 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2758 00003D54 488D35D6D1FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2759 00003D5B 488D3D85C7FFFF      <1>     lea rdi, searchSpec
  2760 00003D62 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2761 00003D67 F3A4                <1>     rep movsb
  2762 00003D69 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2763 00003D6A 31C9                <1>     xor ecx, ecx    ;Get char count
  2764                              <1> .cp:    ;Now copy the user string over
  2765 00003D6C AC                  <1>     lodsb
  2766 00003D6D AA                  <1>     stosb 
  2767 00003D6E 3C0D                <1>     cmp al, CR
  2768 00003D70 7404                <1>     je .cpOk
  2769 00003D72 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2770 00003D74 EBF6                <1>     jmp short .cp
  2771                              <1> .cpOk:
  2772 00003D76 488D356AC7FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2773 00003D7D EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2774                              <1> .reset:
  2775                              <1> ;Delete the environment variable!
  2776 00003D7F 488D35ABD1FFFF      <1>     lea rsi, promptEVar 
  2777 00003D86 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2778                              <1> .goSet:
  2779 00003D88 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2780 00003D8E 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2781 00003D95 FFC1                <1>     inc ecx     ;Include CR in copy
  2782 00003D97 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2783 00003D9E 57                  <1>     push rdi
  2784 00003D9F F3A4                <1>     rep movsb
  2785 00003DA1 5E                  <1>     pop rsi
  2786 00003DA2 E9F0FDFFFF          <1>     jmp set.altEp
  2787                              <1> 
  2788                              <1> echo:
  2789 00003DA7 F605FEC2FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2790 00003DAE 752A                <1>     jnz .argGiven
  2791 00003DB0 488D1581CFFFFF      <1>     lea rdx, echoIs
  2792 00003DB7 E8F8020000          <1>     call printString
  2793 00003DBC 488D155BCFFFFF      <1>     lea rdx, onMes
  2794 00003DC3 488D0D4ECFFFFF      <1>     lea rcx, offMes
  2795 00003DCA F605CDC2FFFFFF      <1>     test byte [echoFlg], -1
  2796 00003DD1 480F44D1            <1>     cmovz rdx, rcx
  2797 00003DD5 E9DA020000          <1>     jmp printString
  2798                              <1> .argGiven:
  2799 00003DDA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2800 00003DE1 0FB605C5C2FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2801 00003DE8 4801C6              <1>     add rsi, rax
  2802 00003DEB AC                  <1>     lodsb   ;Get this char
  2803 00003DEC 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2804 00003DEF E8DE040000          <1>     call ucChar
  2805 00003DF4 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2806 00003DF6 755A                <1>     jne .directEcho
  2807 00003DF8 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2808 00003DFB E8D2040000          <1>     call ucChar
  2809 00003E00 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2810 00003E02 751B                <1>     jne .checkOff
  2811 00003E04 56                  <1>     push rsi
  2812 00003E05 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2813 00003E0C E8DC040000          <1>     call skipDelimiters
  2814 00003E11 803E0D              <1>     cmp byte [rsi], CR
  2815 00003E14 5E                  <1>     pop rsi
  2816 00003E15 753B                <1>     jne .directEcho ;If its not, just echo the string
  2817 00003E17 C60580C2FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2818                              <1>     return
    13                              <2> %%_ret:
    14 00003E1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2819                              <1> .checkOff:
  2820 00003E1F 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2821 00003E22 E8AB040000          <1>     call ucChar
  2822 00003E27 3C46                <1>     cmp al, "F" ;Is it an F?
  2823 00003E29 7527                <1>     jne .directEcho ;No, just direct echo
  2824 00003E2B 8A4602              <1>     mov al, byte [rsi + 2]
  2825 00003E2E E89F040000          <1>     call ucChar
  2826 00003E33 3C46                <1>     cmp al, "F"
  2827 00003E35 751B                <1>     jne .directEcho
  2828 00003E37 56                  <1>     push rsi
  2829 00003E38 4881C603000000      <1>     add rsi, 3
  2830 00003E3F E8A9040000          <1>     call skipDelimiters
  2831 00003E44 803E0D              <1>     cmp byte [rsi], CR
  2832 00003E47 5E                  <1>     pop rsi
  2833 00003E48 7508                <1>     jne .directEcho
  2834 00003E4A C6054DC2FFFF00      <1>     mov byte [echoFlg], 0
  2835                              <1>     return
    13                              <2> %%_ret:
    14 00003E51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2836                              <1> .directEcho: 
  2837 00003E52 AC                  <1>     lodsb
  2838 00003E53 3C0D                <1>     cmp al, CR
  2839 00003E55 0F8452020000        <1>     je printCRLF    ;Prints a crlf and returns
  2840 00003E5B 88C2                <1>     mov dl, al
  2841 00003E5D E8C2020000          <1>     call outChar
  2842 00003E62 EBEE                <1>     jmp short .directEcho
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003E64 53                  <1>     push rbx
    11 00003E65 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003E67 803DC6C1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003E6E 7240                <1>     jb .usDate
    14 00003E70 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003E72 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003E77 E8B0000000          <1>     call .printFirst
    18 00003E7C 8A15BDC1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003E82 B402                <1>     mov ah, 02h
    20 00003E84 CD21                <1>     int 21h
    21                              <1> 
    22 00003E86 89C8                <1>     mov eax, ecx
    23 00003E88 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003E8D C1E805              <1>     shr eax, 5
    25 00003E90 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003E95 8A15A4C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003E9B B402                <1>     mov ah, 02h
    29 00003E9D CD21                <1>     int 21h
    30                              <1> 
    31 00003E9F 89C8                <1>     mov eax, ecx
    32 00003EA1 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00003EA6 C1E809              <1>     shr eax, 9
    34 00003EA9 5B                  <1>     pop rbx ;Get the year signature back
    35 00003EAA E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003EAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003EB0 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003EB5 C1E805              <1>     shr eax, 5
    41 00003EB8 E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003EBD 8A157CC1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003EC3 B402                <1>     mov ah, 02h
    45 00003EC5 CD21                <1>     int 21h
    46                              <1> 
    47 00003EC7 89C8                <1>     mov eax, ecx
    48 00003EC9 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003ECE E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003ED3 8A1566C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00003ED9 B402                <1>     mov ah, 02h
    53 00003EDB CD21                <1>     int 21h
    54                              <1> 
    55 00003EDD 89C8                <1>     mov eax, ecx
    56 00003EDF 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00003EE4 C1E809              <1>     shr eax, 9
    58 00003EE7 5B                  <1>     pop rbx ;Get the year signature back
    59 00003EE8 E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00003EED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00003EEE 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00003EF3 C1E809              <1>     shr eax, 9
    65 00003EF6 5B                  <1>     pop rbx ;Get the year signature back
    66 00003EF7 E85C000000          <1>     call .printYear
    67                              <1> 
    68 00003EFC 8A153DC1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00003F02 B402                <1>     mov ah, 02h
    70 00003F04 CD21                <1>     int 21h
    71                              <1> 
    72 00003F06 89C8                <1>     mov eax, ecx
    73 00003F08 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00003F0D C1E805              <1>     shr eax, 5
    75 00003F10 E833000000          <1>     call .printSecond
    76                              <1> 
    77 00003F15 8A1524C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00003F1B B402                <1>     mov ah, 02h
    79 00003F1D CD21                <1>     int 21h
    80                              <1> 
    81 00003F1F 89C8                <1>     mov eax, ecx
    82 00003F21 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 00003F26 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00003F2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00003F2C 51                  <1>     push rcx
    89 00003F2D E8D9050000          <1>     call getDecimalWord
    90 00003F32 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00003F34 7504                <1>     jnz .skipSpace
    92 00003F36 88CD                <1>     mov ch, cl
    93 00003F38 B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00003F3A 88CA                <1>     mov dl, cl
    96 00003F3C B402                <1>     mov ah, 02h
    97 00003F3E CD21                <1>     int 21h
    98 00003F40 88EA                <1>     mov dl, ch
    99 00003F42 B402                <1>     mov ah, 02h
   100 00003F44 CD21                <1>     int 21h
   101 00003F46 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00003F47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00003F48 51                  <1>     push rcx
   105 00003F49 E8BD050000          <1>     call getDecimalWord
   106 00003F4E 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00003F50 75E8                <1>     jnz .skipSpace
   108 00003F52 88CD                <1>     mov ch, cl
   109 00003F54 B130                <1>     mov cl, "0"
   110 00003F56 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00003F58 05BC070000          <1>     add eax, 1980
   113 00003F5D 51                  <1>     push rcx
   114 00003F5E 53                  <1>     push rbx
   115 00003F5F E8A7050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00003F64 5B                  <1>     pop rbx
   117 00003F65 84DB                <1>     test bl, bl
   118 00003F67 740C                <1>     jz .twoDigitYear
   119 00003F69 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00003F6B B402                <1>     mov ah, 02h
   121 00003F6D CD21                <1>     int 21h
   122 00003F6F 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003F71 B402                <1>     mov ah, 02h
   124 00003F73 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00003F75 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00003F78 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00003F7A B402                <1>     mov ah, 02h
   129 00003F7C CD21                <1>     int 21h
   130 00003F7E 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003F80 B402                <1>     mov ah, 02h
   132 00003F82 CD21                <1>     int 21h
   133 00003F84 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00003F85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00003F86 89C1                <1>     mov ecx, eax
   142 00003F88 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00003F8D C1E80B              <1>     shr eax, 11
   144 00003F90 803DAEC0FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00003F97 750B                <1>     jne .ampm
   146 00003F99 E85A000000          <1>     call .printHours
   147 00003F9E E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003FA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003FA4 3D0C000000          <1>     cmp eax, 12
   151 00003FA9 7713                <1>     ja .pm
   152 00003FAB 7416                <1>     je .pm2
   153 00003FAD E846000000          <1>     call .printHours
   154 00003FB2 E81D000000          <1>     call .printMinutes
   155 00003FB7 B261                <1>     mov dl, "a"
   156 00003FB9 B402                <1>     mov ah, 02h
   157 00003FBB CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003FBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003FBE 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003FC3 E830000000          <1>     call .printHours
   163 00003FC8 E807000000          <1>     call .printMinutes
   164 00003FCD B270                <1>     mov dl, "p"
   165 00003FCF B402                <1>     mov ah, 02h
   166 00003FD1 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003FD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00003FD4 8A1567C0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00003FDA B402                <1>     mov ah, 02h
   171 00003FDC CD21                <1>     int 21h
   172                              <1> 
   173 00003FDE 89C8                <1>     mov eax, ecx
   174 00003FE0 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00003FE5 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00003FE8 51                  <1>     push rcx
   178 00003FE9 E81D050000          <1>     call getDecimalWord
   179 00003FEE 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00003FF0 7514                <1>     jnz .skipSpace
   181 00003FF2 88CD                <1>     mov ch, cl
   182 00003FF4 B130                <1>     mov cl, "0"
   183 00003FF6 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 00003FF8 51                  <1>     push rcx
   186 00003FF9 E80D050000          <1>     call getDecimalWord
   187 00003FFE 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00004000 7504                <1>     jnz .skipSpace
   189 00004002 88CD                <1>     mov ch, cl
   190 00004004 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00004006 88CA                <1>     mov dl, cl
   193 00004008 B402                <1>     mov ah, 02h
   194 0000400A CD21                <1>     int 21h
   195 0000400C 88EA                <1>     mov dl, ch
   196 0000400E B402                <1>     mov ah, 02h
   197 00004010 CD21                <1>     int 21h
   198 00004012 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00004013 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00004014 F60583C0FFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000401B 74(13)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 0000401D 488D3D0DCFFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 00004024 E816060000          <1>     call searchForEnvVar
   206 00004029 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 0000402B E8F9000000          <1>     call putCWDInPrompt
   209 00004030 E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00004035 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00004036 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 0000403D AC                  <1>     lodsb   ;Get the char
   216 0000403E 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004040 74(35)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00004042 3C24                <1>     cmp al, "$"
   219 00004044 7409                <1>     je .escapeChar
   220 00004046 88C2                <1>     mov dl, al
   221 00004048 E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 0000404D EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 0000404F AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 00004050 E87D020000          <1>     call ucChar ;Uppercase this char in al
   226 00004055 488D1D2A000000      <1>     lea rbx, .pTbl
   227 0000405C B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00004061 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00004063 740D                <1>     je .escapeFnd
   231 00004065 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 0000406C FFC9                <1>     dec ecx
   233 0000406E 75F1                <1>     jnz .escapeLp
   234 00004070 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00004072 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 00004079 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 0000407D 4801D8              <1>     add rax, rbx                ;Add these
   239 00004080 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00004081 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00004083 5E                  <1>     pop rsi
   242 00004084 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 00004086 42                  <1>     db "B", 
   247 00004087 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 00004089 44                  <1>     db "D", 
   249 0000408A 5D01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 0000408C 45                  <1>     db "E", 
   251 0000408D 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 0000408F 47                  <1>     db "G", 
   253 00004090 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00004092 48                  <1>     db "H", 
   255 00004093 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00004095 4C                  <1>     db "L", 
   257 00004096 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 00004098 4E                  <1>     db "N", 
   259 00004099 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 0000409B 50                  <1>     db "P", 
   261 0000409C A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 0000409E 51                  <1>     db "Q", 
   263 0000409F 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 000040A1 54                  <1>     db "T", 
   265 000040A2 F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 000040A4 56                  <1>     db "V", 
   267 000040A5 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 000040A7 5F                  <1>     db "_", 
   269 000040A8 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 000040AA 24                  <1>     db "$", 
   271 000040AB 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 000040AD 488D1536C8FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 000040B4 B800090000          <1>     mov eax, 0900h  ;Print string
   278 000040B9 CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 000040BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 000040BC 488D15D5CAFFFF      <1>     lea rdx, dosVer
   283 000040C3 B409                <1>     mov ah, 09h ;Print String
   284 000040C5 CD21                <1>     int 21h
   285 000040C7 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 000040C9 CD21                <1>     int 21h
   287 000040CB 50                  <1>     push rax    ;Save minor version
   288 000040CC E884010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 000040D1 E89C010000          <1>     call printPackedBCD ;Print al
   290 000040D6 B22E                <1>     mov dl, "."
   291 000040D8 B402                <1>     mov ah, 02h
   292 000040DA CD21                <1>     int 21h
   293 000040DC 58                  <1>     pop rax
   294 000040DD 88E0                <1>     mov al, ah  ;Get the minor version low
   295 000040DF E871010000          <1>     call hexToBCD
   296 000040E4 E889010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 000040E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 000040EA B21B                <1>     mov dl, ESC
   300 000040EC EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 000040EE B224                <1>     mov dl, "$"
   304 000040F0 EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 000040F2 B23D                <1>     mov dl, "="
   308 000040F4 EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 000040F6 B27C                <1>     mov dl, "|"
   312 000040F8 EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 000040FA B23E                <1>     mov dl, ">"
   316 000040FC EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 000040FE B23C                <1>     mov dl, "<"
   320 00004100 EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 00004102 488D158ACCFFFF      <1>     lea rdx, backSpace
   324 00004109 B903000000          <1>     mov ecx, 3
   325 0000410E BB01000000          <1>     mov ebx, 1
   326 00004113 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 00004118 CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 0000411A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 0000411B E88A010000          <1>     call getCurrentDrive
   332 00004120 0441                <1>     add al, "A" ;Convert to letter
   333 00004122 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 00004124 B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 00004126 CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 00004128 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 00004129 E87C010000          <1>     call getCurrentDrive
   340 0000412E 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 00004130 FEC2                <1>     inc dl
   342 00004132 0441                <1>     add al, "A" ;Convert to letter
   343 00004134 B43A                <1>     mov ah, ":"
   344 00004136 488D3D1DBFFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 0000413D 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 0000413F 8A05E4BEFFFF        <1>     mov al, byte [pathSep]
   347 00004145 AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 00004146 B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 00004148 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 0000414B CD21                <1>     int 21h
   351 0000414D 721F                <1>     jc .badDrive
   352 0000414F E874010000          <1>     call strlen
   353 00004154 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 0000415A B800400000          <1>     mov eax, 4000h ;Write to handle
   356 0000415F BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 00004164 488D15EFBEFFFF      <1>     lea rdx, currDirStr
   358 0000416B CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 0000416D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 0000416E 488D15EBCAFFFF      <1>     lea rdx, badDrvMsg
   363 00004175 E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 0000417A E847000000          <1>     call getTime
   367 0000417F 0FB6C5              <1>     movzx eax, ch
   368 00004182 E871FEFFFF          <1>     call printTime.printHours
   369 00004187 8A15B4BEFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   370 0000418D B402                <1>     mov ah, 02h
   371 0000418F CD21                <1>     int 21h
   372 00004191 0FB60518C5FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   373 00004198 E84BFEFFFF          <1>     call printTime.printMinutesAlt
   374 0000419D 8A159EBEFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   375 000041A3 B402                <1>     mov ah, 02h
   376 000041A5 CD21                <1>     int 21h
   377 000041A7 0FB60505C5FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   378 000041AE E835FEFFFF          <1>     call printTime.printMinutesAlt
   379 000041B3 B22E                <1>     mov dl, "."
   380 000041B5 B402                <1>     mov ah, 02h
   381 000041B7 CD21                <1>     int 21h
   382 000041B9 0FB605F2C4FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   383 000041C0 E823FEFFFF          <1>     call printTime.printMinutesAlt
   384                              <1>     return
    13                              <2> %%_ret:
    14 000041C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> getTime:
   386 000041C6 B42C                <1>     mov ah, 2Ch ;DOS get time
   387 000041C8 CD21                <1>     int 21h
   388                              <1>     ;CH = hour (0-23)
   389                              <1> 	;CL = minutes (0-59)
   390                              <1> 	;DH = seconds (0-59)
   391                              <1> 	;DL = hundredths (0-99)
   392 000041CA 880DE0C4FFFF        <1>     mov byte [td1], cl
   393 000041D0 882DDBC4FFFF        <1>     mov byte [td2], ch
   394 000041D6 8815D6C4FFFF        <1>     mov byte [td3], dl
   395 000041DC 8835D1C4FFFF        <1>     mov byte [td4], dh
   396                              <1>     return
    13                              <2> %%_ret:
    14 000041E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> printFmtDate:
   399                              <1> ;Outputs the formatted date
   400 000041E3 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   401 000041E8 CD21                <1>     int 21h
   402                              <1> 	;AL = day of the week (0=Sunday)
   403                              <1> 	;CX = year (1980-2099)
   404                              <1> 	;DH = month (1-12)
   405                              <1> 	;DL = day (1-31)
   406 000041EA 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   407 000041EF 66890DBAC4FFFF      <1>     mov word [td1], cx
   408 000041F6 8815B6C4FFFF        <1>     mov byte [td3], dl
   409 000041FC 8835B1C4FFFF        <1>     mov byte [td4], dh
   410 00004202 0FB6C0              <1>     movzx eax, al
   411 00004205 89C3                <1>     mov ebx, eax
   412 00004207 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   413 00004209 01D8                <1>     add eax, ebx ;Make it 3 times 
   414 0000420B 488D15D0C8FFFF      <1>     lea rdx, dayName
   415 00004212 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   416 00004216 B903000000          <1>     mov ecx, 3  ;Print three chars
   417 0000421B BB01000000          <1>     mov ebx, 1  ;STDOUT
   418 00004220 B440                <1>     mov ah, 40h ;Write to handle
   419 00004222 CD21                <1>     int 21h
   420 00004224 B220                <1>     mov dl, " "
   421 00004226 E8F9FEFFFF          <1>     call outChar
   422                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   423                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   424                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   425 0000422B 0FB7057EC4FFFF      <1>     movzx eax, word [td1]   ;Get this word
   426 00004232 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   427 00004235 0FB61D77C4FFFF      <1>     movzx ebx, byte [td4]
   428 0000423C C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   429 0000423F 09D8                <1>     or eax, ebx ;Add this date to eax
   430 00004241 0FB61D6AC4FFFF      <1>     movzx ebx, byte [td3]
   431 00004248 09D8                <1>     or eax, ebx
   432 0000424A BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   433 0000424F E810FCFFFF          <1>     call printDate
   434                              <1>     return
    13                              <2> %%_ret:
    14 00004254 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> 
   437                              <1> hexToBCD:
   438                              <1> ;Converts a Hex byte into two BCD digits
   439                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   440 00004255 51                  <1>     push rcx
   441 00004256 0FB6C0              <1>     movzx eax, al   ;Zero extend
   442 00004259 31C9                <1>     xor ecx, ecx
   443                              <1> .htb0:
   444 0000425B 3D0A000000          <1>     cmp eax, 10
   445 00004260 7209                <1>     jb .htb1
   446 00004262 2D0A000000          <1>     sub eax, 10
   447 00004267 FFC1                <1>     inc ecx
   448 00004269 EBF0                <1>     jmp short .htb0
   449                              <1> .htb1:
   450 0000426B C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   451 0000426E 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   452 00004270 59                  <1>     pop rcx
   453 00004271 C3                  <1>     ret
   454                              <1> 
   455                              <1> printPackedBCD:
   456                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   457                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   458                              <1> ;Preserves all registers
   459 00004272 50                  <1>     push rax
   460 00004273 52                  <1>     push rdx
   461 00004274 88C4                <1>     mov ah, al
   462 00004276 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   463 00004278 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   464 0000427B 7508                <1>     jnz .upperNybble
   465 0000427D B220                <1>     mov dl, " "
   466 0000427F B402                <1>     mov ah, 02h
   467 00004281 CD21                <1>     int 21h
   468 00004283 EB0E                <1>     jmp short .lowerNybble
   469                              <1> .upperNybble:
   470 00004285 50                  <1>     push rax
   471 00004286 C0EC04              <1>     shr ah, 4
   472 00004289 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   473 0000428C 88E2                <1>     mov dl, ah
   474 0000428E B402                <1>     mov ah, 02h ;Print DL
   475 00004290 CD21                <1>     int 21h
   476 00004292 58                  <1>     pop rax
   477                              <1> .lowerNybble:
   478 00004293 0430                <1>     add al, "0"
   479 00004295 88C2                <1>     mov dl, al
   480 00004297 B402                <1>     mov ah, 02h ;Print DL
   481 00004299 CD21                <1>     int 21h
   482 0000429B 5A                  <1>     pop rdx
   483 0000429C 58                  <1>     pop rax
   484                              <1>     return
    13                              <2> %%_ret:
    14 0000429D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> setDrive:
   487                              <1> ;Input: dl = 0 based Drive number to set to
   488                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   489                              <1> ;AX trashed.
   490 0000429E B40E                <1>     mov ah, 0Eh ;Set drive to dl
   491 000042A0 CD21                <1>     int 21h 
   492 000042A2 E803000000          <1>     call getCurrentDrive
   493 000042A7 38D0                <1>     cmp al, dl  ;Is this the same drive?
   494                              <1>     return
    13                              <2> %%_ret:
    14 000042A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> getCurrentDrive:
   496                              <1> ;Returns the 0 based current drive in al
   497 000042AA B419                <1>     mov ah, 19h
   498 000042AC CD21                <1>     int 21h
   499                              <1>     return
    13                              <2> %%_ret:
    14 000042AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strcpy:
   502                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   503                              <1> ;rsi -> Source
   504                              <1> ;rdi -> Destination
   505 000042AF 51                  <1>     push rcx
   506 000042B0 57                  <1>     push rdi
   507 000042B1 4889F7              <1>     mov rdi, rsi
   508 000042B4 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   509 000042B9 5F                  <1>     pop rdi
   510 000042BA F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   511 000042BC 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 000042BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> strcpy2:
   515                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   516                              <1> ;rsi -> Source
   517                              <1> ;rdi -> Destination
   518 000042BE 56                  <1>     push rsi
   519 000042BF 57                  <1>     push rdi
   520 000042C0 E8EAFFFFFF          <1>     call strcpy 
   521 000042C5 5F                  <1>     pop rdi
   522 000042C6 5E                  <1>     pop rsi
   523                              <1>     return
    13                              <2> %%_ret:
    14 000042C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strlen:
   526                              <1> ;Gets the length of a ASCIIZ string
   527                              <1> ;Input: rdi = Source buffer
   528                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   529 000042C8 50                  <1>     push rax
   530 000042C9 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   531 000042CE CD2F                <1>     int 2fh
   532 000042D0 58                  <1>     pop rax
   533                              <1>     return
    13                              <2> %%_ret:
    14 000042D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> 
   535                              <1> ucChar:
   536                              <1> ;Input: al = Char to uppercase
   537                              <1> ;Output: al = Adjusted char 
   538 000042D2 53                  <1>     push rbx
   539 000042D3 50                  <1>     push rax    ;Push the char twice on the stack
   540 000042D4 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   541 000042D9 CD2F                <1>     int 2fh         ;Returns the processed char in al
   542 000042DB 5B                  <1>     pop rbx         ;Pop the old word off the stack
   543 000042DC 5B                  <1>     pop rbx
   544                              <1>     return
    13                              <2> %%_ret:
    14 000042DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> 
   546                              <1> normalisePath:
   547                              <1> ;Uppercases chars and flips pathseps
   548                              <1> ;Input: rsi -> Path to normalise
   549 000042DE 50                  <1>     push rax
   550 000042DF 57                  <1>     push rdi
   551 000042E0 4889F7              <1>     mov rdi, rsi
   552 000042E3 B811120000          <1>     mov eax, 1211h
   553 000042E8 CD2F                <1>     int 2fh
   554 000042EA 5F                  <1>     pop rdi
   555 000042EB 58                  <1>     pop rax
   556                              <1>     return
    13                              <2> %%_ret:
    14 000042EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> skipDelimiters:
   559                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   560                              <1> ; command delimiters but a subset thereof. 
   561                              <1> ;These are the same across all codepages.
   562                              <1> ;Input: rsi must point to the start of the data string
   563                              <1> ;Output: rsi points to the first non-delimiter char
   564 000042ED 50                  <1>     push rax
   565                              <1> .l1:
   566 000042EE AC                  <1>     lodsb
   567 000042EF E807000000          <1>     call isALdelimiter
   568 000042F4 74F8                <1>     jz .l1
   569                              <1> .exit:
   570 000042F6 58                  <1>     pop rax
   571 000042F7 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   572                              <1>     return
    13                              <2> %%_ret:
    14 000042FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> isALdelimiter:
   575                              <1> ;Returns: ZF=NZ if al is not a command separator 
   576                              <1> ;         ZF=ZE if al is a command separator
   577 000042FB 3C20                <1>     cmp al, " "
   578                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000042FD 74(FA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   579 000042FF 3C3B                <1>     cmp al, ";"
   580                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004301 74(FA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   581 00004303 3C3D                <1>     cmp al, "="
   582                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004305 74(FA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   583 00004307 3C2C                <1>     cmp al, ","
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004309 74(FA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 0000430B 3C09                <1>     cmp al, TAB
   586                              <1>     return
    13                              <2> %%_ret:
    14 0000430D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   587                              <1> 
   588                              <1> clearCommandState:
   589                              <1> ;Clears the command state
   590 0000430E 488D3D97BDFFFF      <1>     lea rdi, cmdStatePtr
   591 00004315 B907000000          <1>     mov ecx, cmdStateL
   592 0000431A 31C0                <1>     xor eax, eax
   593 0000431C F3AA                <1>     rep stosb
   594                              <1>     return
    13                              <2> %%_ret:
    14 0000431E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   595                              <1> 
   596                              <1> clearCommandLineState:
   597                              <1> ;Clears the command line state after a 0Dh encountered
   598 0000431F 488D3D7BBDFFFF      <1>     lea rdi, cmdLineStatePtr
   599 00004326 B912000000          <1>     mov ecx, cmdLineStateL
   600 0000432B 31C0                <1>     xor eax, eax
   601 0000432D F3AA                <1>     rep stosb
   602 0000432F C70569BDFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   602 00004338 FF                  <1>
   603 00004339 C70565BDFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   603 00004342 FF                  <1>
   604                              <1> ;Close all handles from 5->MAX
   605 00004343 0FB70DDDBCFFFF      <1>     movzx ecx, word [numHdls]
   606 0000434A BB05000000          <1>     mov ebx, 5
   607                              <1> .lp:
   608 0000434F B43E                <1>     mov ah, 3Eh ;File close
   609 00004351 CD21                <1>     int 21h
   610 00004353 FFC3                <1>     inc ebx ;Goto next file
   611 00004355 39CB                <1>     cmp ebx, ecx
   612 00004357 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   613                              <1>     return
    13                              <2> %%_ret:
    14 00004359 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   614                              <1> 
   615                              <1> asciiFilenameToFCB:
   616                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   617                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   618                              <1> ;Also doesn't check if chars are valid
   619                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   620                              <1> ;Name is space padded.
   621                              <1> ;Input: rsi = ASCII string buffer
   622                              <1> ;       rdi = FCB name buffer
   623                              <1> ;Output: al = Char that terminated the source string 
   624 0000435A 53                  <1>     push rbx    
   625 0000435B 57                  <1>     push rdi
   626 0000435C B90B000000          <1>     mov ecx, 11
   627 00004361 B020                <1>     mov al, " "
   628 00004363 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   629 00004365 5F                  <1>     pop rdi
   630 00004366 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   631                              <1>     ;Preprocess for Dir Searches
   632 00004369 803E2E              <1>     cmp byte [rsi], "."
   633 0000436C 7509                <1>     jne .processName
   634 0000436E A4                  <1>     movsb   ;Store the first dot
   635 0000436F 803E2E              <1>     cmp byte [rsi], "."
   636 00004372 752C                <1>     jne .exitBadChar
   637 00004374 A4                  <1>     movsb
   638 00004375 EB29                <1>     jmp short .exitBadChar
   639                              <1> .processName:
   640 00004377 AC                  <1>     lodsb   ;Get the char in al
   641 00004378 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   642 0000437A 7426                <1>     jz .exit
   643 0000437C 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   644 0000437E 7407                <1>     je .extSpace
   645 00004380 3C2E                <1>     cmp al, "."
   646 00004382 740C                <1>     je .ext
   647 00004384 AA                  <1>     stosb   ;Store the char
   648 00004385 EBF0                <1>     jmp short .processName
   649                              <1> .extSpace:
   650                              <1> ;Now we scan for a period in the name
   651 00004387 AC                  <1>     lodsb   ;Get a char and increase rsi
   652 00004388 84C0                <1>     test al, al
   653 0000438A 7416                <1>     jz .exit
   654 0000438C 3C2E                <1>     cmp al, "."     ;If al is not a period...
   655 0000438E 75F7                <1>     jne .extSpace   ; keep searching
   656                              <1> .ext:
   657 00004390 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   658                              <1> .processExt:
   659 00004394 AC                  <1>     lodsb
   660 00004395 84C0                <1>     test al, al
   661 00004397 7409                <1>     jz .exit
   662 00004399 3C20                <1>     cmp al, " "
   663 0000439B 7405                <1>     je .exit
   664 0000439D AA                  <1>     stosb
   665 0000439E EBF4                <1>     jmp short .processExt
   666                              <1> .exitBadChar:
   667 000043A0 30C0                <1>     xor al, al  ;Return a null terminator
   668                              <1> .exit:
   669 000043A2 5B                  <1>     pop rbx
   670                              <1>     return
    13                              <2> %%_ret:
    14 000043A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> 
   672                              <1> findLastPathComponant:
   673                              <1> ;Finds the last path componant of an ASCIIZ path string
   674                              <1> ;Input: rdi -> Head of the path to find last componant on
   675                              <1> ;Output: rdi -> Start of the last componant
   676 000043A4 50                  <1>     push rax
   677 000043A5 51                  <1>     push rcx
   678 000043A6 31C9                <1>     xor ecx, ecx
   679 000043A8 FFC9                <1>     dec ecx
   680 000043AA 31C0                <1>     xor eax, eax
   681 000043AC F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   682 000043AE F7D1                <1>     not ecx     ;This gets the count of chars  
   683 000043B0 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   684 000043B3 8A0570BCFFFF        <1>     mov al, byte [pathSep]
   685 000043B9 FD                  <1>     std
   686 000043BA F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   687 000043BC FC                  <1>     cld
   688 000043BD 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   689 000043BF 48FFC7              <1>     inc rdi     ;Point at pathsep
   690                              <1> .exit:
   691 000043C2 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   692 000043C5 59                  <1>     pop rcx
   693 000043C6 58                  <1>     pop rax
   694                              <1>     return
    13                              <2> %%_ret:
    14 000043C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> FCBToAsciiz:
   697                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   698                              <1> ;Name is space padded too
   699                              <1> ;Input: rsi = FCB name buffer
   700                              <1> ;       rdi = ASCIIZ string buffer
   701 000043C8 B908000000          <1>     mov ecx, 8
   702 000043CD F3A4                <1>     rep movsb   ;Move the name over
   703                              <1> .scanNameSpace:
   704 000043CF 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   705 000043D3 750D                <1>     jne .ext
   706 000043D5 48FFCF              <1>     dec rdi
   707 000043D8 FFC1                <1>     inc ecx
   708 000043DA 81F908000000        <1>     cmp ecx, 8
   709 000043E0 72ED                <1>     jb .scanNameSpace
   710                              <1> .ext:
   711 000043E2 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   712 000043E7 7506                <1>     jne .validExt
   713 000043E9 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   714 000043ED 7415                <1>     je .exit
   715                              <1> .validExt:
   716 000043EF B02E                <1>     mov al, "." ;We have a valid extension, store a period
   717 000043F1 AA                  <1>     stosb
   718 000043F2 B903000000          <1>     mov ecx, 3
   719 000043F7 F3A4                <1>     rep movsb   ;Move the three extension chars over
   720                              <1> .scanExtSpace:
   721 000043F9 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   722 000043FD 7505                <1>     jne .exit
   723 000043FF 48FFCF              <1>     dec rdi
   724 00004402 EBF5                <1>     jmp short .scanExtSpace
   725                              <1> .exit:
   726 00004404 31C0                <1>     xor eax, eax
   727 00004406 AA                  <1>     stosb   ;Store a null at the end
   728                              <1>     return
    13                              <2> %%_ret:
    14 00004407 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   729                              <1> 
   730                              <1> cpDelimOrCtrlStringToBufz:
   731                              <1> ;Copy a delimited or control char terminated string to a buffer
   732                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   733                              <1> ;       rdi -> Buffer to store null terminated string in
   734                              <1> ;Output: rsi -> First char past string end
   735                              <1> ;       rdi -> One char past null terminator on string buffer
   736 00004408 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   737                              <1> .lp:
   738 0000440B AC                  <1>     lodsb
   739 0000440C 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   740 0000440E 760A                <1>     jbe .exit
   741 00004410 E8E6FEFFFF          <1>     call isALdelimiter
   742 00004415 7403                <1>     je .exit
   743 00004417 AA                  <1>     stosb
   744 00004418 EBF1                <1>     jmp short .lp
   745                              <1> .exit:
   746 0000441A 31C0                <1>     xor eax, eax
   747 0000441C AA                  <1>     stosb   ;Store a null terminator
   748                              <1>     return
    13                              <2> %%_ret:
    14 0000441D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   749                              <1> 
   750                              <1> 
   751                              <1> cpDelimPathToBufz:
   752                              <1> ;Copy a delimited path into buffer and null terminate.
   753                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   754                              <1> ;       rdi -> Buffer to store null terminated path in
   755                              <1> ;Output: rsi -> First char past pathname delimiter
   756                              <1> ;       rdi -> One char past null terminator on pathname buffer
   757 0000441E 53                  <1>     push rbx
   758 0000441F 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   759 00004422 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   760                              <1> .lp:
   761 00004425 AC                  <1>     lodsb   ;Get the char
   762 00004426 3C0D                <1>     cmp al, CR
   763 00004428 7412                <1>     je .gotRedirPath
   764 0000442A E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   765 0000442F 740B                <1>     jz .gotRedirPath 
   766 00004431 3A05F3BBFFFF        <1>     cmp al, byte [switchChar]
   767 00004437 7403                <1>     je .gotRedirPath
   768 00004439 AA                  <1>     stosb   ;Store this char and loop next char
   769 0000443A EBE9                <1>     jmp short .lp
   770                              <1> .gotRedirPath:
   771 0000443C 50                  <1>     push rax    ;Save the char on stack
   772 0000443D 30C0                <1>     xor al, al  ;Get null terminator char
   773 0000443F 4829FB              <1>     sub rbx, rdi
   774 00004442 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   775 00004449 7412                <1>     je .notColon
   776 0000444B 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   777 00004452 7409                <1>     je .notColon
   778 00004454 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   779 00004458 7503                <1>     jne .notColon
   780 0000445A 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   781                              <1> .notColon:
   782 0000445D AA                  <1>     stosb   ;Store the null terminator for the redir path
   783 0000445E 58                  <1>     pop rax ;Get back the char in al
   784 0000445F 5B                  <1>     pop rbx
   785                              <1>     return
    13                              <2> %%_ret:
    14 00004460 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   786                              <1> 
   787                              <1> buildCommandPath:
   788                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   789 00004461 0FB60545BCFFFF      <1>     movzx eax, byte [arg1Off]
   790 00004468 4C8B05A0BBFFFF      <1>     mov r8, [pspPtr]
   791 0000446F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   792 00004476 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   793                              <1> copyArgumentToSearchSpec:
   794                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   795                              <1> ; and null terminates
   796 00004479 488D3D67C0FFFF      <1>     lea rdi, searchSpec
   797 00004480 E899FFFFFF          <1>     call cpDelimPathToBufz
   798                              <1>     return
    13                              <2> %%_ret:
    14 00004485 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> 
   800                              <1> scanForWildcards:
   801                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   802                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   803 00004486 50                  <1>     push rax
   804 00004487 56                  <1>     push rsi
   805                              <1> .lp:
   806 00004488 AC                  <1>     lodsb
   807 00004489 3C3F                <1>     cmp al, "?"
   808 0000448B 740A                <1>     je .exit
   809 0000448D 3C2A                <1>     cmp al, "*"
   810 0000448F 7406                <1>     je .exit
   811 00004491 84C0                <1>     test al, al
   812 00004493 75F3                <1>     jnz .lp
   813 00004495 FEC0                <1>     inc al  ;This will clear the ZF
   814                              <1> .exit:
   815 00004497 5E                  <1>     pop rsi
   816 00004498 58                  <1>     pop rax
   817                              <1>     return
    13                              <2> %%_ret:
    14 00004499 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> 
   819                              <1> printDecimalWord:
   820                              <1> ;Takes qword in rax and print it's decimal representation
   821                              <1> ;Takes the qword in eax and prints its decimal representation
   822 0000449A 31C9                <1>     xor ecx, ecx
   823 0000449C 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   824 0000449E 85C0                <1>     test eax, eax
   825 000044A0 750C                <1>     jnz .notZero
   826 000044A2 B930000000          <1>     mov ecx, "0"
   827 000044A7 BD01000000          <1>     mov ebp, 1  ;Print one digit
   828 000044AC EB3E                <1>     jmp short .dpfb2
   829                              <1> .notZero:
   830 000044AE 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   831 000044B0 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   832                              <1> .dpfb0:
   833 000044B5 FFC5                <1>     inc ebp
   834 000044B7 81FD08000000        <1>     cmp ebp, 8
   835 000044BD 7206                <1>     jb .dpfb00
   836 000044BF 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   837 000044C3 EB04                <1>     jmp short .dpfb01
   838                              <1> .dpfb00:
   839 000044C5 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   840                              <1> .dpfb01:
   841 000044C9 31D2                <1>     xor edx, edx
   842 000044CB 48F7F6              <1>     div rsi
   843 000044CE 80C230              <1>     add dl, '0'
   844 000044D1 80FA39              <1>     cmp dl, '9'
   845 000044D4 7603                <1>     jbe .dpfb1
   846 000044D6 80C207              <1>     add dl, 'A'-'0'-10
   847                              <1> .dpfb1:
   848 000044D9 81FD08000000        <1>     cmp ebp, 8
   849 000044DF 7204                <1>     jb .dpfb10
   850 000044E1 88D3                <1>     mov bl, dl ;Add the bottom bits
   851 000044E3 EB02                <1>     jmp short .dpfb11
   852                              <1> .dpfb10:
   853 000044E5 88D1                <1>     mov cl, dl    ;Save remainder byte
   854                              <1> .dpfb11:
   855 000044E7 4885C0              <1>     test rax, rax
   856 000044EA 75C9                <1>     jnz .dpfb0
   857                              <1> .dpfb2:
   858 000044EC 81FD08000000        <1>     cmp ebp, 8
   859 000044F2 7208                <1>     jb .dpfb20
   860 000044F4 88DA                <1>     mov dl, bl
   861 000044F6 48C1EB08            <1>     shr rbx, 8
   862 000044FA EB06                <1>     jmp short .dpfb21
   863                              <1> .dpfb20:
   864 000044FC 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   865 000044FE 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   866                              <1> .dpfb21:
   867 00004502 B402                <1>     mov ah, 02h
   868 00004504 CD21                <1>     int 21h
   869 00004506 FFCD                <1>     dec ebp
   870 00004508 75E2                <1>     jnz .dpfb2
   871                              <1>     return
    13                              <2> %%_ret:
    14 0000450A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   872                              <1> 
   873                              <1> getDecimalWord:
   874                              <1> ;Works on MAX A dword in eax
   875                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   876 0000450B 31C9                <1>     xor ecx, ecx
   877 0000450D 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   878 0000450F BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   879                              <1> .dpfb0:
   880 00004514 FFC5                <1>     inc ebp
   881 00004516 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   882 0000451A 31D2                <1>     xor edx, edx
   883 0000451C 48F7F3              <1>     div rbx
   884 0000451F 80C230              <1>     add dl, '0'
   885 00004522 80FA39              <1>     cmp dl, '9'
   886 00004525 7603                <1>     jbe .dpfb1
   887 00004527 80C207              <1>     add dl, 'A'-'0'-10
   888                              <1> .dpfb1:
   889 0000452A 88D1                <1>     mov cl, dl    ;Save remainder byte
   890 0000452C 4885C0              <1>     test rax, rax
   891 0000452F 75E3                <1>     jnz .dpfb0
   892                              <1>     return
    13                              <2> %%_ret:
    14 00004531 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   893                              <1> getByte:
   894                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   895 00004532 E807000000          <1>     call getNum
   896 00004537 3D00010000          <1>     cmp eax, 100h
   897 0000453C F5                  <1>     cmc
   898                              <1>     return
    13                              <2> %%_ret:
    14 0000453D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   899                              <1> getNum:
   900                              <1> ;Gets a number from a command line.
   901                              <1> ;Input: rsi -> String to get number from
   902                              <1> ;Output: rsi -> Char which terminated the accumulation
   903                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   904 0000453E 51                  <1>     push rcx
   905 0000453F 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   906                              <1> .lp:
   907 00004541 AC                  <1>     lodsb
   908 00004542 3C30                <1>     cmp al, "0"
   909 00004544 7210                <1>     jb .exit
   910 00004546 3C39                <1>     cmp al, "9"
   911 00004548 770C                <1>     ja .exit
   912 0000454A 2C30                <1>     sub al, "0"                     ;Convert to binary 
   913 0000454C 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   914 00004550 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   915 00004552 01C1                <1>     add ecx, eax
   916 00004554 EBEB                <1>     jmp short .lp   ;Get next digit
   917                              <1> .exit:
   918 00004556 89C8                <1>     mov eax, ecx
   919 00004558 59                  <1>     pop rcx
   920 00004559 48FFCE              <1>     dec rsi
   921                              <1>     return
    13                              <2> %%_ret:
    14 0000455C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   922                              <1> 
   923                              <1> 
   924                              <1> freezePC:
   925 0000455D 488D1541C9FFFF      <1>     lea rdx, memBad1
   926 00004564 B409                <1>     mov ah, 09h
   927 00004566 CD21                <1>     int 21h
   928                              <1> .altEP:
   929 00004568 488D155FC9FFFF      <1>     lea rdx, memBad3
   930 0000456F B409                <1>     mov ah, 09h
   931 00004571 CD21                <1>     int 21h
   932                              <1> .lp:
   933 00004573 F390                <1>     pause
   934 00004575 F4                  <1>     hlt
   935 00004576 EBFB                <1>     jmp short .lp
   936                              <1> 
   937                              <1> setDTA:
   938 00004578 50                  <1>     push rax
   939 00004579 52                  <1>     push rdx
   940 0000457A 488D15ECBBFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   941 00004581 B8001A0000          <1>     mov eax, 1A00h
   942 00004586 CD21                <1>     int 21h
   943 00004588 5A                  <1>     pop rdx
   944 00004589 58                  <1>     pop rax
   945                              <1>     return
    13                              <2> %%_ret:
    14 0000458A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   946                              <1> 
   947                              <1> getDTA:
   948 0000458B 488D15DBBBFFFF      <1>     lea rdx, cmdFFBlock
   949                              <1>     return
    13                              <2> %%_ret:
    14 00004592 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   950                              <1> 
   951                              <1> resetIDTentries:
   952                              <1> ;Resets the IDT entries
   953 00004593 488D159C020000      <1>     lea rdx, critErrorHandler
   954 0000459A 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
   955 0000459E B824250000          <1>     mov eax, 2524h
   956 000045A3 CD21                <1>     int 21h
   957 000045A5 488D157F010000      <1>     lea rdx, int23h
   958 000045AC 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
   959 000045B0 B823250000          <1>     mov eax, 2523h
   960 000045B5 CD21                <1>     int 21h
   961 000045B7 488D1544CFFFFF      <1>     lea rdx, appRet
   962 000045BE 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
   963 000045C2 B822250000          <1>     mov eax, 2522h
   964 000045C7 CD21                <1>     int 21h
   965                              <1>     return
    13                              <2> %%_ret:
    14 000045C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   966                              <1> 
   967                              <1> ;-------------------------------
   968                              <1> ; Environment utility functions
   969                              <1> ;-------------------------------
   970                              <1> 
   971                              <1> cmpEnvVar:
   972                              <1> ;Checks that we have found the environment variable we are looking for.
   973                              <1> ;Input: rsi -> Environment var to verify the name of
   974                              <1> ;       rdi -> Environment var name to compare against
   975                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   976 000045CA 56                  <1>     push rsi
   977 000045CB 57                  <1>     push rdi
   978 000045CC 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   979                              <1> .lp:
   980 000045CF AC                  <1>     lodsb               ;Pick up from user string
   981 000045D0 E8FDFCFFFF          <1>     call ucChar         ;Upper case it!
   982 000045D5 3807                <1>     cmp byte [rdi], al  
   983 000045D7 7509                <1>     jne .exit
   984 000045D9 3C3D                <1>     cmp al, "="         ;Are we at the end?
   985 000045DB 7405                <1>     je .exit
   986 000045DD 48FFC7              <1>     inc rdi
   987 000045E0 EBED                <1>     jmp short .lp
   988                              <1> .exit:
   989 000045E2 5F                  <1>     pop rdi
   990 000045E3 5E                  <1>     pop rsi
   991                              <1>     return
    13                              <2> %%_ret:
    14 000045E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   992                              <1> 
   993                              <1> checkEnvGoodAndGet:
   994                              <1> ;Gets the env ptr and checks that it is double null terminated.
   995                              <1> ;Output:
   996                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   997                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   998                              <1> ;           rsi -> Environment pointer
   999 000045E5 50                  <1>     push rax
  1000 000045E6 51                  <1>     push rcx
  1001 000045E7 57                  <1>     push rdi
  1002 000045E8 4150                <1>     push r8
  1003 000045EA 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1004 000045EE 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1005 000045F1 741A                <1>     jz .badExit
  1006 000045F3 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1007 000045F6 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1008                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1009 000045F9 31C0                <1>     xor eax, eax
  1010                              <1> .pathNulScan:
  1011 000045FB F2AE                <1>     repne scasb
  1012 000045FD 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1013 000045FF 740C                <1>     jz .badExit
  1014 00004601 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1015 00004603 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1016 00004605 31C0                <1>     xor eax, eax
  1017 00004607 FFC0                <1>     inc eax ;Clear the ZF
  1018 00004609 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1019                              <1> .badExit:
  1020 0000460D 4158                <1>     pop r8
  1021 0000460F 5F                  <1>     pop rdi
  1022 00004610 59                  <1>     pop rcx
  1023 00004611 58                  <1>     pop rax
  1024                              <1>     return
    13                              <2> %%_ret:
    14 00004612 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1025                              <1> 
  1026                              <1> 
  1027                              <1> findEnvSpace:
  1028                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1029                              <1> ; free space in the pointer and a count of free space in the environment.
  1030                              <1> ;If count is zero, pointer is not to be used.
  1031                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1032 00004613 31C9                <1>     xor ecx, ecx
  1033 00004615 31C0                <1>     xor eax, eax    ;Clear eax too
  1034 00004617 51                  <1>     push rcx
  1035 00004618 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1036 0000461D 59                  <1>     pop rcx
  1037                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000461E 74(12)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1038 00004620 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1039 00004624 FFC9                <1>     dec ecx ;Make into a large counter
  1040 00004626 4889F7              <1>     mov rdi, rsi    
  1041                              <1> .endsearch:
  1042 00004629 F2AE                <1>     repne scasb ;Scan
  1043 0000462B 803F00              <1>     cmp byte [rdi], 0
  1044 0000462E 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1045                              <1>     ;Here we are at the end of the environment
  1046 00004630 F7D9                <1>     neg ecx
  1047 00004632 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1048 00004634 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1049 00004637 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1050 0000463A 29C8                <1>     sub eax, ecx
  1051 0000463C 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1052                              <1>     return
    13                              <2> %%_ret:
    14 0000463E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1053                              <1> 
  1054                              <1> searchForEnvVar:
  1055                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1056                              <1> ;Input: rdi -> Var name to look for.
  1057                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1058 0000463F 57                  <1>     push rdi
  1059 00004640 51                  <1>     push rcx
  1060 00004641 52                  <1>     push rdx
  1061 00004642 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1062 00004646 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1063                              <1> .varLp:
  1064 00004649 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1065 0000464C E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1066 00004651 7416                <1>     je .varFound
  1067 00004653 31C0                <1>     xor eax, eax        ;Search for a null
  1068 00004655 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1069 00004658 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1070 0000465D F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1071 0000465F 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1072 00004661 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1073 00004663 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1074 00004666 EBE1                <1>     jmp short .varLp    ;And scan again!
  1075                              <1> .varNotFound:
  1076 00004668 F9                  <1>     stc
  1077                              <1> .varFound:
  1078 00004669 59                  <1>     pop rcx
  1079 0000466A 5A                  <1>     pop rdx
  1080 0000466B 5F                  <1>     pop rdi
  1081                              <1>     return
    13                              <2> %%_ret:
    14 0000466C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1082                              <1> 
  1083                              <1> envFree:
  1084                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1085                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1086                              <1> ; free byte of the environment!
  1087                              <1> ;Input: rsi -> Variable to free.
  1088                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1089                              <1> ;        ecx = Number of free bytes in env
  1090 0000466D 4889F7              <1>     mov rdi, rsi
  1091 00004670 31C0                <1>     xor eax, eax
  1092                              <1> .freeLp:
  1093 00004672 803F00              <1>     cmp byte [rdi], 0
  1094 00004675 7403                <1>     je .exitLp
  1095 00004677 AA                  <1>     stosb
  1096 00004678 EBF8                <1>     jmp short .freeLp
  1097                              <1> .exitLp:
  1098                              <1> ;rdi points to the terminating null of the var we just deleted
  1099                              <1> ;rsi points to the start of the free space
  1100 0000467A 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1101 0000467D 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1102 00004682 7504                <1>     jne .prepPullup
  1103 00004684 31C0                <1>     xor eax, eax
  1104 00004686 EB0E                <1>     jmp short .cleanEnv
  1105                              <1> .prepPullup:
  1106 00004688 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1107                              <1> .pullUp:
  1108 0000468B AC                  <1>     lodsb
  1109 0000468C AA                  <1>     stosb
  1110 0000468D 84C0                <1>     test al, al ;Did we pick up a zero
  1111 0000468F 75FA                <1>     jne .pullUp ;If not, keep copying
  1112 00004691 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1113 00004694 75F5                <1>     jne .pullUp
  1114                              <1> ;We are at the end of the copy!
  1115                              <1> .cleanEnv:
  1116 00004696 AA                  <1>     stosb   ;Store the famous second null
  1117 00004697 48FFCF              <1>     dec rdi ;without incrementing it!!
  1118 0000469A E807000000          <1>     call getFreeSpace
  1119 0000469F 31C0                <1>     xor eax, eax
  1120 000046A1 51                  <1>     push rcx
  1121 000046A2 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1122 000046A4 59                  <1>     pop rcx
  1123                              <1>     return
    13                              <2> %%_ret:
    14 000046A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> 
  1125                              <1> getFreeSpace:
  1126                              <1> ;Output: ecx = Number of free bytes in the environment block
  1127 000046A6 56                  <1>     push rsi
  1128 000046A7 57                  <1>     push rdi
  1129 000046A8 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1130 000046AD 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1131 000046B1 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1132 000046B4 E805000000          <1>     call getEnvSize ;Get total block size
  1133 000046B9 29F9                <1>     sub ecx, edi    ;Get difference!
  1134 000046BB 5F                  <1>     pop rdi
  1135 000046BC 5E                  <1>     pop rsi
  1136                              <1>     return
    13                              <2> %%_ret:
    14 000046BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> 
  1138                              <1> getEnvSize:
  1139                              <1> ;Gets the number of bytes in the environment allocation
  1140                              <1> ;Output: ecx = Number of bytes in the environment!
  1141 000046BE 53                  <1>     push rbx
  1142 000046BF 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1143 000046C3 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1144 000046C6 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1145 000046C9 5B                  <1>     pop rbx
  1146                              <1>     return
    13                              <2> %%_ret:
    14 000046CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1147                              <1> 
  1148                              <1> getPtrToEndOfEnv:
  1149                              <1> ;Gets ptr to end of the environment
  1150                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1151 000046CB 50                  <1>     push rax
  1152 000046CC 51                  <1>     push rcx
  1153 000046CD 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1154 000046D1 31C0                <1>     xor eax, eax
  1155 000046D3 31C9                <1>     xor ecx, ecx
  1156 000046D5 FFC9                <1>     dec ecx
  1157                              <1> .lp:
  1158 000046D7 F2AE                <1>     repne scasb
  1159 000046D9 3807                <1>     cmp byte [rdi], al
  1160 000046DB 75FA                <1>     jne .lp
  1161 000046DD 59                  <1>     pop rcx
  1162 000046DE 58                  <1>     pop rax
  1163                              <1>     return
    13                              <2> %%_ret:
    14 000046DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1164                              <1> 
  1165                              <1> growEnvBlock:
  1166                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1167                              <1> ; newly allocated 160 byte block of the environment.
  1168                              <1> ;Returns:   CF=NC - Environment grown ok!
  1169                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1170                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1171 000046E0 50                  <1>     push rax
  1172 000046E1 53                  <1>     push rbx
  1173 000046E2 51                  <1>     push rcx
  1174 000046E3 56                  <1>     push rsi
  1175 000046E4 57                  <1>     push rdi
  1176 000046E5 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1177 000046EA E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1178 000046EF 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1179 000046F3 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1180 000046F6 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1181 000046FC 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1182 00004702 7321                <1>     jae .tooLarge
  1183                              <1>     ;Here ZF must be NZ.
  1184 00004704 4150                <1>     push r8
  1185 00004706 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1186 0000470A B8004A0000          <1>     mov eax, 4A00h
  1187 0000470F CD21                <1>     int 21h
  1188 00004711 4158                <1>     pop r8
  1189 00004713 720A                <1>     jc .exit
  1190                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1191                              <1>     ; so we add 160 zeros to the count of bytes
  1192 00004715 81C1A0000000        <1>     add ecx, 0A0h
  1193 0000471B 31C0                <1>     xor eax, eax
  1194 0000471D F3AA                <1>     rep stosb
  1195                              <1> .exit:
  1196 0000471F 5F                  <1>     pop rdi
  1197 00004720 5E                  <1>     pop rsi
  1198 00004721 59                  <1>     pop rcx
  1199 00004722 5B                  <1>     pop rbx
  1200 00004723 58                  <1>     pop rax
  1201                              <1>     return
    13                              <2> %%_ret:
    14 00004724 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1202                              <1> .tooLarge:
  1203 00004725 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1204 00004728 F9                  <1>     stc             ;Set CF
  1205 00004729 EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> int23h:
     2 0000472B F6056BB9FFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 00004732 7411                <1>     jz .notLoading
     4 00004734 F60562B9FFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 0000473B 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 0000473D 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 00004743 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 00004745 F60551B9FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 0000474C 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 0000474E 84E4                <1>     test ah, ah
    17 00004750 7424                <1>     jz .inInt23 
    18 00004752 80FC0C              <1>     cmp ah, 0Ch
    19 00004755 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 00004757 50                  <1>     push rax
    23 00004758 488D0512000000      <1>     lea rax, .i23Bounce
    24 0000475F 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 00004764 31C0                <1>     xor eax, eax
    26 00004766 668CC8              <1>     mov ax, cs
    27 00004769 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 0000476E 58                  <1>     pop rax
    29 0000476F 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 00004771 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 00004776 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 00004778 800D1EB9FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 0000477F F60517B9FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 00004786 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 00004788 50                  <1>     push rax
    43 00004789 B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 0000478E CD21                <1>     int 21h
    45 00004790 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 00004791 F60505B9FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 00004798 744E                <1>     jz .notBat
    49 0000479A F605FCB8FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 000047A1 7545                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 000047A3 E805020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 000047A8 488D1598C1FFFF      <1>     lea rdx, batFail
    57 000047AF E800F9FFFF          <1>     call printString
    58 000047B4 488D159EB9FFFF      <1>     lea rdx, batYNstr
    59 000047BB B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    60 000047C0 CD21                <1>     int 21h
    61 000047C2 721D                <1>     jc .killBat         ;If we CTRL+C during this call, kill batch!
    62 000047C4 8A0592B9FFFF        <1>     mov al, byte [batYNstr + 3]
    63 000047CA E803FBFFFF          <1>     call ucChar         ;UC using DOS
    64 000047CF 3C59                <1>     cmp al, "Y"
    65 000047D1 740E                <1>     je .killBat
    66 000047D3 3C4E                <1>     cmp al, "N"
    67 000047D5 75D1                <1>     jne .ynLp
    68                              <1> .endBat:
    69                              <1> ;Tries to abort the Command interpreter, fails and 
    70                              <1> ; our internal state will proceed with batch processing. Doing this 
    71                              <1> ; ensures the command being interrupted is cancelled.
    72 000047D7 E8D1F8FFFF          <1>     call printCRLF
    73 000047DC E945000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    74                              <1> .killBat:   ;Now we need to terminate the batch file too.
    75 000047E1 E891D4FFFF          <1>     call batCleanup
    76 000047E6 EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    77                              <1> .notBat:
    78 000047E8 50                  <1>     push rax        ;Save rax, ah contains call we are in that ^C'ed
    79 000047E9 53                  <1>     push rbx
    80 000047EA B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
    81 000047EF CD21                <1>     int 21h
    82 000047F1 58                  <1>     pop rax
    83 000047F2 483B1D16B8FFFF      <1>     cmp rbx, qword [pspPtr] ;Was the task us?
    84 000047F9 5B                  <1>     pop rbx
    85 000047FA 752F                <1>     jne .exit       ;If not, then immediately abort it!
    86 000047FC F60528B8FFFFFF      <1>     test byte [permaSwitch], -1 ;If not permanent, skip parent PSP swap
    87 00004803 7516                <1>     jnz .noJuggle   ;Avoid setting "real parent"
    88                              <1>     ;Else, we juggle parent PSP's. This is done when /P is not specified
    89 00004805 50                  <1>     push rax
    90 00004806 53                  <1>     push rbx
    91 00004807 488B0509B8FFFF      <1>     mov rax, qword [realParent]
    92 0000480E 488B1DFAB7FFFF      <1>     mov rbx, qword [pspPtr]
    93 00004815 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
    94 00004819 5B                  <1>     pop rbx
    95 0000481A 58                  <1>     pop rax
    96                              <1> .noJuggle:
    97 0000481B 66813D7BB8FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    98 00004824 7405                <1>     je .exit
    99                              <1> .exitBat:
   100 00004826 E89F010000          <1>     call errRetHdls 
   101                              <1> .exit:
   102 0000482B 80256BB8FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
   103                              <1> .exitIn:
   104 00004832 F9                  <1>     stc     ;Set CF to kill the task
   105 00004833 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
   106                              <1> ;All we need is that the stack pointer is not at the address we had it
   107                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
   108                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004836 53                  <1>     push rbx
    25 00004837 51                  <1>     push rcx
    26 00004838 52                  <1>     push rdx
    27 00004839 57                  <1>     push rdi
    28 0000483A 56                  <1>     push rsi
    29 0000483B E86D010000          <1>     call errSwapHdls
    30 00004840 FC                  <1>     cld         ;Make String ops go forward
    31 00004841 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00004844 488D159FC0FFFF      <1>     lea rdx, crlf
    33 0000484B E864F8FFFF          <1>     call printString
    34                              <1> 
    35 00004850 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36                              <1> ;    cmp edi, 0Fh     ;Is this special case error 15h?
    37                              <1> ;    jne .notError15
    38                              <1> ; Need to do Extended Error call to get the ptr to the volume label.
    39                              <1> ; Disk driver doesnt currently update the volume label in the BPB and doesn't
    40                              <1> ; place the volume label in the field in the driver block, but DOS assumes it 
    41                              <1> ; does. Once that is implemented, I will activate this section of code!
    42                              <1> .notError15:
    43 00004856 B90C000000          <1>     mov ecx, 0Ch
    44 0000485B 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    45 0000485D 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    46 00004860 480FB7FF            <1>     movzx rdi, di
    47 00004864 4889FA              <1>     mov rdx, rdi    ;Copy error code
    48 00004867 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    49 0000486B 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    50 0000486E 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    51 00004871 488D15CEC6FFFF      <1>     lea rdx, errorMsgTable
    52 00004878 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    53 0000487C E833F8FFFF          <1>     call printString     ;Call DOS to print first part of message
    54                              <1> 
    55 00004881 488D15D0C7FFFF      <1>     lea rdx, readMsg
    56 00004888 488D3DD8C7FFFF      <1>     lea rdi, writeMsg
    57 0000488F F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    58 00004892 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    59 00004896 E819F8FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    60                              <1> 
    61 0000489B F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    62 0000489E 0F85EF000000        <1>     jnz .charError
    63                              <1> ;Disk error continues here
    64 000048A4 488D15A6C7FFFF      <1>     lea rdx, drvMsg ;Drive message
    65 000048AB E804F8FFFF          <1>     call printString
    66 000048B0 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    67 000048B2 80C241              <1>     add dl, "A" ;Add ASCII code
    68 000048B5 B402                <1>     mov ah, 02h ;Print char in dl
    69 000048B7 CD21                <1>     int 21h
    70                              <1> .userInput:
    71 000048B9 E8EFF7FFFF          <1>     call printCRLF  ;Print new line
    72                              <1> ;Abort, Retry, Ignore, Fail is word order
    73                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    74                              <1> .userAbort:
    75                              <1> ;Abort is always an option
    76 000048BE 488D15B1C7FFFF      <1>     lea rdx, abortMsg
    77 000048C5 E8EAF7FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 000048CA F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 000048CD 7418                <1>     jz .userIgnore    ;If clear, dont print message
    81 000048CF 488D15B8C7FFFF      <1>     lea rdx, betweenMsg
    82 000048D6 E8D9F7FFFF          <1>     call printString
    83 000048DB 488D15A1C7FFFF      <1>     lea rdx, retryMsg
    84 000048E2 E8CDF7FFFF          <1>     call printString
    85                              <1> .userIgnore:
    86 000048E7 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    87 000048EA 7418                <1>     jz .userFail
    88 000048EC 488D159BC7FFFF      <1>     lea rdx, betweenMsg
    89 000048F3 E8BCF7FFFF          <1>     call printString
    90 000048F8 488D157DC7FFFF      <1>     lea rdx, ignoreMsg
    91 000048FF E8B0F7FFFF          <1>     call printString
    92                              <1> .userFail:
    93 00004904 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    94 00004907 7418                <1>     jz .userMsgEnd
    95 00004909 488D157EC7FFFF      <1>     lea rdx, betweenMsg
    96 00004910 E89FF7FFFF          <1>     call printString
    97 00004915 488D156DC7FFFF      <1>     lea rdx, failMsg
    98 0000491C E893F7FFFF          <1>     call printString
    99                              <1> .userMsgEnd:
   100 00004921 488D1569C7FFFF      <1>     lea rdx, endMsg
   101 00004928 E887F7FFFF          <1>     call printString
   102                              <1> ;Get user input now 
   103 0000492D 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   104 0000492F 488D3D5EC7FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   105 00004936 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   106 0000493B CD21                <1>     int 21h ;Get char in al
   107 0000493D 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   108 0000493F 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   109 00004941 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   110                              <1> .uip1:
   111 00004943 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   112 00004944 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   113 00004946 FFC1                <1>     inc ecx
   114 00004948 81F904000000        <1>     cmp ecx, 4
   115 0000494E 75F3                <1>     jne .uip1
   116 00004950 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   117                              <1> .validInput:
   118 00004955 E853F7FFFF          <1>     call printCRLF   ;Note the input was accepted
   119 0000495A 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   120                              <1> ;Now check if the input is permitted
   121 0000495C 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   122 0000495E 7427                <1>     je .cehExit
   123 00004960 84C0                <1>     test al, al ;Check if 0 => Ignore
   124 00004962 740F                <1>     je .viIgnore
   125 00004964 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   126 00004966 7416                <1>     je .viRetry
   127                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   128 00004968 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   129 0000496B 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   130 00004971 EB14                <1>     jmp short .cehExit
   131                              <1> .viIgnore:
   132 00004973 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   133 00004976 0F843DFFFFFF        <1>     jz .userInput
   134 0000497C EB09                <1>     jmp short .cehExit
   135                              <1> .viRetry:
   136 0000497E F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   137 00004981 0F8432FFFFFF        <1>     jz .userInput
   138                              <1> .cehExit:
   139 00004987 E83E000000          <1>     call errRetHdls
   140 0000498C 5E                  <1>     pop rsi
   141 0000498D 5F                  <1>     pop rdi
   142 0000498E 5A                  <1>     pop rdx
   143 0000498F 59                  <1>     pop rcx
   144 00004990 5B                  <1>     pop rbx
   145 00004991 48CF                <1>     iretq
   146                              <1> .charError:
   147 00004993 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   148 00004998 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   149                              <1> .ce1:
   150 0000499F AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   151 000049A0 88C2                <1>     mov dl, al  ;Move char into dl
   152 000049A2 B402                <1>     mov ah, 02h
   153 000049A4 CD21                <1>     int 21h ;Print char
   154 000049A6 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   155 000049A8 E90CFFFFFF          <1>     jmp .userInput
   156                              <1> 
   157                              <1> 
   158                              <1> errSwapHdls:
   159                              <1> ;Swaps STDIO to STDERR
   160                              <1> ;Start by tmporarily moving the stderr handler into stdio
   161                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   162 000049AD 50                  <1>     push rax
   163 000049AE 53                  <1>     push rbx
   164 000049AF E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   165 000049B4 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   166 000049B7 668905E1B6FFFF      <1>     mov word [errHdls], ax      ;Save em
   167 000049BE 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   168 000049C2 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   169 000049C4 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   170 000049C7 5B                  <1>     pop rbx
   171 000049C8 58                  <1>     pop rax
   172                              <1>     return
    13                              <2> %%_ret:
    14 000049C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> errRetHdls:
   175                              <1> ;Returns STDIO from STDERR.
   176 000049CA 50                  <1>     push rax
   177 000049CB 53                  <1>     push rbx
   178 000049CC E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   179 000049D1 0FB705C7B6FFFF      <1>     movzx eax, word [errHdls]
   180 000049D8 66C705BEB6FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   181 000049E1 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   182 000049E4 5B                  <1>     pop rbx
   183 000049E5 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 000049E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> 
   186                              <1> getJftPtr:
   187                              <1> ;Preserves all registers except rbx.
   188                              <1> ;Output: rbx -> JFT of current task
   189 000049E7 50                  <1>     push rax        ;Save rax
   190 000049E8 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   191 000049ED CD21                <1>     int 21h
   192 000049EF 58                  <1>     pop rax
   193 000049F0 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   194 000049F6 7605                <1>     jbe .pspJftExit
   195 000049F8 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   196                              <1>     return
    13                              <2> %%_ret:
    14 000049FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> .pspJftExit:
   198 000049FD 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   199                              <1>     return
    13                              <2> %%_ret:
    14 00004A01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15F7010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 800D(9D000000)80    <1>     or byte [statFlg1], inLdr  ;Ok now we start our special work
    15 0000001C 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    16 00000023 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    17 00000027 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    18 0000002B 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    19                              <1> ;Setup Int 22h, Int 23h and Int 24h
    20 00000032 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    21 00000036 488905(2C000000)    <1>     mov qword [parentInt22], rax
    22 0000003D E8(93450000)        <1>     call resetIDTentries
    23                              <1> ;Get a pointer to DOS Sysvars
    24 00000042 B452                <1>     mov ah, 52h ;Get sysvars
    25 00000044 CD21                <1>     int 21h
    26 00000046 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    27                              <1> ;Call for simple internationalisation data
    28 0000004D B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    29 00000052 CD21                <1>     int 21h
    30 00000054 3CFF                <1>     cmp al, -1
    31 00000056 7412                <1>     je .skipSwitch
    32 00000058 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    33 0000005E 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    34 00000061 7507                <1>     jne .skipSwitch
    35 00000063 C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    36                              <1> .skipSwitch:
    37 0000006A B800380000          <1>     mov eax, 3800h  ;Get current country data
    38 0000006F 488D15(34000000)    <1>     lea rdx, ctryData
    39 00000076 CD21                <1>     int 21h ;Write the data to the internal country table
    40                              <1> ;Now determine if this is the master copy of COMMAND.COM
    41                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    42 00000078 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    43 0000007D CD21                <1>     int 21h
    44 0000007F 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    45 00000082 B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    46 00000087 CD21                <1>     int 21h
    47 00000089 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    48 0000008C 0F8582000000        <1>     jne .skipMaster
    49                              <1> ;Ok so we are master command.com
    50                              <1> ;Now make myself the real parent
    51 00000092 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    52 00000099 4C8905(17000000)    <1>     mov qword [realParent], r8
    53                              <1> ;Set current Drive in COMSPEC
    54 000000A0 B800190000          <1>     mov eax, 1900h ;Get current Drive
    55 000000A5 CD21                <1>     int 21h
    56 000000A7 0441                <1>     add al, "A"
    57 000000A9 8805(A0100000)      <1>     mov byte [comspecEvar.cspec], al
    58                              <1> ;Set Int 2Eh up
    59 000000AF 488D15(821A0000)    <1>     lea rdx, int2Eh
    60 000000B6 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    61 000000BB CD21                <1>     int 21h
    62                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    63                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    64 000000BD BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    65 000000C2 B800480000          <1>     mov eax, 4800h
    66 000000C7 CD21                <1>     int 21h
    67 000000C9 0F8244FFFFFF        <1>     jc .exitBad
    68                              <1> ;Set master environment as mine
    69 000000CF 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    70 000000D3 488D35(98100000)    <1>     lea rsi, masterEnv
    71 000000DA 4889C7              <1>     mov rdi, rax
    72 000000DD B91E000000          <1>     mov ecx, menv_len
    73 000000E2 F3A4                <1>     rep movsb   ;Copy the chars over!
    74                              <1> 
    75 000000E4 488D15(EA080000)    <1>     lea rdx, crlf
    76 000000EB B409                <1>     mov ah, 09h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 800D(9D000000)40    <1>     or byte [statFlg1], inLdrDT
    79 000000F6 E8(A92D0000)        <1>     call time
    80 000000FB E8(FB2B0000)        <1>     call date
    81 00000100 8025(9D000000)BF    <1>     and byte [statFlg1], ~inLdrDT
    82 00000107 488D15(EA080000)    <1>     lea rdx, crlf
    83 0000010E B409                <1>     mov ah, 09h
    84 00000110 CD21                <1>     int 21h
    85 00000112 EB2E                <1>     jmp short .printInit
    86                              <1> .skipMaster:    
    87                              <1> ;We now search for the master environment!!
    88                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    89                              <1>     ; parent. This is the previous master command interpreter! This means
    90                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
    91                              <1>     ; then set our environment ptr in the PSP to the master environment.
    92 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    93 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    94 00000123 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
    95 0000012A F2AE                <1>     repne scasb
    96 0000012C 67E313              <1>     jecxz .printInit
    97 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    98 00000132 E8(D2420000)        <1>     call ucChar
    99 00000137 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   100 00000139 7507                <1>     jne .printInit
   101 0000013B C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   102                              <1> .printInit:
   103 00000142 488D1D(024A0000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   104                              <1> ;Finish by printing INIT string.
   105 00000149 53                  <1>     push rbx
   106 0000014A 488D1541000000      <1>     lea rdx, initString
   107 00000151 B409                <1>     mov ah, 09h
   108 00000153 CD21                <1>     int 21h ;Print init string
   109 00000155 E8(E7360000)        <1>     call version.printVersionNumber
   110 0000015A 488D1567000000      <1>     lea rdx, initString2
   111 00000161 B409                <1>     mov ah, 09h
   112 00000163 CD21                <1>     int 21h ;Print init string
   113 00000165 5B                  <1>     pop rbx
   114                              <1>     ;Now we add the stack to the alloc and paragraph align
   115 00000166 4881C340060000      <1>     add rbx, stackSize
   116 0000016D 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   117 00000174 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   118 00000178 48C1E304            <1>     shl rbx, 4
   119 0000017C 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   120 0000017F 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   121 00000186 8025(9D000000)7F    <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   122 0000018D E9(B6100000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   123                              <1> ;Loader Data here
   124                              <1> initString: 
   125 00000192 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   125 0000019B 66696320436F6D7075- <1>
   125 000001A4 746572205265736561- <1>
   125 000001AD 726368285229205343- <1>
   125 000001B6 502F444F5328522920- <1>
   125 000001BF 56657273696F6E2024  <1>
   126                              <1> initString2:
   127 000001C8 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   127 000001D1 202020284329436F70- <1>
   127 000001DA 797269676874205363- <1>
   127 000001E3 69656E746966696320- <1>
   127 000001EC 436F6D707574657220- <1>
   127 000001F5 526573656172636820- <1>
   127 000001FE 323032342E0D0A24    <1>
   128 00000206 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   128 0000020F 20444F532076657273- <1>
   128 00000218 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+7+2 passes

